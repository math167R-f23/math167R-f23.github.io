---
title: "MATH167R: Simulations"
author: "Peter Gao"
format: 
  revealjs:
    theme: [./slides.scss, ../theme.scss]
editor: visual
---

## Overview of today

-   Random variables in R
-   The `r`, `p`, `d`, and `q` functions
-   Writing simulations

## Random variables in R

We have already seen

## The `r`, `p`, `d`, and `q` functions

1.  `rnorm()` can be used to generate `n` random observations from a normal distribution:

```{r}
#| echo: TRUE
#| eval: TRUE
rnorm(n = 1, mean = 0, sd = 1)
```

2.  `pnorm()` can be used to compute the distribution function at a value `q`:

```{r}
#| echo: TRUE
#| eval: TRUE
pnorm(q = 1, mean = 0, sd = 1)
```

3.  `qnorm()` can be used to compute the quantile function at a percentile `p`:

```{r}
#| echo: TRUE
#| eval: TRUE
qnorm(p = .75, mean = 0, sd = 1)
```

4.  `dnorm()` can be used to compute the density function at a value `x`:

```{r}
#| echo: TRUE
#| eval: TRUE
dnorm(x = .5, mean = 0, sd = 1)
```

## Exercise

Suppose we perform a hypothesis test using a normal distribution and obtain a z-score of -1.24. How would we compute the p-value?

## Random seeds

Remember that `set.seed()` can be used to ensure that you obtain the same results each time you run your code.

For example, if you include the command `x <- rnorm(1)` in an .Rmd document with running `set.seed()`, each time you knit, you will produce a different value of `x`.

```{r}
#| echo: TRUE
#| eval: TRUE
set.seed(1022)
rnorm(n = 1, mean = 0, sd = 1)
```

## Writing simulations

Suppose we wish to compute the expected value (or some other summary) of the gambler's winnings. We can either:

-   Analytically compute the quantity of interest
-   Write code to repeatedly simulate values of the gambler's winnings and then summarize these values

## Monte Carlo methods

## Example: Transformations of random variables

Suppose $X_i\sim N(0, 1)$ for $1\leq i\leq n$, for some $n$. What is $E(\mathrm{max}(X_1,\ldots, X_n))?$ How does $E(\mathrm{max}(X_1,\ldots, X_n))$ change for different values of $n$?

```{r}
#| echo: TRUE
#| eval: TRUE
set.seed(1022)
n_sim <- 1000
n <- 10
maxes <- numeric(n_sim)
for (i in 1:n_sim) {
  maxes[i] <- max(rnorm(n))
}
mean(maxes)
```

. . .

What about for $n=100$? Should the expected maximum be larger or smaller?

. . .

```{r}
#| echo: TRUE
#| eval: TRUE
n_sim <- 1000
n <- 100
maxes <- numeric(n_sim)
for (i in 1:n_sim) {
  maxes[i] <- max(rnorm(n))
}
mean(maxes)
```

## Example: Transformations of random variables

Suppose $X\sim N(0, 1)$. What is $E(e^X)$?

```{r}
#| echo: TRUE
#| eval: TRUE
#| error: TRUE
#| code-line-numbers: "2"
i <- function(d) {
  print(d)
  if (!is.numeric(d)) {
    stop("`d` must be numeric", call. = FALSE)
  }
  d + 10
}
f("a")
```

## Random walks

## Gambler's ruin

```{r echo = FALSE}
knitr::knit_exit()
```

## Writing simulations

Suppose we wish to compute the expected value (or some other summary) of the gambler's winnings. We can either:

-   Analytically compute the quantity of interest
-   Write code to repeatedly simulate values of the gambler's winnings and then summarize these values

## Monte Carlo methods

## Monte Carlo integration

\`\`\`{r}
