[
  {
    "objectID": "labs/03_lab.html",
    "href": "labs/03_lab.html",
    "title": "Lab 3",
    "section": "",
    "text": "You should edit this .Rmd using RStudio, then click Render in the menu bar of the Source window (above the text of this .Rmd). Remember, you must submit both your .Rmd and the compiled .html in order to receive full credit!"
  },
  {
    "objectID": "labs/03_lab.html#a.-weather-forecast-data",
    "href": "labs/03_lab.html#a.-weather-forecast-data",
    "title": "Lab 3",
    "section": "A. Weather Forecast Data",
    "text": "A. Weather Forecast Data\n\nFor this lab, we’ll be using data on weather forecasts gathered by student at Saint Louis University. You can read about the dataset here. Download the weather forecasts data using the following code:\n\nweather_forecasts &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-12-20/weather_forecasts.csv')\n\nRows: 651968 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): city, state, high_or_low, forecast_outlook, possible_error\ndbl  (4): forecast_hours_before, observed_temp, forecast_temp, observed_precip\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nHow many rows are in this dataset? How many columns?\n\n# YOUR CODE HERE\n\n\nHow many cities are represented in this dataset?\n\n# YOUR CODE HERE\n\n\nCreate a new data frame containing only the forecasts for San Jose. You may have to explore the values for the city variable.\n\n# YOUR CODE HERE\n\n\nCompute the mean absolute error between observed_temp and forecast_temp for San Jose.\n::: {.cell}\n# YOUR CODE HERE\n:::\n\nCompute the mean absolute error between observed_temp and forecast_temp for San Jose using only forecasts made 48 hours in advance.\n::: {.cell}\n# YOUR CODE HERE\n:::\n\nCompute the mean absolute error between observed_temp and forecast_temp for San Jose using only forecasts made 12 hours in advance.\n::: {.cell}\n# YOUR CODE HERE\n:::\n\nCompare your answers to 6 and 7. What do you notice?"
  },
  {
    "objectID": "labs/02_lab.html",
    "href": "labs/02_lab.html",
    "title": "Lab 2",
    "section": "",
    "text": "You should edit this .Rmd using RStudio, then click Render in the menu bar of the Source window (above the text of this .Rmd). Remember, you must submit both your .Rmd and the compiled .html in order to receive full credit!"
  },
  {
    "objectID": "labs/02_lab.html#a.-functions-and-vectors",
    "href": "labs/02_lab.html#a.-functions-and-vectors",
    "title": "Lab 2",
    "section": "A. Functions and Vectors",
    "text": "A. Functions and Vectors\nIn this problem, we will revisit the sample function to simulate the birthday problem. The birthday problem asks for the probability that in a set of \\(n\\) randomly chosen people, at least two will share a birthday. For the purpose of this problem, suppose that we live in a universe where there are exactly 365 days in a year (sorry to those of you with leap day birthdays!) and each individual has an equal probability of being born on any given day.\n1. Write code to create a vector birthdays of the numbers 1:365.\n::: {.cell}\n\n```{.r .cell-code}\n# YOUR CODE HERE\n```\n:::\n2. Use the sample() function to sample \\(n=5\\) birthdays (with replacement) from birthdays and save it as a vector sample_5. Repeat this with \\(n=10, 20, 30, 50, 100\\). You may want to use set.seed() to set a random seed.\n::: {.cell}\n\n```{.r .cell-code}\n# YOUR CODE HERE\n```\n:::\n3. Did you sample the same birthday twice in sample_5? What about for the other samples? Write code that can be used to test whether any of the days appears twice in each of your samples. There are many ways to do this and you can use any functions. In particular, length() and unique() may be useful.\n::: {.cell}\n\n```{.r .cell-code}\n# YOUR CODE HERE\n```\n:::\n4. What do you observe? Discuss any patterns or surprising findings."
  },
  {
    "objectID": "labs/02_lab.html#b.-working-with-data-frames",
    "href": "labs/02_lab.html#b.-working-with-data-frames",
    "title": "Lab 2",
    "section": "B. Working with Data Frames",
    "text": "B. Working with Data Frames\nUse the following code to load the penguins data.\n\n# load palmer penguins package\nlibrary(palmerpenguins)\n\n# open penguins data as a data frame\ndata(penguins)\npenguins &lt;- as.data.frame(penguins)\n\n5. Using the mean() function, compute the mean body mass of penguins in the dataset, dropping any missing values.\n::: {.cell}\n\n```{.r .cell-code}\n# YOUR CODE HERE\n```\n:::\n\n\n&lt;!-- REPLACE THIS LINE WITH YOUR ANSWER --&gt;\n6. Using the max function, compute the maximum flipper length of penguins in the dataset, dropping any missing values.\n::: {.cell}\n\n```{.r .cell-code}\n# YOUR CODE HERE\n```\n:::\n\n\n&lt;!-- REPLACE THIS LINE WITH YOUR ANSWER --&gt;\n7. Using the hist function, create a histogram of the ratio of the penguins’ bill length to bill depth, dropping any missing values. What is the shape of the reuslting distribution?\n::: {.cell}\n\n```{.r .cell-code}\n# YOUR CODE HERE\n```\n:::\n\n\n&lt;!-- REPLACE THIS LINE WITH YOUR ANSWER --&gt;"
  },
  {
    "objectID": "labs/01_first-R-lab.html",
    "href": "labs/01_first-R-lab.html",
    "title": "Lab 1: Basic Definitions",
    "section": "",
    "text": "Explain what the following code does in your own words.\n\nx &lt;- 1\ny &lt;- 1\nprint(x + y)\n\n[1] 2\n\n\nYOUR EXPLANATION HERE"
  },
  {
    "objectID": "labs/01_first-R-lab.html#a.-combining-r-code-and-output",
    "href": "labs/01_first-R-lab.html#a.-combining-r-code-and-output",
    "title": "Lab 1: Basic Definitions",
    "section": "",
    "text": "Explain what the following code does in your own words.\n\nx &lt;- 1\ny &lt;- 1\nprint(x + y)\n\n[1] 2\n\n\nYOUR EXPLANATION HERE"
  },
  {
    "objectID": "labs/01_first-R-lab.html#b.-running-an-r-script",
    "href": "labs/01_first-R-lab.html#b.-running-an-r-script",
    "title": "Lab 1: Basic Definitions",
    "section": "B. Running an R script",
    "text": "B. Running an R script\n\nDownload the 01_lab-test-code.R file and put it in the same folder as this lab. Change the chunk option eval = F to eval = T. What does this code file do?\n\nsource(\"01_lab-test-code.R\")\n\nYOUR EXPLANATION HERE"
  },
  {
    "objectID": "labs/01_first-R-lab.html#c.-exercises",
    "href": "labs/01_first-R-lab.html#c.-exercises",
    "title": "Lab 1: Basic Definitions",
    "section": "C. Exercises",
    "text": "C. Exercises\n\nIn contrast to the usual mathematical interpretation of x = x + 1, which has no finite solution, the following assignment evaluates to a finite value. Explain.\n\nx &lt;- 1\nx &lt;- x + 1\nprint(x)\n\n[1] 2\n\n\nYOUR EXPLANATION HERE\nThe first expression below evaluates to a numeric value, but the second one causes an error. Explain.\n\nT + 1\n\n[1] 2\n\nT + \"Hello\"\n\nError in T + \"Hello\": non-numeric argument to binary operator\n\n\nYOUR EXPLANATION HERE\nCorrect the code below so example_chr is an object of the character class.\n\n# YOUR CODE HERE\nexample_chr &lt;- T\nclass(example_chr)\n\n[1] \"logical\"\n\n\nWhat questions do you have about R, RStudio, and RMarkdown?\n\nYour first question…\nYour second question…"
  },
  {
    "objectID": "labs/08_lab.html",
    "href": "labs/08_lab.html",
    "title": "Lab 7",
    "section": "",
    "text": "Remember, you must submit both your .Rmd and the compiled .html in order to receive full credit! In addition, to receive full credit, your code output and plots must be correctly formatted."
  },
  {
    "objectID": "labs/08_lab.html#a.-one-dimensional-random-walks",
    "href": "labs/08_lab.html#a.-one-dimensional-random-walks",
    "title": "Lab 7",
    "section": "A. One-dimensional random walks",
    "text": "A. One-dimensional random walks\n\nIn this part, you will simulate a one-dimensional random walk. Suppose you are at the point \\(x\\) at time \\(t\\). At time \\(t+1\\), you have a 50% chance of moving forwards to \\(x+1\\) and a 50% chance of moving backwards to \\(x-1\\). Assume that at time \\(t=0\\), you are at \\(x_0=0\\).\nWrite a function random_walk() that takes as input a single numeric \\(n\\) and simulates \\(n\\) steps of a one-dimensional random walk. The output should be a length vector of length \\(n+1\\) starting with 0 where the \\((i+1)\\)th entry represents the location of the random walker at time \\(t=i\\). For example, random_walk(5) may return the vector \\((0, 1, 2, 1, 2)\\).\nUse your function to generate a random walk of 100 steps and generate a line graph with \\(t=0,1,\\ldots, 100\\) on the x-axis and \\(x_0,\\ldots, x_{100}\\) on the y-axis."
  },
  {
    "objectID": "labs/08_lab.html#b.-writing-a-simulation.",
    "href": "labs/08_lab.html#b.-writing-a-simulation.",
    "title": "Lab 7",
    "section": "B. Writing a simulation.",
    "text": "B. Writing a simulation."
  },
  {
    "objectID": "labs/04_lab.html",
    "href": "labs/04_lab.html",
    "title": "Lab 4",
    "section": "",
    "text": "Remember, you must submit both your .Rmd and the compiled .html in order to receive full credit! In addition, to receive full credit, your code output and plots must be correctly formatted."
  },
  {
    "objectID": "labs/04_lab.html#a.-penguins-visualizations",
    "href": "labs/04_lab.html#a.-penguins-visualizations",
    "title": "Lab 4",
    "section": "A. Penguins visualizations",
    "text": "A. Penguins visualizations\n\nFor this lab, we’ll be using the palmerpenguins data. Use the following code to load the data.\n\n\nlibrary(palmerpenguins)\ndata(penguins)\n\n\nCreate and interpret a histogram of bill_length_mm using base R code. Be sure to use meaningful axis labels and titles.\n\n\n# YOUR CODE HERE\n\n\n\nCreate and interpret a histogram of bill_length_mm using ggplot2. Be sure to use meaningful axis labels and titles.\n\n\n# YOUR CODE HERE\n\n\nCreate and interpret a scatterplot of bill_length_mm versus bill_depth_mm using base R code. Be sure to use meaningful axis labels and titles.\n\n\n# YOUR CODE HERE\n\n\n\nCreate and interpret a scatterplot of bill_length_mm versus bill_depth_mm using ggplot2. Be sure to use meaningful axis labels and titles.\n\n\n# YOUR CODE HERE\n\n\n\nUpdate your ggplot2 scatterplot of bill_length_mm versus bill_depth_mm using ggplot2 so that the color of a point represents the corresponding penguin’s species. What do you notice?\n\n\n# YOUR CODE HERE"
  },
  {
    "objectID": "labs/04_lab.html#b.-your-choice-of-data",
    "href": "labs/04_lab.html#b.-your-choice-of-data",
    "title": "Lab 4",
    "section": "B. Your choice of data",
    "text": "B. Your choice of data\n\nFind and download a dataset from the Tidy Tuesday project (https://github.com/rfordatascience/tidytuesday).\n\n\n# YOUR CODE HERE\n\n\nCreate and interpret a univariate visualization for a variable of your choice.\n\n\n# YOUR CODE HERE\n\n\n\nCreate and interpret a multivariate visualization for a variable of your choice.\n\n\n# YOUR CODE HERE"
  },
  {
    "objectID": "labs/05_lab.html",
    "href": "labs/05_lab.html",
    "title": "Lab 5",
    "section": "",
    "text": "Remember, you must submit both your .Rmd and the compiled .html in order to receive full credit! In addition, to receive full credit, your code output and plots must be correctly formatted."
  },
  {
    "objectID": "labs/05_lab.html#a.",
    "href": "labs/05_lab.html#a.",
    "title": "Lab 5",
    "section": "A.",
    "text": "A.\n\nDownload the median age by state tables for 2010 and 2020 from the Canvas assignment here. You can use the read_csv function from the readr package to open these files and save them as age_2010 and age_2020.\n\n\nCreate a scatter plot with each state as a point, with 2020 median age on the y-axis and 2010 median age on the x-axis. You may use any of the functions we have discussed in class. Note that there are many possible solutions. My solution used pivot_wider(), left_join(), and ggplot(), but you are welcome to use any solution you wish.\n\nNote: the following commands were used to download this data using the tidycensus package. You do not need to run the following code: it is only provided in case you are curious about downloading data from the U.S. Census using R. In your final report, be sure that the following code chunk is set to eval = F and echo = F.\n\nlibrary(tidycensus)\n\n# the following code loads my local Census API Key, which is used to access \n# census data\nSys.getenv(\"CENSUS_API_KEY\")\n\n# 2010 median age by state\nage_2010 &lt;- get_decennial(geography = \"state\", \n                          variables = \"P013I001\", \n                          year = 2010,\n                          sumfile = \"sf1\")\n\n# 2020 median age by state\nage_2020 &lt;- get_decennial(geography = \"state\",\n                          variables = \"P13_001N\",\n                          year = 2020,\n                          sumfile = \"dhc\")\n\n\n# write to csv files\nwrite.csv(age_2010, \"~/Documents/MATH167R/data/median_age_by_state_2010.csv\")\nwrite.csv(age_2020, \"~/Documents/MATH167R/data/median_age_by_state_2020.csv\")"
  },
  {
    "objectID": "labs/05_lab.html#b.-your-choice-of-data",
    "href": "labs/05_lab.html#b.-your-choice-of-data",
    "title": "Lab 5",
    "section": "B. Your choice of data",
    "text": "B. Your choice of data\n\nAs a group, identify a dataset of interest and open it in R. Provide a brief one paragraph description of the dataset and explain why you chose it.\nState three possible research questions you could explore using this dataset.\nFor each of your three research questions, generate a descriptive statistic or data visualization using your dataset. Discuss and interpret your findings."
  },
  {
    "objectID": "labs/07_lab.html",
    "href": "labs/07_lab.html",
    "title": "Lab 7",
    "section": "",
    "text": "Remember, you must submit both your .Rmd and the compiled .html in order to receive full credit! In addition, to receive full credit, your code output and plots must be correctly formatted."
  },
  {
    "objectID": "labs/07_lab.html#a.-skewness-and-kurtosis",
    "href": "labs/07_lab.html#a.-skewness-and-kurtosis",
    "title": "Lab 7",
    "section": "A. Skewness and Kurtosis",
    "text": "A. Skewness and Kurtosis\nSkewness describes how asymmetrical the distribution of a numerical variable is around its mean. Given observations \\(x_1,\\ldots, x_n\\), we can calculate the sample skewness \\(s\\) of a variable using the following formula:\n\\[s = \\frac{\\frac{1}{n}\\sum\\limits_{i=1}^n(x_i-\\overline{x})^3}{\\left[\\frac{1}{n}\\sum\\limits_{i=1}^n(x_i-\\overline{x})^2\\right]^{3/2}}\\] Kurtosis is a measure of the “tailedness” of the distribution of a numerical variable is around its mean. Higher values of kurtosis indicate more extreme outliers. Given observations \\(x_1,\\ldots, x_n\\), we can calculate the sample kurtosis \\(k\\) of a variable using the following formula:\n\\[k = \\frac{\\frac{1}{n}\\sum\\limits_{i=1}^n(x_i-\\overline{x})^4}{\\left[\\frac{1}{n}\\sum\\limits_{i=1}^n(x_i-\\overline{x})^2\\right]^{2}}-3\\]\n\nWrite a function skewness() that takes as input a numeric vector x and returns the sample skewness. There are functions in R that compute skewness, but you cannot use any of them–write your own implementation.\nWrite a function kurtosis() that takes as input a numeric vector x and returns the sample skewness. There are functions in R that compute kurtosis, but you cannot use any of them–write your own implementation.\nUse your function to compute the sample skewness of the arr_delay variable in the flights dataset contained in the nycflights13 package.\nUse your function to compute the sample kurtosis of the arr_delay variable in the flights dataset contained in the nycflights13 package."
  },
  {
    "objectID": "labs/07_lab.html#b.-finding-an-error",
    "href": "labs/07_lab.html#b.-finding-an-error",
    "title": "Lab 7",
    "section": "B. Finding an error",
    "text": "B. Finding an error\nSuppose you have two teams of runners participating in a 5k. We wish to write a function that takes as input two vectors representing the times of the runners in each team and returns a list of two vectors representing the ranks of each team’s runners.\nFor example, if the first team’s times are c(16.8, 21.2, 19.1) and the second team’s times are c(17.2, 18.1, 20.0), the function should return c(1, 6, 4) for the first team and c(2, 3, 5) for the second team.\nBelow is a draft version of the function get_runner_ranks(). However, there is an error somewhere. Use any method we discussed in class to identify the error.\n\nget_runner_ranks &lt;- function(x, y) {\n  # combine all runner times\n  combined_times &lt;- c(x, y) \n  \n  # sort all runner times from fastest to slowest\n  sort(combined_times, decreasing = T)\n  \n  # create ranks vectors\n  ranks_x &lt;- numeric(length(x))\n  ranks_y &lt;- numeric(length(y))\n  \n  for (i in seq_along(ranks_x)) {\n    # look up rank of time i in x in combined_times\n    ranks_x[i] &lt;- match(x[i], combined_times)\n  }\n  \n  for (i in seq_along(ranks_y)) {\n    # look up rank of time i in y in combined_times\n    ranks_y[i] &lt;- match(y[i], combined_times)\n  }\n  \n  # return a list of first team and second team ranks\n  return(list(x = ranks_x, y = ranks_y))\n}\n\n\nBelow, write a corrected version of get_runner_ranks() and compute get_runner_ranks(c(16.8, 21.2, 19.1), c(17.2, 18.1, 20.0)).\n\n\nget_runner_ranks &lt;- function(x, y) {\n  # YOUR CODE HERE\n}\n\n\nExplain in your own words what the error was."
  },
  {
    "objectID": "labs/06_lab.html",
    "href": "labs/06_lab.html",
    "title": "Lab 6",
    "section": "",
    "text": "Remember, you must submit both your .Rmd and the compiled .html in order to receive full credit! In addition, to receive full credit, your code output and plots must be correctly formatted."
  },
  {
    "objectID": "labs/06_lab.html#a.-basic-functions",
    "href": "labs/06_lab.html#a.-basic-functions",
    "title": "Lab 6",
    "section": "A. Basic functions",
    "text": "A. Basic functions\n\nWrite a function is_even() that takes as input a single integer x and returns a logical that represents whether x is an even number or not. This function should check to make sure the input is an integer. If the input is not an integer, the function should stop with an informative error message.\nEvaluate your function with even integer input.\nEvaluate your function with odd numeric input.\nTrigger your custom error message. Note: You will need to add the chunk option error = TRUE to your R Markdown code chunk. If you do not, your document will not compile.\nWrite a function get_factors() that takes a single positive integer input x and outputs all of its factors as a vector. For example, since 10 is divisible by 1, 2, 5, and 10 itself, get_factors(10) should return a numeric vector containing 1, 2, 5, and 10."
  },
  {
    "objectID": "labs/06_lab.html#b.-thresholding-functions",
    "href": "labs/06_lab.html#b.-thresholding-functions",
    "title": "Lab 6",
    "section": "B. Thresholding functions",
    "text": "B. Thresholding functions\n\nThe hard-threshold function is defined as\n\n\\[f_\\lambda(x) =\\begin{cases}\nx & |x|\\geq \\lambda\\\\\n0 & |x|&lt;\\lambda\n\\end{cases}\\]\nWrite an R function that takes two arguments as input: a numeric input x and a threshold lambda. Your function should return the value of \\(f_\\lambda(x)\\) and work for vector input x of any length.\n\nFor \\(\\lambda=4\\), demonstrate your function on the vector c(-5, -3, 0, 3, 5).\n\n(Hint: the output should be the vector -5, 0, 0, 0, 5)\n\nFor \\(\\lambda=2\\), demonstrate your function on the vector c(-7, -5, -3, 0, 3, 5, 7)."
  },
  {
    "objectID": "weeks/week-1.html",
    "href": "weeks/week-1.html",
    "title": "Week 1",
    "section": "",
    "text": "Slides 01\nCheck-in 01"
  },
  {
    "objectID": "weeks/week-1.html#key-links",
    "href": "weeks/week-1.html#key-links",
    "title": "Week 1",
    "section": "",
    "text": "Slides 01\nCheck-in 01"
  },
  {
    "objectID": "projects/midterm_project.html",
    "href": "projects/midterm_project.html",
    "title": "Midterm Project",
    "section": "",
    "text": "For this project, you will be exploring and visualizing data on Craigslist apartment rental postings in the Bay Area. Your goal is to observe and visualize interesting trends and patterns in the data, and to tell a cohesive and compelling story about the insights you gain. In the first part of the assignment, you will practice generating descriptive statistics and data visualizations to explore changing rental prices in Santa Clara county. In the second part of this assignment you will identify your own questions of interest and investigate them using your choice of data visualizations. Exceptional projects will include creative and unique insights into the data.\nYour projects will be evaluated on the quality of your visualizations and exploratory analyses. This includes, but is not limited to, the quality of your writing, the informativeness and clarity of your visualizations, and your creativity.\nThe target audience of your report is an educated reader who is uninformed about the details of the data, but is interested in learning more about recent trends in Bay Area housing prices.\n\n\n\nIf you use this .Rmd as your starting template, please remove all information about requirements and grading. Your final submission should only include the questions and answers for parts A and B.\nFinal submissions must include .Rmd and .html files.\nThe data are available here from Tidy Tuesday, as prepared by Dr. Kate Pennington. Note that you can use links within read_csv() to read online .csv files. I strongly recommend saving a version of the unprocessed .csv on your machine in a data subfolder within your project folder so you will be able to work offline.\n\n\n\n\n\nPart A (35 points): graded on the correctness of your computations, appropriate use of R functions, and the depth/clarity of your explanations\nPart B (45 points): graded based on whether your visualizations meet the standards outlined below under Part B.\nCode style/formatting (20 points): to receive full credit, all code, text, and output in your final report should be correctly formatted. Code should be appropriately commented and styled (ex. appropriate variable names)."
  },
  {
    "objectID": "projects/midterm_project.html#instructions",
    "href": "projects/midterm_project.html#instructions",
    "title": "Midterm Project",
    "section": "",
    "text": "For this project, you will be exploring and visualizing data on Craigslist apartment rental postings in the Bay Area. Your goal is to observe and visualize interesting trends and patterns in the data, and to tell a cohesive and compelling story about the insights you gain. In the first part of the assignment, you will practice generating descriptive statistics and data visualizations to explore changing rental prices in Santa Clara county. In the second part of this assignment you will identify your own questions of interest and investigate them using your choice of data visualizations. Exceptional projects will include creative and unique insights into the data.\nYour projects will be evaluated on the quality of your visualizations and exploratory analyses. This includes, but is not limited to, the quality of your writing, the informativeness and clarity of your visualizations, and your creativity.\nThe target audience of your report is an educated reader who is uninformed about the details of the data, but is interested in learning more about recent trends in Bay Area housing prices.\n\n\n\nIf you use this .Rmd as your starting template, please remove all information about requirements and grading. Your final submission should only include the questions and answers for parts A and B.\nFinal submissions must include .Rmd and .html files.\nThe data are available here from Tidy Tuesday, as prepared by Dr. Kate Pennington. Note that you can use links within read_csv() to read online .csv files. I strongly recommend saving a version of the unprocessed .csv on your machine in a data subfolder within your project folder so you will be able to work offline.\n\n\n\n\n\nPart A (35 points): graded on the correctness of your computations, appropriate use of R functions, and the depth/clarity of your explanations\nPart B (45 points): graded based on whether your visualizations meet the standards outlined below under Part B.\nCode style/formatting (20 points): to receive full credit, all code, text, and output in your final report should be correctly formatted. Code should be appropriately commented and styled (ex. appropriate variable names)."
  },
  {
    "objectID": "projects/midterm_project.html#a.-analyzing-trends-in-san-jose-rental-prices",
    "href": "projects/midterm_project.html#a.-analyzing-trends-in-san-jose-rental-prices",
    "title": "Midterm Project",
    "section": "A. Analyzing trends in San Jose rental prices",
    "text": "A. Analyzing trends in San Jose rental prices\n\nHow many 1 bedroom listings from Santa Clara county are in this dataset?\nWhat is the median price for a 1 bedroom listing in Santa Clara county in 2018?\nWhich county has the highest median price for a 1 bedroom listing in 2018?\nCreate two histograms for the prices of 1 bedroom listings in Santa Clara county in 2005 and 2018. Compare and discuss.\nCreate and interpret a line plot with year on the x-axis and median price for a 1 bedroom apartment for Santa Clara county on the y-axis from 2000 to 2018.\nCreate and interpret a single plot with year on the x-axis and median price for a 1 bedroom apartment on the y-axis, using a separate line for each city in Santa Clara county, for the years 2000 to 2018."
  },
  {
    "objectID": "projects/midterm_project.html#b.-open-ended-data-visualization",
    "href": "projects/midterm_project.html#b.-open-ended-data-visualization",
    "title": "Midterm Project",
    "section": "B. Open ended data visualization",
    "text": "B. Open ended data visualization\n\nRequirements\n\nIdentify three research questions of interest that you want to study using this dataset.\nFor each of your three research questions, generate a data visualization using your dataset. Discuss and interpret your findings.\nYour project should include at least two different types of visualizations (e.g. scatterplots, box plots, bar plots, histograms, line plots, etc.).\nAt least one of your plots should display variation over time or location (or both) in some way.\nEach visualization should include a caption that fully explains how to understand your visualization (i.e. explain all the components, legends, etc.). A good guideline is that someone who has not read your report should be able to look at just a visualization and its caption and fully understand what that visualization is showing.\nEach visualization must be accompanied by at least one paragraph of text. This text should include an interpretation of your visualization as well as what is interesting about your visualization. A strong visualization will be accompanied by text explaining what patterns or insights it helps us glean from the data.\n\nKeep in mind: there are no right answers for this project! These are real data, and I’m hoping for creative and interesting analyses that tell a compelling story about the data rather than cookie cutter reports. Have some fun with it, and good luck!"
  },
  {
    "objectID": "projects/final_project.html",
    "href": "projects/final_project.html",
    "title": "Final Project",
    "section": "",
    "text": "For this project, you will be exploring data on a topic of your choice. You should choose a dataset that interests you and will enable you to demonstrate the exploration, visualization, and analysis skills you have learned this semester.\nYou will use your selected dataset to conduct an exploratory data analysis as well as a statistical analysis (hypothesis test or regression analysis) to explore a set of research questions of your own choice.\nYour projects will be evaluated on your use of code to perform your analysis as well as the quality of your visualizations and exposition. This includes, but is not limited to, the quality of your writing, the informativeness of your visualizations, and the depth of research questions. The target audience of your report is a peer who is uninformed about the details of the data, but is interested in learning more about your analysis. Again, there are no right answers for this project! Successful projects will involve more than a cursory analysis of one or two variables in the dataset and will tell a compelling story about the dataset.\n\n\n\nChoose a data set or multiple datasets with the following characteristics:\n\nAt least three continuous variables\nAt least two categorical variables\n\nIdentify three research questions of interest that you want to study using this dataset. Each of your research questions should involve at least two of the variables in your dataset.\nFor each of your three research questions, generate at least one data visualization or descriptive statistic. Discuss and interpret your findings.\nFor at least one of your research questions, perform a statistical analysis (ex. hypothesis test, confidence interval, linear regression). Discuss and interpret your findings.\nFinal submissions must include .Rmd and .html files.\nIf you are an undergraduate interested in participating in a competition and potentially presenting at the Electronic Undergraduate Statistics Conference, you may consider using this project to submit to the Undergraduate Class Project Competition."
  },
  {
    "objectID": "projects/final_project.html#instructions",
    "href": "projects/final_project.html#instructions",
    "title": "Final Project",
    "section": "",
    "text": "For this project, you will be exploring data on a topic of your choice. You should choose a dataset that interests you and will enable you to demonstrate the exploration, visualization, and analysis skills you have learned this semester.\nYou will use your selected dataset to conduct an exploratory data analysis as well as a statistical analysis (hypothesis test or regression analysis) to explore a set of research questions of your own choice.\nYour projects will be evaluated on your use of code to perform your analysis as well as the quality of your visualizations and exposition. This includes, but is not limited to, the quality of your writing, the informativeness of your visualizations, and the depth of research questions. The target audience of your report is a peer who is uninformed about the details of the data, but is interested in learning more about your analysis. Again, there are no right answers for this project! Successful projects will involve more than a cursory analysis of one or two variables in the dataset and will tell a compelling story about the dataset.\n\n\n\nChoose a data set or multiple datasets with the following characteristics:\n\nAt least three continuous variables\nAt least two categorical variables\n\nIdentify three research questions of interest that you want to study using this dataset. Each of your research questions should involve at least two of the variables in your dataset.\nFor each of your three research questions, generate at least one data visualization or descriptive statistic. Discuss and interpret your findings.\nFor at least one of your research questions, perform a statistical analysis (ex. hypothesis test, confidence interval, linear regression). Discuss and interpret your findings.\nFinal submissions must include .Rmd and .html files.\nIf you are an undergraduate interested in participating in a competition and potentially presenting at the Electronic Undergraduate Statistics Conference, you may consider using this project to submit to the Undergraduate Class Project Competition."
  },
  {
    "objectID": "projects/final_project.html#part-one-project-proposal-10-points-due-1013",
    "href": "projects/final_project.html#part-one-project-proposal-10-points-due-1013",
    "title": "Final Project",
    "section": "Part One: Project Proposal (10 points), due 10/13",
    "text": "Part One: Project Proposal (10 points), due 10/13\nYou will submit a 1-2 page project proposal with the following information:\n\nA brief description of your dataset (where it is from, how it can be obtained, why you chose it).\nA data dictionary in the following format (if there are more than 10 variables, you can choose the 10 variables that interest you most):\n\n\n\nVariable name\nVariable type\nDescription\n\n\n\n\nex. dob\nDate\ndate of birth\n\n\nex. city\ncharacter\ncity of birth\n\n\n. . .\n. . .\n. . .\n\n\n\nAn overview of the main research questions you hope to explore through your project. Each of your research questions should involve at least two of the variables in your dataset.\nA list of three to five outside references you plan to consult for background reading on your research questions.\nAny questions you have for me."
  },
  {
    "objectID": "projects/final_project.html#part-two-final-report-70-points-due-126",
    "href": "projects/final_project.html#part-two-final-report-70-points-due-126",
    "title": "Final Project",
    "section": "Part Two: Final Report (70 points), due 12/6",
    "text": "Part Two: Final Report (70 points), due 12/6\n5-7 pages, including figures. You do not have to write this in the form of an essay, but you should present your findings in a clear and organized way. In particular, you should be sure to cover the following areas:\n\nIntroduction and background:\n\nIntroduce your dataset and research questions of interest. Each of your research questions should involve at least two of the variables in your dataset.\nDiscuss any previous research/findings or relevant context on your question of interest.\nProvide a univariate visualization of a categorical variable in your dataset.\nProvide a univariate visualization of a numerical variable in your dataset.\n\nExploratory data analysis:\n\nFor each of your three research questions, generate at least one data visualization or descriptive statistic.\nDiscuss and interpret your findings.\n\nInferential statistical analysis:\n\nFor at least one of your research questions, perform a basic statistical analysis (ex. confidence interval, hypothesis test, linear regression).\nDiscuss and interpret your findings.\n\nConclusions and future questions:\n\nSummarize your conclusions and discuss any questions you might interested in exploring in the future.\nAre there other types of datasets that would have been helpful to have?"
  },
  {
    "objectID": "projects/final_project.html#part-three-lightning-talks-15-points-slides-due-123",
    "href": "projects/final_project.html#part-three-lightning-talks-15-points-slides-due-123",
    "title": "Final Project",
    "section": "Part Three: Lightning Talks (15 points), slides due 12/3",
    "text": "Part Three: Lightning Talks (15 points), slides due 12/3\n3-5 minutes, maximum four slides. You should rehearse your lightning talk in advance and it should include:\n\nA quick introduction to your dataset and research questions of interest.\nAn overview of your favorite visualization/descriptive summary/result from your project."
  },
  {
    "objectID": "projects/final_project.html#part-four-reflection-and-self-evaluation-5-points-due-126",
    "href": "projects/final_project.html#part-four-reflection-and-self-evaluation-5-points-due-126",
    "title": "Final Project",
    "section": "Part Four: Reflection and Self-evaluation (5 points), due 12/6",
    "text": "Part Four: Reflection and Self-evaluation (5 points), due 12/6\nYou will complete a 1-2 page reflection and self-evaluation on your work this semester for MATH167R. Questions will be posted at least two weeks in advance of the due date.\n\nGrading Rubric\n\nProject Proposal: Graded based on completion of all instructions.\nFinal Report:\n\nExposition (10 points): graded on the clarity of your writing and the appropriateness of your dataset and research questions\nExploratory data analysis (25 points): graded on the correctness of your computations/visualizations, appropriate use of R functions, and the depth/clarity of your explanations\nInferential statistical analysis (25 points): graded on the appropriateness of your analysis, accuracy of your computations and interpretations, appropriate use of R functions, and the depth/clarity of your explanations\nCode style/formatting (10 points): to receive full credit, all code, text, and output in your final report should be correctly formatted. Code should be appropriately commented and styled (ex. appropriate variable names).\n\nLightning Talks: graded based on the quality and completeness of your presentation.\nReflection and Self-evaluation: Graded based on completion."
  },
  {
    "objectID": "projects/final_exam.html",
    "href": "projects/final_exam.html",
    "title": "Final Exam Study Guide",
    "section": "",
    "text": "How to use and interpret the following structures:\n\nfunctions\nConditional evaluation: if, else, else if, ifelse\nfor and while loops\n\nThe following concepts: * Classes and object-oriented programming * Environment and scope * Vectorization * Recursion * Functional programming: lapply, sapply, and mapply\nHow to interpret code and results used for:\n\ngenerating visualizations via ggplot2\nperforming statistical analyses: lm(), t.test()\ngenerating random variables\nrunning simulations"
  },
  {
    "objectID": "projects/final_exam.html#instructions",
    "href": "projects/final_exam.html#instructions",
    "title": "Final Exam Study Guide",
    "section": "",
    "text": "How to use and interpret the following structures:\n\nfunctions\nConditional evaluation: if, else, else if, ifelse\nfor and while loops\n\nThe following concepts: * Classes and object-oriented programming * Environment and scope * Vectorization * Recursion * Functional programming: lapply, sapply, and mapply\nHow to interpret code and results used for:\n\ngenerating visualizations via ggplot2\nperforming statistical analyses: lm(), t.test()\ngenerating random variables\nrunning simulations"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MATH167R: Statistical Programming with R",
    "section": "",
    "text": "Week\nDate\nTopic\nSlides\nCheck-in\nLab\n\n\n\n\n1\nM 8/21\nCourse Overview and Introduction to R\nSlides 01\nCheck-in 01\n\n\n\n\nW 8/23\nR fundamentals\nSlides 02\n\nLab 01\n\n\n2\nM 8/28\nR fundamentals\nSlides 03\nCheck-in 02\n\n\n\n\nW 8/30\nR fundamentals\nSlides 04\n\nLab 02\n\n\n3\nM 9/4\nLabor Day (No Class)\n\n\n\n\n\n\nW 9/6\nExploring data with R\nSlides 05\n\nLab 03\n\n\n4\nM 9/11\nExploring data with R\nSlides 06\nCheck-in 03\n\n\n\n\nW 9/13\nData visualization\nSlides 07\n\nLab 04\n\n\n5\nM 9/18\nData visualization\nSlides 08\nCheck-in 04\n\n\n\n\nW 9/20\nData visualization\nSlides 09\n\nLab 05\n\n\n6\nM 9/25\nData manipulation and management\nSlides 10\n\n\n\n\n\nW 9/27\nData manipulation and management\nSlides 11\n\n\n\n\n7\nM 10/2\nProgramming basics\nSlides 12\n\n\n\n\n\nW 10/4\nMidterm project\n\n\n\n\n\n8\nM 10/9\nProgramming basics\nSlides 13\nCheck-in 05\n\n\n\n\nW 10/11\nProgramming basics\nSlides 14\n\nLab 06\n\n\n9\nM 10/16\nProgramming basics\nSlides 15\nCheck-in 06\n\n\n\n\nW 10/18\nProgramming basics\nSlides 16\n\nLab 07\n\n\n10\nM 10/23\nProgramming basics\n\n\n\n\n\n\nW 10/25\nSimulations\n\n\n\n\n\n11\nM 10/30\nSimulations\n\n\n\n\n\n\nW 11/1\nSimulations\n\n\n\n\n\n12\nM 11/6\nSimulations\n\n\n\n\n\n\nW 11/8\nStatistical inference\n\n\n\n\n\n13\nM 11/13\nStatistical inference\n\n\n\n\n\n\nW 11/15\nStatistical inference\n\n\n\n\n\n14\nM 11/20\nStatistical inference\n\n\n\n\n\n\nW 11/22\nThanksgiving (No Class)\n\n\n\n\n\n15\nM 11/27\nReal world data analysis\n\n\n\n\n\n\nW 11/29\nReal world data analysis\n\n\n\n\n\n16\nM 12/4\nReal world data analysis\n\n\n\n\n\n\nW 12/6\nFinal review"
  },
  {
    "objectID": "slides/06_factors-groups.html#warm-up",
    "href": "slides/06_factors-groups.html#warm-up",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Warm-up",
    "text": "Warm-up\n\nWhat does the following code do? How would you write it without a pipe?\n\n\"hello\" |&gt; print()\n1:6 |&gt; sample(1)"
  },
  {
    "objectID": "slides/06_factors-groups.html#warm-up-1",
    "href": "slides/06_factors-groups.html#warm-up-1",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Warm-up",
    "text": "Warm-up\nAnswer:\n\n\n\"hello\" |&gt; print()\n1:6 |&gt; sample(1)\n\n\nprint(\"hello\")\nsample(1:6, 1)"
  },
  {
    "objectID": "slides/06_factors-groups.html#overview-of-today",
    "href": "slides/06_factors-groups.html#overview-of-today",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Overview of today",
    "text": "Overview of today\n\nClasses and attributes\nFactors for categorical data\nAdvanced descriptive statistics and summaries"
  },
  {
    "objectID": "slides/06_factors-groups.html#objects-revisited",
    "href": "slides/06_factors-groups.html#objects-revisited",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Objects revisited",
    "text": "Objects revisited\nRemember John Chambers’ quote: “Everything that exists in R is an object.” This is roughly correct; however, it’s important to remember that in R objects come in many shapes/flavors.\n\ndiamonds &lt;- ggplot2::diamonds\nsummary(diamonds$carat)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.2000  0.4000  0.7000  0.7979  1.0400  5.0100 \n\nsummary(diamonds$cut)\n\n     Fair      Good Very Good   Premium     Ideal \n     1610      4906     12082     13791     21551 \n\n\nWhy do these return two types of output?"
  },
  {
    "objectID": "slides/06_factors-groups.html#polymorphism",
    "href": "slides/06_factors-groups.html#polymorphism",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Polymorphism",
    "text": "Polymorphism\nLoosely speaking, carat and cut are stored as different types of data. In this code, R is using two versions of summary(): one meant for categorical data and one meant for numerical data.\nThis is confusing because we need to remember that summary() works differently depending on the input, but it can also be powerful because the user doesn’t have to remember many different functions (ex. summary_numeric() or summary_character()).\nThis is polymorphism in action: A common functional interface can be used for different types of input."
  },
  {
    "objectID": "slides/06_factors-groups.html#object-oriented-programming",
    "href": "slides/06_factors-groups.html#object-oriented-programming",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Object-oriented programming",
    "text": "Object-oriented programming\nIn object-oriented programming, developers define different classes of objects with various methods (like summary()). This means that if a developer wants to create a new class of object (ex. for a new data type), users should still be able to use common functions like print() or summary().\nR developers often use object-oriented programming, but the implementation takes many forms, so we won’t go into detail in this course. What is important to remember is that the class(es) of an object determine(s) what you can do with it."
  },
  {
    "objectID": "slides/06_factors-groups.html#classes",
    "href": "slides/06_factors-groups.html#classes",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Classes",
    "text": "Classes\n\nweather_forecasts &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-12-20/weather_forecasts.csv')\nclass(weather_forecasts$date)\n\n[1] \"Date\"\n\nsummary(weather_forecasts$date)\n\n        Min.      1st Qu.       Median         Mean      3rd Qu.         Max. \n\"2021-01-30\" \"2021-05-31\" \"2021-09-30\" \"2021-09-30\" \"2022-01-30\" \"2022-06-01\" \n\n\nHere, we see that the date variable has the class Date, which has its own version of summary()."
  },
  {
    "objectID": "slides/06_factors-groups.html#classes-vs.-data-types",
    "href": "slides/06_factors-groups.html#classes-vs.-data-types",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Classes vs. data types",
    "text": "Classes vs. data types\nWe previously only discussed four basic data types: logical, integer, double, and character.\n\nType (as accessed via typeof()) describes the underlying data type.\nClass (as accessed via class()) describes an attribute that determines what you can do with this object.\n\n\nclass(weather_forecasts$date)\n\n[1] \"Date\"\n\ntypeof(weather_forecasts$date)\n\n[1] \"double\""
  },
  {
    "objectID": "slides/06_factors-groups.html#attributes",
    "href": "slides/06_factors-groups.html#attributes",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Attributes",
    "text": "Attributes\nIn R, objects can be associated with attributes such as class, that provide information on the values contained within.\n\nattributes(head(weather_forecasts))\n\n$names\n [1] \"date\"                  \"city\"                  \"state\"                \n [4] \"high_or_low\"           \"forecast_hours_before\" \"observed_temp\"        \n [7] \"forecast_temp\"         \"observed_precip\"       \"forecast_outlook\"     \n[10] \"possible_error\"       \n\n$row.names\n[1] 1 2 3 4 5 6\n\n$class\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\""
  },
  {
    "objectID": "slides/06_factors-groups.html#factors-categorical-data",
    "href": "slides/06_factors-groups.html#factors-categorical-data",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Factors: categorical data",
    "text": "Factors: categorical data\nFactors are a class of object for categorical data that uses integer representation.\nThis can be efficient to store character vectors, because each string is only entered once. Because of this, creating data frames (but not tibbles!) in R often default to set strings as factors."
  },
  {
    "objectID": "slides/06_factors-groups.html#an-example-months-of-the-year",
    "href": "slides/06_factors-groups.html#an-example-months-of-the-year",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "An example: months of the year",
    "text": "An example: months of the year\nHere’s an example from R for Data Science:\nImagine we have a variable that represents month of the year:\n\nx1 &lt;- c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")\n\nSome issues:\n\nPotential for typos\n\n\nx2 &lt;- c(\"Dec\", \"Apr\", \"Jam\", \"Mar\")\n\n\nNot sorting in a reasonable way\n\n\nsort(x1)\n\n[1] \"Apr\" \"Dec\" \"Jan\" \"Mar\""
  },
  {
    "objectID": "slides/06_factors-groups.html#an-example-months-of-the-year-1",
    "href": "slides/06_factors-groups.html#an-example-months-of-the-year-1",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "An example: months of the year",
    "text": "An example: months of the year\nWe can represent this variable using a factor by defining its levels, or the valid values this variable can take:\n\nmonth_levels &lt;- c(\n  \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n)\n\nWe can create a factor using the factor() function:\n\ny1 &lt;- factor(x1, levels = month_levels)\ny1\n\n[1] Dec Apr Jan Mar\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\nsort(y1)\n\n[1] Jan Mar Apr Dec\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec"
  },
  {
    "objectID": "slides/06_factors-groups.html#an-example-months-of-the-year-2",
    "href": "slides/06_factors-groups.html#an-example-months-of-the-year-2",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "An example: months of the year",
    "text": "An example: months of the year\nNote that factors are stored as integers but displayed using their levels:\n\nclass(y1)\n\n[1] \"factor\"\n\ntypeof(y1)\n\n[1] \"integer\"\n\ny1\n\n[1] Dec Apr Jan Mar\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\nas.numeric(y1)\n\n[1] 12  4  1  3\n\nattributes(y1)\n\n$levels\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\n$class\n[1] \"factor\""
  },
  {
    "objectID": "slides/06_factors-groups.html#movies-data",
    "href": "slides/06_factors-groups.html#movies-data",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Movies data",
    "text": "Movies data\nAs an example of how factors work, let’s look at an example using Tidy Tuesday data on movie profits.\n\nmovies &lt;- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2018/2018-10-23/movie_profit.csv\")\nknitr::kable(movies[1:20,], digits = 3, row.names = F) |&gt;\n  kableExtra::kable_styling(\"striped\", full_width = T) |&gt; \n  kableExtra::scroll_box(height = \"300px\")\n\n\n\n\n\n...1\nrelease_date\nmovie\nproduction_budget\ndomestic_gross\nworldwide_gross\ndistributor\nmpaa_rating\ngenre\n\n\n\n\n1\n6/22/2007\nEvan Almighty\n1.75e+08\n100289690\n174131329\nUniversal\nPG\nComedy\n\n\n2\n7/28/1995\nWaterworld\n1.75e+08\n88246220\n264246220\nUniversal\nPG-13\nAction\n\n\n3\n5/12/2017\nKing Arthur: Legend of the Sword\n1.75e+08\n39175066\n139950708\nWarner Bros.\nPG-13\nAdventure\n\n\n4\n12/25/2013\n47 Ronin\n1.75e+08\n38362475\n151716815\nUniversal\nPG-13\nAction\n\n\n5\n6/22/2018\nJurassic World: Fallen Kingdom\n1.70e+08\n416769345\n1304866322\nUniversal\nPG-13\nAction\n\n\n6\n8/1/2014\nGuardians of the Galaxy\n1.70e+08\n333172112\n771051335\nWalt Disney\nPG-13\nAction\n\n\n7\n5/7/2010\nIron Man 2\n1.70e+08\n312433331\n621156389\nParamount Pictures\nPG-13\nAction\n\n\n8\n4/4/2014\nCaptain America: The Winter Soldier\n1.70e+08\n259746958\n714401889\nWalt Disney\nPG-13\nAction\n\n\n9\n7/11/2014\nDawn of the Planet of the Apes\n1.70e+08\n208545589\n710644566\n20th Century Fox\nPG-13\nAdventure\n\n\n10\n11/10/2004\nThe Polar Express\n1.70e+08\n186493587\n310634169\nWarner Bros.\nG\nAdventure\n\n\n11\n6/1/2012\nSnow White and the Huntsman\n1.70e+08\n155136755\n401021746\nUniversal\nPG-13\nAdventure\n\n\n12\n7/1/2003\nTerminator 3: Rise of the Machines\n1.70e+08\n150358296\n433058296\nWarner Bros.\nR\nAction\n\n\n13\n5/7/2004\nVan Helsing\n1.70e+08\n120150546\n300150546\nUniversal\nPG-13\nAction\n\n\n14\n5/22/2015\nTomorrowland\n1.70e+08\n93436322\n207283457\nWalt Disney\nPG\nAdventure\n\n\n15\n5/27/2016\nAlice Through the Looking Glass\n1.70e+08\n77042381\n276934087\nWalt Disney\nPG\nAdventure\n\n\n16\n5/21/2010\nShrek Forever After\n1.65e+08\n238736787\n756244673\nParamount Pictures\nPG\nAdventure\n\n\n17\n11/4/2016\nDoctor Strange\n1.65e+08\n232641920\n676486457\nWalt Disney\nPG-13\nAction\n\n\n18\n11/7/2014\nBig Hero 6\n1.65e+08\n222527828\n652127828\nWalt Disney\nPG\nAdventure\n\n\n19\n3/26/2010\nHow to Train Your Dragon\n1.65e+08\n217581232\n494870992\nParamount Pictures\nPG\nAdventure\n\n\n20\n11/2/2012\nWreck-It Ralph\n1.65e+08\n189412677\n496511521\nWalt Disney\nPG\nAdventure"
  },
  {
    "objectID": "slides/06_factors-groups.html#movies-genre",
    "href": "slides/06_factors-groups.html#movies-genre",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Movies genre",
    "text": "Movies genre\n\ngenre_char &lt;- movies$genre\ngenre_fct &lt;- as.factor(movies$genre)\nhead(genre_char)\n\n[1] \"Comedy\"    \"Action\"    \"Adventure\" \"Action\"    \"Action\"    \"Action\"   \n\nhead(genre_fct)\n\n[1] Comedy    Action    Adventure Action    Action    Action   \nLevels: Action Adventure Comedy Drama Horror\n\n\n\nclass(genre_fct)\n\n[1] \"factor\"\n\ntypeof(genre_fct)\n\n[1] \"integer\""
  },
  {
    "objectID": "slides/06_factors-groups.html#size-of-character-and-factors",
    "href": "slides/06_factors-groups.html#size-of-character-and-factors",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Size of character and factors",
    "text": "Size of character and factors\nGenerally, the factor representation saves space in memory:\n\nobject.size(genre_char)\n\n27544 bytes\n\nobject.size(genre_fct) \n\n14376 bytes"
  },
  {
    "objectID": "slides/06_factors-groups.html#fct_recode-recode-levels",
    "href": "slides/06_factors-groups.html#fct_recode-recode-levels",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "fct_recode(): recode levels",
    "text": "fct_recode(): recode levels\n\nfct_recode(color_fct_1, ruby = \"red\")\n\n[1] ruby   yellow blue  \nLevels: ruby blue yellow\n\nfct_recode(color_fct_1, ruby = \"red\", sapphire = \"blue\", topaz = \"yellow\", w = \"d\")\n\n[1] ruby     topaz    sapphire\nLevels: ruby sapphire topaz"
  },
  {
    "objectID": "slides/06_factors-groups.html#fct_collapse-collapse-levels",
    "href": "slides/06_factors-groups.html#fct_collapse-collapse-levels",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "fct_collapse(): collapse levels",
    "text": "fct_collapse(): collapse levels\n\ncolor_fct_1\n\n[1] red    yellow blue  \nLevels: red blue yellow\n\nfct_collapse(color_fct_1, purple = c(\"red\", \"blue\"))\n\n[1] purple yellow purple\nLevels: purple yellow"
  },
  {
    "objectID": "slides/06_factors-groups.html#fct_other-replace-w-other",
    "href": "slides/06_factors-groups.html#fct_other-replace-w-other",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "fct_other(): replace w/ “Other”",
    "text": "fct_other(): replace w/ “Other”\n\ncolor_fct_1\n\n[1] red    yellow blue  \nLevels: red blue yellow\n\nfct_other(color_fct_1, keep = \"red\")\n\n[1] red   Other Other\nLevels: red Other"
  },
  {
    "objectID": "slides/06_factors-groups.html#forcats-cheatsheet",
    "href": "slides/06_factors-groups.html#forcats-cheatsheet",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "forcats cheatsheet",
    "text": "forcats cheatsheet\n\nCreate a factor: factor(..., levels = ...)\nCount levels: fct_count()\nUnique levels: fct_unique()\nCombine factor vectors: fct_c()\nRelevel: fct_relevel()\nDrop levels: fct_drop()\nAdd levels: fct_expand()\nRecode levels: fct_recode()\nCollapse levels: fct_collapse()\nOther"
  },
  {
    "objectID": "slides/06_factors-groups.html#takeaways",
    "href": "slides/06_factors-groups.html#takeaways",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Takeaways",
    "text": "Takeaways\n\nDon’t memorize these functions–read the documentation!\nBe efficient! Often someone has written a function that does exactly what you want to do."
  },
  {
    "objectID": "slides/06_factors-groups.html#mutating-variables",
    "href": "slides/06_factors-groups.html#mutating-variables",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Mutating variables",
    "text": "Mutating variables\nThe mutate() function from the tidyverse gives a convenient way to add/change columns in a data frame.\n\nlibrary(tidyverse)\nmovies &lt;- movies |&gt;\n  mutate(genre = as.factor(genre)) |&gt;\n  mutate(return = worldwide_gross / production_budget)"
  },
  {
    "objectID": "slides/06_factors-groups.html#movies-data-1",
    "href": "slides/06_factors-groups.html#movies-data-1",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Movies data",
    "text": "Movies data\n\nmovies$genre = as.factor(movies$genre)\nmovies &lt;- movies |&gt;\n  mutate(genre = fct_collapse(genre,\n                              AA = c(\"Action\", \"Adventure\"))) |&gt;\n  mutate(genre = fct_recode(genre, Scary = \"Horror\"))"
  },
  {
    "objectID": "slides/06_factors-groups.html#summarizing-variables",
    "href": "slides/06_factors-groups.html#summarizing-variables",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Summarizing variables",
    "text": "Summarizing variables\nRecall that the summarize() function can be used to calculate statistics on our entire data frame:\n\nmovies |&gt;\n  summarize(max_gross = max(worldwide_gross, na.rm = T))\n\n# A tibble: 1 × 1\n   max_gross\n       &lt;dbl&gt;\n1 1304866322"
  },
  {
    "objectID": "slides/06_factors-groups.html#summaries-by-group",
    "href": "slides/06_factors-groups.html#summaries-by-group",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Summaries by group",
    "text": "Summaries by group\nWhat if we want to learn the max gross for each genre? When we have a character/factor column, we can use the group_by function in combination with summarize() to calculate group-specific statistics:\n\nmovies |&gt;\n  group_by(genre) |&gt;\n  summarize(highest_gross = max(worldwide_gross)) |&gt;\n  ungroup()"
  },
  {
    "objectID": "slides/06_factors-groups.html#challenge",
    "href": "slides/06_factors-groups.html#challenge",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Challenge",
    "text": "Challenge\nWhat do you think this code returns?\n\nmovies |&gt;\n  group_by(genre) |&gt;\n  summarize(highest_gross = movie[which.max(worldwide_gross)]) |&gt;\n  ungroup()\n\n\n\n\n# A tibble: 4 × 2\n  genre  highest_gross                 \n  &lt;fct&gt;  &lt;chr&gt;                         \n1 AA     Jurassic World: Fallen Kingdom\n2 Comedy The Hangover Part II          \n3 Drama  ET: The Extra-Terrestrial     \n4 Scary  It"
  },
  {
    "objectID": "slides/06_factors-groups.html#challenge-1",
    "href": "slides/06_factors-groups.html#challenge-1",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Challenge",
    "text": "Challenge\nWhat do you think this code returns?\n\nmovies |&gt;\n  group_by(genre, mpaa_rating) |&gt;\n  summarize(highest_gross = movie[which.max(worldwide_gross)]) |&gt;\n  ungroup()\n\n\n\n\n# A tibble: 19 × 3\n   genre  mpaa_rating highest_gross                 \n   &lt;fct&gt;  &lt;chr&gt;       &lt;chr&gt;                         \n 1 AA     G           The Lion King                 \n 2 AA     PG          Minions                       \n 3 AA     PG-13       Jurassic World: Fallen Kingdom\n 4 AA     R           Deadpool                      \n 5 AA     &lt;NA&gt;        Conan the Barbarian           \n 6 Comedy G           Gnomeo and Juliet             \n 7 Comedy PG          Home Alone                    \n 8 Comedy PG-13       Meet the Fockers              \n 9 Comedy R           The Hangover Part II          \n10 Comedy &lt;NA&gt;        It's a Mad Mad Mad Mad World  \n11 Drama  G           Gone with the Wind            \n12 Drama  PG          ET: The Extra-Terrestrial     \n13 Drama  PG-13       The Twilight Saga: Eclipse    \n14 Drama  R           The Passion of the Christ     \n15 Drama  &lt;NA&gt;        The Postman Always Rings Twice\n16 Scary  PG          Jaws                          \n17 Scary  PG-13       I am Legend                   \n18 Scary  R           It                            \n19 Scary  &lt;NA&gt;        Friday the 13th"
  },
  {
    "objectID": "slides/06_factors-groups.html#movies-data-2",
    "href": "slides/06_factors-groups.html#movies-data-2",
    "title": "MATH167R: Factors and Categorical Data",
    "section": "Movies data",
    "text": "Movies data\n\ngenre_medians &lt;- movies |&gt;\n  group_by(genre) |&gt;\n  summarize(median_budget = median(production_budget),\n            median_domestic = median(domestic_gross),\n            median_ww = median(worldwide_gross),\n            median_return = median(return)) |&gt;\n  ungroup()"
  },
  {
    "objectID": "slides/02_functions-expressions.html#review",
    "href": "slides/02_functions-expressions.html#review",
    "title": "MATH167R: Functions and Expressions",
    "section": "Review",
    "text": "Review"
  },
  {
    "objectID": "slides/02_functions-expressions.html#warm-up",
    "href": "slides/02_functions-expressions.html#warm-up",
    "title": "MATH167R: Functions and Expressions",
    "section": "Warm-up",
    "text": "Warm-up"
  },
  {
    "objectID": "slides/02_functions-expressions.html#todays-goals",
    "href": "slides/02_functions-expressions.html#todays-goals",
    "title": "MATH167R: Functions and Expressions",
    "section": "Today’s goals",
    "text": "Today’s goals"
  },
  {
    "objectID": "slides/02_functions-expressions.html#expressions",
    "href": "slides/02_functions-expressions.html#expressions",
    "title": "MATH167R: Functions and Expressions",
    "section": "Expressions",
    "text": "Expressions"
  },
  {
    "objectID": "slides/02_functions-expressions.html#functions",
    "href": "slides/02_functions-expressions.html#functions",
    "title": "MATH167R: Functions and Expressions",
    "section": "Functions",
    "text": "Functions"
  },
  {
    "objectID": "slides/02_functions-expressions.html#in-practice",
    "href": "slides/02_functions-expressions.html#in-practice",
    "title": "MATH167R: Functions and Expressions",
    "section": "In practice",
    "text": "In practice"
  },
  {
    "objectID": "slides/09_merging-data.html#warm-up",
    "href": "slides/09_merging-data.html#warm-up",
    "title": "MATH167R: Merging data",
    "section": "Warm-up",
    "text": "Warm-up\nConsider the following data:\n\nlibrary(tidyverse)\nChickWeight\n\n    weight Time Chick Diet\n1       42    0     1    1\n2       51    2     1    1\n3       59    4     1    1\n4       64    6     1    1\n5       76    8     1    1\n6       93   10     1    1\n7      106   12     1    1\n8      125   14     1    1\n9      149   16     1    1\n10     171   18     1    1\n11     199   20     1    1\n12     205   21     1    1\n13      40    0     2    1\n14      49    2     2    1\n15      58    4     2    1\n16      72    6     2    1\n17      84    8     2    1\n18     103   10     2    1\n19     122   12     2    1\n20     138   14     2    1\n21     162   16     2    1\n22     187   18     2    1\n23     209   20     2    1\n24     215   21     2    1\n25      43    0     3    1\n26      39    2     3    1\n27      55    4     3    1\n28      67    6     3    1\n29      84    8     3    1\n30      99   10     3    1\n31     115   12     3    1\n32     138   14     3    1\n33     163   16     3    1\n34     187   18     3    1\n35     198   20     3    1\n36     202   21     3    1\n37      42    0     4    1\n38      49    2     4    1\n39      56    4     4    1\n40      67    6     4    1\n41      74    8     4    1\n42      87   10     4    1\n43     102   12     4    1\n44     108   14     4    1\n45     136   16     4    1\n46     154   18     4    1\n47     160   20     4    1\n48     157   21     4    1\n49      41    0     5    1\n50      42    2     5    1\n51      48    4     5    1\n52      60    6     5    1\n53      79    8     5    1\n54     106   10     5    1\n55     141   12     5    1\n56     164   14     5    1\n57     197   16     5    1\n58     199   18     5    1\n59     220   20     5    1\n60     223   21     5    1\n61      41    0     6    1\n62      49    2     6    1\n63      59    4     6    1\n64      74    6     6    1\n65      97    8     6    1\n66     124   10     6    1\n67     141   12     6    1\n68     148   14     6    1\n69     155   16     6    1\n70     160   18     6    1\n71     160   20     6    1\n72     157   21     6    1\n73      41    0     7    1\n74      49    2     7    1\n75      57    4     7    1\n76      71    6     7    1\n77      89    8     7    1\n78     112   10     7    1\n79     146   12     7    1\n80     174   14     7    1\n81     218   16     7    1\n82     250   18     7    1\n83     288   20     7    1\n84     305   21     7    1\n85      42    0     8    1\n86      50    2     8    1\n87      61    4     8    1\n88      71    6     8    1\n89      84    8     8    1\n90      93   10     8    1\n91     110   12     8    1\n92     116   14     8    1\n93     126   16     8    1\n94     134   18     8    1\n95     125   20     8    1\n96      42    0     9    1\n97      51    2     9    1\n98      59    4     9    1\n99      68    6     9    1\n100     85    8     9    1\n101     96   10     9    1\n102     90   12     9    1\n103     92   14     9    1\n104     93   16     9    1\n105    100   18     9    1\n106    100   20     9    1\n107     98   21     9    1\n108     41    0    10    1\n109     44    2    10    1\n110     52    4    10    1\n111     63    6    10    1\n112     74    8    10    1\n113     81   10    10    1\n114     89   12    10    1\n115     96   14    10    1\n116    101   16    10    1\n117    112   18    10    1\n118    120   20    10    1\n119    124   21    10    1\n120     43    0    11    1\n121     51    2    11    1\n122     63    4    11    1\n123     84    6    11    1\n124    112    8    11    1\n125    139   10    11    1\n126    168   12    11    1\n127    177   14    11    1\n128    182   16    11    1\n129    184   18    11    1\n130    181   20    11    1\n131    175   21    11    1\n132     41    0    12    1\n133     49    2    12    1\n134     56    4    12    1\n135     62    6    12    1\n136     72    8    12    1\n137     88   10    12    1\n138    119   12    12    1\n139    135   14    12    1\n140    162   16    12    1\n141    185   18    12    1\n142    195   20    12    1\n143    205   21    12    1\n144     41    0    13    1\n145     48    2    13    1\n146     53    4    13    1\n147     60    6    13    1\n148     65    8    13    1\n149     67   10    13    1\n150     71   12    13    1\n151     70   14    13    1\n152     71   16    13    1\n153     81   18    13    1\n154     91   20    13    1\n155     96   21    13    1\n156     41    0    14    1\n157     49    2    14    1\n158     62    4    14    1\n159     79    6    14    1\n160    101    8    14    1\n161    128   10    14    1\n162    164   12    14    1\n163    192   14    14    1\n164    227   16    14    1\n165    248   18    14    1\n166    259   20    14    1\n167    266   21    14    1\n168     41    0    15    1\n169     49    2    15    1\n170     56    4    15    1\n171     64    6    15    1\n172     68    8    15    1\n173     68   10    15    1\n174     67   12    15    1\n175     68   14    15    1\n176     41    0    16    1\n177     45    2    16    1\n178     49    4    16    1\n179     51    6    16    1\n180     57    8    16    1\n181     51   10    16    1\n182     54   12    16    1\n183     42    0    17    1\n184     51    2    17    1\n185     61    4    17    1\n186     72    6    17    1\n187     83    8    17    1\n188     89   10    17    1\n189     98   12    17    1\n190    103   14    17    1\n191    113   16    17    1\n192    123   18    17    1\n193    133   20    17    1\n194    142   21    17    1\n195     39    0    18    1\n196     35    2    18    1\n197     43    0    19    1\n198     48    2    19    1\n199     55    4    19    1\n200     62    6    19    1\n201     65    8    19    1\n202     71   10    19    1\n203     82   12    19    1\n204     88   14    19    1\n205    106   16    19    1\n206    120   18    19    1\n207    144   20    19    1\n208    157   21    19    1\n209     41    0    20    1\n210     47    2    20    1\n211     54    4    20    1\n212     58    6    20    1\n213     65    8    20    1\n214     73   10    20    1\n215     77   12    20    1\n216     89   14    20    1\n217     98   16    20    1\n218    107   18    20    1\n219    115   20    20    1\n220    117   21    20    1\n221     40    0    21    2\n222     50    2    21    2\n223     62    4    21    2\n224     86    6    21    2\n225    125    8    21    2\n226    163   10    21    2\n227    217   12    21    2\n228    240   14    21    2\n229    275   16    21    2\n230    307   18    21    2\n231    318   20    21    2\n232    331   21    21    2\n233     41    0    22    2\n234     55    2    22    2\n235     64    4    22    2\n236     77    6    22    2\n237     90    8    22    2\n238     95   10    22    2\n239    108   12    22    2\n240    111   14    22    2\n241    131   16    22    2\n242    148   18    22    2\n243    164   20    22    2\n244    167   21    22    2\n245     43    0    23    2\n246     52    2    23    2\n247     61    4    23    2\n248     73    6    23    2\n249     90    8    23    2\n250    103   10    23    2\n251    127   12    23    2\n252    135   14    23    2\n253    145   16    23    2\n254    163   18    23    2\n255    170   20    23    2\n256    175   21    23    2\n257     42    0    24    2\n258     52    2    24    2\n259     58    4    24    2\n260     74    6    24    2\n261     66    8    24    2\n262     68   10    24    2\n263     70   12    24    2\n264     71   14    24    2\n265     72   16    24    2\n266     72   18    24    2\n267     76   20    24    2\n268     74   21    24    2\n269     40    0    25    2\n270     49    2    25    2\n271     62    4    25    2\n272     78    6    25    2\n273    102    8    25    2\n274    124   10    25    2\n275    146   12    25    2\n276    164   14    25    2\n277    197   16    25    2\n278    231   18    25    2\n279    259   20    25    2\n280    265   21    25    2\n281     42    0    26    2\n282     48    2    26    2\n283     57    4    26    2\n284     74    6    26    2\n285     93    8    26    2\n286    114   10    26    2\n287    136   12    26    2\n288    147   14    26    2\n289    169   16    26    2\n290    205   18    26    2\n291    236   20    26    2\n292    251   21    26    2\n293     39    0    27    2\n294     46    2    27    2\n295     58    4    27    2\n296     73    6    27    2\n297     87    8    27    2\n298    100   10    27    2\n299    115   12    27    2\n300    123   14    27    2\n301    144   16    27    2\n302    163   18    27    2\n303    185   20    27    2\n304    192   21    27    2\n305     39    0    28    2\n306     46    2    28    2\n307     58    4    28    2\n308     73    6    28    2\n309     92    8    28    2\n310    114   10    28    2\n311    145   12    28    2\n312    156   14    28    2\n313    184   16    28    2\n314    207   18    28    2\n315    212   20    28    2\n316    233   21    28    2\n317     39    0    29    2\n318     48    2    29    2\n319     59    4    29    2\n320     74    6    29    2\n321     87    8    29    2\n322    106   10    29    2\n323    134   12    29    2\n324    150   14    29    2\n325    187   16    29    2\n326    230   18    29    2\n327    279   20    29    2\n328    309   21    29    2\n329     42    0    30    2\n330     48    2    30    2\n331     59    4    30    2\n332     72    6    30    2\n333     85    8    30    2\n334     98   10    30    2\n335    115   12    30    2\n336    122   14    30    2\n337    143   16    30    2\n338    151   18    30    2\n339    157   20    30    2\n340    150   21    30    2\n341     42    0    31    3\n342     53    2    31    3\n343     62    4    31    3\n344     73    6    31    3\n345     85    8    31    3\n346    102   10    31    3\n347    123   12    31    3\n348    138   14    31    3\n349    170   16    31    3\n350    204   18    31    3\n351    235   20    31    3\n352    256   21    31    3\n353     41    0    32    3\n354     49    2    32    3\n355     65    4    32    3\n356     82    6    32    3\n357    107    8    32    3\n358    129   10    32    3\n359    159   12    32    3\n360    179   14    32    3\n361    221   16    32    3\n362    263   18    32    3\n363    291   20    32    3\n364    305   21    32    3\n365     39    0    33    3\n366     50    2    33    3\n367     63    4    33    3\n368     77    6    33    3\n369     96    8    33    3\n370    111   10    33    3\n371    137   12    33    3\n372    144   14    33    3\n373    151   16    33    3\n374    146   18    33    3\n375    156   20    33    3\n376    147   21    33    3\n377     41    0    34    3\n378     49    2    34    3\n379     63    4    34    3\n380     85    6    34    3\n381    107    8    34    3\n382    134   10    34    3\n383    164   12    34    3\n384    186   14    34    3\n385    235   16    34    3\n386    294   18    34    3\n387    327   20    34    3\n388    341   21    34    3\n389     41    0    35    3\n390     53    2    35    3\n391     64    4    35    3\n392     87    6    35    3\n393    123    8    35    3\n394    158   10    35    3\n395    201   12    35    3\n396    238   14    35    3\n397    287   16    35    3\n398    332   18    35    3\n399    361   20    35    3\n400    373   21    35    3\n401     39    0    36    3\n402     48    2    36    3\n403     61    4    36    3\n404     76    6    36    3\n405     98    8    36    3\n406    116   10    36    3\n407    145   12    36    3\n408    166   14    36    3\n409    198   16    36    3\n410    227   18    36    3\n411    225   20    36    3\n412    220   21    36    3\n413     41    0    37    3\n414     48    2    37    3\n415     56    4    37    3\n416     68    6    37    3\n417     80    8    37    3\n418     83   10    37    3\n419    103   12    37    3\n420    112   14    37    3\n421    135   16    37    3\n422    157   18    37    3\n423    169   20    37    3\n424    178   21    37    3\n425     41    0    38    3\n426     49    2    38    3\n427     61    4    38    3\n428     74    6    38    3\n429     98    8    38    3\n430    109   10    38    3\n431    128   12    38    3\n432    154   14    38    3\n433    192   16    38    3\n434    232   18    38    3\n435    280   20    38    3\n436    290   21    38    3\n437     42    0    39    3\n438     50    2    39    3\n439     61    4    39    3\n440     78    6    39    3\n441     89    8    39    3\n442    109   10    39    3\n443    130   12    39    3\n444    146   14    39    3\n445    170   16    39    3\n446    214   18    39    3\n447    250   20    39    3\n448    272   21    39    3\n449     41    0    40    3\n450     55    2    40    3\n451     66    4    40    3\n452     79    6    40    3\n453    101    8    40    3\n454    120   10    40    3\n455    154   12    40    3\n456    182   14    40    3\n457    215   16    40    3\n458    262   18    40    3\n459    295   20    40    3\n460    321   21    40    3\n461     42    0    41    4\n462     51    2    41    4\n463     66    4    41    4\n464     85    6    41    4\n465    103    8    41    4\n466    124   10    41    4\n467    155   12    41    4\n468    153   14    41    4\n469    175   16    41    4\n470    184   18    41    4\n471    199   20    41    4\n472    204   21    41    4\n473     42    0    42    4\n474     49    2    42    4\n475     63    4    42    4\n476     84    6    42    4\n477    103    8    42    4\n478    126   10    42    4\n479    160   12    42    4\n480    174   14    42    4\n481    204   16    42    4\n482    234   18    42    4\n483    269   20    42    4\n484    281   21    42    4\n485     42    0    43    4\n486     55    2    43    4\n487     69    4    43    4\n488     96    6    43    4\n489    131    8    43    4\n490    157   10    43    4\n491    184   12    43    4\n492    188   14    43    4\n493    197   16    43    4\n494    198   18    43    4\n495    199   20    43    4\n496    200   21    43    4\n497     42    0    44    4\n498     51    2    44    4\n499     65    4    44    4\n500     86    6    44    4\n501    103    8    44    4\n502    118   10    44    4\n503    127   12    44    4\n504    138   14    44    4\n505    145   16    44    4\n506    146   18    44    4\n507     41    0    45    4\n508     50    2    45    4\n509     61    4    45    4\n510     78    6    45    4\n511     98    8    45    4\n512    117   10    45    4\n513    135   12    45    4\n514    141   14    45    4\n515    147   16    45    4\n516    174   18    45    4\n517    197   20    45    4\n518    196   21    45    4\n519     40    0    46    4\n520     52    2    46    4\n521     62    4    46    4\n522     82    6    46    4\n523    101    8    46    4\n524    120   10    46    4\n525    144   12    46    4\n526    156   14    46    4\n527    173   16    46    4\n528    210   18    46    4\n529    231   20    46    4\n530    238   21    46    4\n531     41    0    47    4\n532     53    2    47    4\n533     66    4    47    4\n534     79    6    47    4\n535    100    8    47    4\n536    123   10    47    4\n537    148   12    47    4\n538    157   14    47    4\n539    168   16    47    4\n540    185   18    47    4\n541    210   20    47    4\n542    205   21    47    4\n543     39    0    48    4\n544     50    2    48    4\n545     62    4    48    4\n546     80    6    48    4\n547    104    8    48    4\n548    125   10    48    4\n549    154   12    48    4\n550    170   14    48    4\n551    222   16    48    4\n552    261   18    48    4\n553    303   20    48    4\n554    322   21    48    4\n555     40    0    49    4\n556     53    2    49    4\n557     64    4    49    4\n558     85    6    49    4\n559    108    8    49    4\n560    128   10    49    4\n561    152   12    49    4\n562    166   14    49    4\n563    184   16    49    4\n564    203   18    49    4\n565    233   20    49    4\n566    237   21    49    4\n567     41    0    50    4\n568     54    2    50    4\n569     67    4    50    4\n570     84    6    50    4\n571    105    8    50    4\n572    122   10    50    4\n573    155   12    50    4\n574    175   14    50    4\n575    205   16    50    4\n576    234   18    50    4\n577    264   20    50    4\n578    264   21    50    4\n\n\n\nWhat does the following code do?\n\npivot_wider(ChickWeight,\n             names_from = \"Time\", \n             values_from = \"weight\")"
  },
  {
    "objectID": "slides/09_merging-data.html#warm-up-1",
    "href": "slides/09_merging-data.html#warm-up-1",
    "title": "MATH167R: Merging data",
    "section": "Warm-up",
    "text": "Warm-up\n\nlibrary(tidyverse)\npivot_wider(ChickWeight,\n            names_from = \"Time\", \n            values_from = \"weight\")\n\n# A tibble: 50 × 14\n   Chick Diet    `0`   `2`   `4`   `6`   `8`  `10`  `12`  `14`  `16`  `18`  `20`\n   &lt;ord&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 1     1        42    51    59    64    76    93   106   125   149   171   199\n 2 2     1        40    49    58    72    84   103   122   138   162   187   209\n 3 3     1        43    39    55    67    84    99   115   138   163   187   198\n 4 4     1        42    49    56    67    74    87   102   108   136   154   160\n 5 5     1        41    42    48    60    79   106   141   164   197   199   220\n 6 6     1        41    49    59    74    97   124   141   148   155   160   160\n 7 7     1        41    49    57    71    89   112   146   174   218   250   288\n 8 8     1        42    50    61    71    84    93   110   116   126   134   125\n 9 9     1        42    51    59    68    85    96    90    92    93   100   100\n10 10    1        41    44    52    63    74    81    89    96   101   112   120\n# ℹ 40 more rows\n# ℹ 1 more variable: `21` &lt;dbl&gt;"
  },
  {
    "objectID": "slides/09_merging-data.html#overview-of-today",
    "href": "slides/09_merging-data.html#overview-of-today",
    "title": "MATH167R: Merging data",
    "section": "Overview of today",
    "text": "Overview of today\n\nMerging datasets\nExploratory analysis"
  },
  {
    "objectID": "slides/09_merging-data.html#joining-data",
    "href": "slides/09_merging-data.html#joining-data",
    "title": "MATH167R: Merging data",
    "section": "Joining Data",
    "text": "Joining Data\nWe can use SQL-like join statements in R!\n\ninner_join(x, y, by = \"key\"): match observations only when exact keys are equal\nleft_join(x, y, by = \"key\"): keep all observations in x, match observations in y by keys, NA otherwise\nright_join(x, y, by = \"key\"): keep all observations in y, match observations in x by keys, NA otherwise\nouter_join(x, y, by = \"key\"): keep all observations in x and y, match keys where possible, NA otherwise\n\nUsually, left_join() will suffice."
  },
  {
    "objectID": "slides/09_merging-data.html#example-band-members",
    "href": "slides/09_merging-data.html#example-band-members",
    "title": "MATH167R: Merging data",
    "section": "Example: Band members",
    "text": "Example: Band members\n\nlibrary(tidyverse)\nband_members\n\n# A tibble: 3 × 2\n  name  band   \n  &lt;chr&gt; &lt;chr&gt;  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n\nband_instruments\n\n# A tibble: 3 × 2\n  name  plays \n  &lt;chr&gt; &lt;chr&gt; \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar"
  },
  {
    "objectID": "slides/09_merging-data.html#example-band-members-1",
    "href": "slides/09_merging-data.html#example-band-members-1",
    "title": "MATH167R: Merging data",
    "section": "Example: Band members",
    "text": "Example: Band members\n\nband_members |&gt; inner_join(band_instruments)\n\n# A tibble: 2 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n\nband_members |&gt; left_join(band_instruments)\n\n# A tibble: 3 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 Mick  Stones  &lt;NA&gt;  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n\nband_members |&gt; right_join(band_instruments)\n\n# A tibble: 3 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n3 Keith &lt;NA&gt;    guitar\n\nband_members |&gt; full_join(band_instruments)\n\n# A tibble: 4 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 Mick  Stones  &lt;NA&gt;  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith &lt;NA&gt;    guitar"
  },
  {
    "objectID": "slides/09_merging-data.html#example-band-members-2",
    "href": "slides/09_merging-data.html#example-band-members-2",
    "title": "MATH167R: Merging data",
    "section": "Example: Band members",
    "text": "Example: Band members\n\n# To suppress the message about joining variables, supply `by`\nband_members |&gt; inner_join(band_instruments, by = join_by(name))\n\n# A tibble: 2 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 John  Beatles guitar\n2 Paul  Beatles bass"
  },
  {
    "objectID": "slides/09_merging-data.html#inner-join-vs.-outer-join",
    "href": "slides/09_merging-data.html#inner-join-vs.-outer-join",
    "title": "MATH167R: Merging data",
    "section": "Inner join vs. outer join",
    "text": "Inner join vs. outer join\n\n\nImages courtesy of Hadley Wickham. (Link)"
  },
  {
    "objectID": "slides/09_merging-data.html#base-r",
    "href": "slides/09_merging-data.html#base-r",
    "title": "MATH167R: Merging data",
    "section": "Base R",
    "text": "Base R\n\n# inner join\nmerge(band_members, band_instruments, by.x = \"name\", by.y = \"name\")\n\n  name    band  plays\n1 John Beatles guitar\n2 Paul Beatles   bass\n\n# outer join\nmerge(band_members, band_instruments, by.x = \"name\", by.y = \"name\", all = T)\n\n   name    band  plays\n1  John Beatles guitar\n2 Keith    &lt;NA&gt; guitar\n3  Mick  Stones   &lt;NA&gt;\n4  Paul Beatles   bass\n\n# left join\nmerge(band_members, band_instruments, by.x = \"name\", by.y = \"name\", all.x = T)\n\n  name    band  plays\n1 John Beatles guitar\n2 Mick  Stones   &lt;NA&gt;\n3 Paul Beatles   bass\n\n# right join\nmerge(band_members, band_instruments, by.x = \"name\", by.y = \"name\", all.y = T)\n\n   name    band  plays\n1  John Beatles guitar\n2 Keith    &lt;NA&gt; guitar\n3  Paul Beatles   bass"
  },
  {
    "objectID": "slides/09_merging-data.html#example-california-data",
    "href": "slides/09_merging-data.html#example-california-data",
    "title": "MATH167R: Merging data",
    "section": "Example: California data",
    "text": "Example: California data\n\nlibrary(tidycensus)\n\n# the following code loads my local Census API Key, which is used to access \n# census data\nSys.getenv(\"CENSUS_API_KEY\")\n\n# 2021 median income by county\nincome_2021 &lt;- get_acs(geography = \"county\", \n                       variables = c(medincome = \"B19013_001\"), \n                       state = \"CA\", \n                       year = 2021)\n\n# 2010 median income by county\nincome_2010 &lt;- get_acs(geography = \"county\", \n                       variables = c(medincome = \"B19013_001\"), \n                       state = \"CA\", \n                       year = 2010)"
  },
  {
    "objectID": "slides/09_merging-data.html#example-california-data-1",
    "href": "slides/09_merging-data.html#example-california-data-1",
    "title": "MATH167R: Merging data",
    "section": "Example: California data",
    "text": "Example: California data\n\nincome_2021 &lt;- income_2021 |&gt;\n  pivot_wider(\n    names_from = variable,\n    values_from = c(estimate, moe)\n  ) |&gt;\n  select(-moe_medincome) |&gt;\n  rename(medincome_2021 = estimate_medincome)\nhead(income_2021)\n\n# A tibble: 6 × 3\n  GEOID NAME                         medincome_2021\n  &lt;chr&gt; &lt;chr&gt;                                 &lt;dbl&gt;\n1 06001 Alameda County, California           112017\n2 06003 Alpine County, California             96000\n3 06005 Amador County, California             69955\n4 06007 Butte County, California              59863\n5 06009 Calaveras County, California          70119\n6 06011 Colusa County, California             61861\n\nincome_2010 &lt;- income_2010 |&gt;\n  pivot_wider(\n    names_from = variable,\n    values_from = c(estimate, moe)\n  ) |&gt;\n  select(-moe_medincome) |&gt;\n  rename(medincome_2010 = estimate_medincome)"
  },
  {
    "objectID": "slides/09_merging-data.html#example-california-data-2",
    "href": "slides/09_merging-data.html#example-california-data-2",
    "title": "MATH167R: Merging data",
    "section": "Example: California data",
    "text": "Example: California data\n\nincome_combined &lt;- income_2010 |&gt;\n  left_join(income_2021, by = c(\"GEOID\", \"NAME\"))\nggplot(income_combined, aes(x = medincome_2010, y = medincome_2021)) +\n  geom_point() + \n  geom_abline(slope = 1) + \n  labs(title = \"Median income in 2021 vs. 2010, CA Counties\",\n       subtitle = \"American Community Survey\",\n       y = \"2021 Median Income\",\n       x = \"2010 Median Income\")"
  },
  {
    "objectID": "slides/09_merging-data.html#example-california-data-3",
    "href": "slides/09_merging-data.html#example-california-data-3",
    "title": "MATH167R: Merging data",
    "section": "Example: California data",
    "text": "Example: California data"
  },
  {
    "objectID": "slides/09_merging-data.html#data-manipulation-cheatsheet",
    "href": "slides/09_merging-data.html#data-manipulation-cheatsheet",
    "title": "MATH167R: Merging data",
    "section": "Data manipulation cheatsheet",
    "text": "Data manipulation cheatsheet\n\nfilter() subset rows\nselect() subset columns, use with contains(), starts_with(), ends_with(), …\nmutate() create columns\ngroup_by(), summarize(), count() group and summarize groups\nrename() rename columns\npivot_longer(), pivot_wider() reshape data\ninner_join(), left_join(), right_join(), outer_join() combine data (like SQL)\n\nMuch, much more! (Click me for a cheat sheet)"
  },
  {
    "objectID": "slides/09_merging-data.html#exploratory-data-analysis",
    "href": "slides/09_merging-data.html#exploratory-data-analysis",
    "title": "MATH167R: Merging data",
    "section": "Exploratory data analysis",
    "text": "Exploratory data analysis\nExploratory data analysis is the process of learning about a dataset by visualizing, summarizing, and transforming it.\nBy now we’ve seen most of the skills you need to carry out exploratory data analysis (EDA). As Wickham, Çetinkaya-Rundel, and Grolemund put it, the cycle of EDA looks something like this:\n\nGenerate questions about your data.\nExplore your questions by visualizing, transforming, and modelling your data.\nUse your findings to refine your questions and generate new questions.\n\nYou can read their walkthrough of the EDA process here."
  },
  {
    "objectID": "slides/07_visualizing-data.html#warm-up",
    "href": "slides/07_visualizing-data.html#warm-up",
    "title": "MATH167R: Data visualization",
    "section": "Warm-up",
    "text": "Warm-up\n\nWhat does the following code do?\n\nflips &lt;- factor(c(\"H\", \"T\", \"H\", \"H\"), levels = c(\"H\", \"T\"))\nsum(as.numeric(flips))"
  },
  {
    "objectID": "slides/07_visualizing-data.html#warm-up-1",
    "href": "slides/07_visualizing-data.html#warm-up-1",
    "title": "MATH167R: Data visualization",
    "section": "Warm-up",
    "text": "Warm-up\nAnswer:\n\n\nflips &lt;- factor(c(\"H\", \"T\", \"H\", \"H\"), levels = c(\"H\", \"T\"))\nsum(as.numeric(flips))"
  },
  {
    "objectID": "slides/07_visualizing-data.html#overview-of-today",
    "href": "slides/07_visualizing-data.html#overview-of-today",
    "title": "MATH167R: Data visualization",
    "section": "Overview of today",
    "text": "Overview of today\n\nData visualization in base R\nData visualization with ggplot2\nPrinciples of data visualization"
  },
  {
    "objectID": "slides/07_visualizing-data.html#example-calenviroscreen",
    "href": "slides/07_visualizing-data.html#example-calenviroscreen",
    "title": "MATH167R: Data visualization",
    "section": "Example: CalEnviroScreen",
    "text": "Example: CalEnviroScreen\nPassed in 2012, SB 535 requires that 25% of revenue from California’s cap-and-trade program be spent to benefit communities identified by CalEPA as “disadvantaged,” based on “geographic, socioeconomic, public health, and environmental hazard criteria.”\nWe will begin by downloading the data from here."
  },
  {
    "objectID": "slides/07_visualizing-data.html#example-calenviroscreen-1",
    "href": "slides/07_visualizing-data.html#example-calenviroscreen-1",
    "title": "MATH167R: Data visualization",
    "section": "Example: CalEnviroScreen",
    "text": "Example: CalEnviroScreen\nThis is a shapefile, which contains data on each census tract in California. To read it into R, we will need the sf package, which you can install using install.packages(\"sf\").\n\nlibrary(sf)\nces_data &lt;- st_read(\"~/MATH167R/data/calenviroscreen40shpf2021shp/\")\n\n\n\nclass(ces_data)\n\n[1] \"sf\"         \"data.frame\"\n\nhead(ces_data)\n\nSimple feature collection with 6 features and 66 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -44775.05 ymin: -350085.7 xmax: -36182.83 ymax: -340029.8\nProjected CRS: NAD83 / California Albers\n       Tract   ZIP        County   ApproxLoc TotPop19   CIscore  CIscoreP\n1 6083002103 93454 Santa Barbara Santa Maria     4495 36.019653 69.162885\n2 6083002402 93455 Santa Barbara Santa Maria    13173 37.030667 70.637922\n3 6083002102 93454 Santa Barbara Santa Maria     2398 31.213140 61.069087\n4 6083002010 93455 Santa Barbara      Orcutt     4496  6.639331  5.988401\n5 6083002009 93455 Santa Barbara      Orcutt     4008 14.022852 23.121533\n6 6083002008 93455 Santa Barbara      Orcutt     7074  9.958479 12.808875\n       Ozone   OzoneP    PM2_5   PM2_5_P   DieselPM DieselPM_P   Pesticide\n1 0.03419029 10.56627 7.567724 10.031114 0.15457283   52.40821  1705.21702\n2 0.03521715 11.56192 7.624775 10.454263 0.10608759   39.36528 31524.11322\n3 0.03419029 10.56627 7.548835  9.931549 0.19047418   60.31114  2328.79749\n4 0.03624400 13.61543 7.660570 10.653391 0.09138437   34.27505  3237.52248\n5 0.03624400 13.61543 7.663210 10.690728 0.05097617   18.48164    14.98837\n6 0.03624400 13.61543 7.724757 11.126322 0.09044842   33.80212  6973.79475\n  PesticideP   Tox_Rel Tox_Rel_P   Traffic TrafficP DrinkWat DrinkWatP     Lead\n1   92.03448 13.685390  9.914979 1089.7315  63.4000 246.3727  11.16523 39.31056\n2   99.58621 14.766173 10.265066  486.0378  19.9000 441.0587  52.82877 44.64199\n3   93.82759 16.020654 10.515129  779.3813  42.7500 246.3727  11.16523 66.73806\n4   95.41379  6.183637  7.864466  744.7093  39.9250 335.2215  32.55901 18.81221\n5   63.24138  5.847123  7.714429  544.0408  24.3625 335.2215  32.55901 48.55917\n6   97.75862  7.395100  8.214554  717.6585  37.6000 336.4334  32.73386 35.56429\n    Lead_P Cleanup  CleanupP GWThreat GWThreatP HazWaste HazWasteP ImpWatBod\n1 36.11846     1.0 17.077268    73.15 94.720239    0.440  64.76506         9\n2 43.80592    13.5 72.396417   304.00 99.767558    2.800  95.55261        10\n3 75.07246     0.1  2.071669     7.50 39.448780    0.135  23.71939         9\n4 11.07750     0.0  0.000000     0.30  2.108584    0.200  35.61880         0\n5 49.51481     0.1  2.071669     0.00  0.000000    0.210  37.68365         0\n6 31.24134     0.1  2.071669     1.50 10.642537    0.100  16.63799         0\n  ImpWatBodP SolWaste SolWasteP PollBurd PolBurdSc  PolBurdP Asthma  AsthmaP\n1   77.29945        0   0.00000 40.72736  4.972803 45.003111  82.18 86.65254\n2   82.96934       18  97.64032 53.86904  6.577399 79.962663  48.80 54.79811\n3   77.29945        4  70.42383 40.37582  4.929880 43.858121  82.18 86.65254\n4    0.00000        0   0.00000 22.96380  2.803875  6.098320  41.11 43.34497\n5    0.00000        1  35.71592 23.37974  2.854662  6.583696  41.11 43.34497\n6    0.00000        0   0.00000 24.13117  2.946411  7.380212  41.11 43.34497\n  LowBirtWt  LowBirWP Cardiovas CardiovasP Educatn  EducatP Ling_Isol\n1      6.01 75.327175     12.69   52.00648    30.4 80.66312      18.2\n2      4.00 26.635874      7.60   10.81755    44.0 92.87522      18.2\n3      4.95 51.013600     12.69   52.00648    30.2 80.46064      13.3\n4      2.65  5.683859     10.31   32.41525     2.9 10.31384       0.0\n5      6.22 79.278933     10.31   32.41525    10.1 42.29309       4.3\n6      4.43 36.656402     10.31   32.41525     7.2 30.86560       1.7\n  Ling_IsolP Poverty  PovertyP Unempl  UnemplP HousBurd HousBurdP  PopChar\n1   83.84084    57.5 89.660804    3.1 18.31078     21.6  69.15082 69.82700\n2   83.84084    51.0 83.040201    7.2 69.13066     19.3  60.10139 54.27409\n3   72.25606    29.4 52.876884    4.3 35.02082     17.9  53.62484 61.03603\n4    0.00000     8.8  7.550251    6.1 58.35502     10.6  16.31179 22.82710\n5   33.30627    20.4 35.150754   12.1 92.39979      9.5  12.00253 47.35510\n6   13.30356    15.6 23.304020    5.6 52.52473     11.0  18.46641 32.58254\n  PopCharSc PopCharP Child_10 Pop_10_64 Elderly65 Hispanic   White AfricanAm\n1  7.243330 79.82854  18.4427   69.0545   12.5028  68.9210 20.8899    0.4004\n2  5.629987 56.55572  19.6462   75.0019    5.3519  78.6229 13.2240    2.5051\n3  6.331420 67.18356  15.0959   72.0183   12.8857  65.7214 30.6088    0.9591\n4  2.367913 10.74130  12.1441   73.4431   14.4128  22.9537 69.1948    0.9342\n5  4.912263 46.28089  12.8244   68.2884   18.8872  33.4082 59.7804    0.6986\n6  3.379868 23.82753  15.6630   68.4761   15.8609  33.4040 58.4111    2.6859\n  NativeAm OtherMult Shape_Leng Shape_Area   AAPI\n1   0.2670    1.3126   6999.358    2847611 8.2091\n2   0.0000    0.9489  19100.578   16352921 4.6990\n3   0.0000    2.1685   4970.986    1352329 0.5421\n4   0.7117    2.5356   6558.956    2417717 3.6699\n5   1.4721    1.3723   6570.369    2608422 3.2685\n6   0.0000    2.7000   8840.458    3302911 2.7990\n                        geometry\n1 MULTIPOLYGON (((-39795.07 -...\n2 MULTIPOLYGON (((-39795.07 -...\n3 MULTIPOLYGON (((-38115.75 -...\n4 MULTIPOLYGON (((-37341.66 -...\n5 MULTIPOLYGON (((-39465.11 -...\n6 MULTIPOLYGON (((-38569.1 -3..."
  },
  {
    "objectID": "slides/07_visualizing-data.html#example-calenviroscreen-2",
    "href": "slides/07_visualizing-data.html#example-calenviroscreen-2",
    "title": "MATH167R: Data visualization",
    "section": "Example: CalEnviroScreen",
    "text": "Example: CalEnviroScreen\nThe CalEnviroScreen data contains information on each tract’s different environmental indicators and percentile ranks. We will practice data exploration and visualization using this dataset."
  },
  {
    "objectID": "slides/07_visualizing-data.html#summarizing-categorical-data",
    "href": "slides/07_visualizing-data.html#summarizing-categorical-data",
    "title": "MATH167R: Data visualization",
    "section": "Summarizing categorical data",
    "text": "Summarizing categorical data\n\ntable(ces_data$County)\n\n\n        Alameda          Alpine          Amador           Butte       Calaveras \n            360               1               9              51              10 \n         Colusa    Contra Costa       Del Norte       El Dorado          Fresno \n              5             207               7              42             199 \n          Glenn        Humboldt        Imperial            Inyo            Kern \n              6              30              31               6             151 \n          Kings            Lake          Lassen     Los Angeles          Madera \n             27              15               9            2343              23 \n          Marin        Mariposa       Mendocino          Merced           Modoc \n             55               6              20              49               4 \n           Mono        Monterey            Napa          Nevada          Orange \n              3              93              40              20             582 \n         Placer          Plumas       Riverside      Sacramento      San Benito \n             84               7             453             317              11 \n San Bernardino       San Diego   San Francisco     San Joaquin San Luis Obispo \n            369             627             195             139              53 \n      San Mateo   Santa Barbara     Santa Clara      Santa Cruz          Shasta \n            157              89             372              52              48 \n         Sierra        Siskiyou          Solano          Sonoma      Stanislaus \n              1              14              96              99              94 \n         Sutter          Tehama         Trinity          Tulare        Tuolumne \n             21              11               5              78              11 \n        Ventura            Yolo            Yuba \n            173              41              14"
  },
  {
    "objectID": "slides/07_visualizing-data.html#summarizing-categorical-data-1",
    "href": "slides/07_visualizing-data.html#summarizing-categorical-data-1",
    "title": "MATH167R: Data visualization",
    "section": "Summarizing categorical data",
    "text": "Summarizing categorical data\nThe barplot function takes a named numeric vector as its first argument:\n\nbarplot(height = table(ces_data$County))\n\n\n\nIs this an effective visualization? Why or why not?"
  },
  {
    "objectID": "slides/07_visualizing-data.html#summarizing-categorical-data-2",
    "href": "slides/07_visualizing-data.html#summarizing-categorical-data-2",
    "title": "MATH167R: Data visualization",
    "section": "Summarizing categorical data",
    "text": "Summarizing categorical data\n\n# turn unemployment rate into categorical variable\nces_data$Unempl_Rate_Factor &lt;- cut(\n  ces_data$Unempl, \n  breaks = c(0, 5, 10, 15, 20, 25, 100)\n)\ntable(ces_data$Unempl_Rate_Factor)\n\n\n   (0,5]   (5,10]  (10,15]  (15,20]  (20,25] (25,100] \n    3408     3215      816      186       43       16 \n\nbarplot(height = table(ces_data$Unempl_Rate_Factor))"
  },
  {
    "objectID": "slides/07_visualizing-data.html#customizing-base-r-plots",
    "href": "slides/07_visualizing-data.html#customizing-base-r-plots",
    "title": "MATH167R: Data visualization",
    "section": "Customizing base R plots",
    "text": "Customizing base R plots\nBase R plotting functions have many optional arguments allowing customization:\n\nbarplot(\n  height = table(ces_data$Unempl_Rate_Factor), \n  main = \"Distribution of Census Tract Unemployment Rates\",\n  col = \"red\"\n)"
  },
  {
    "objectID": "slides/07_visualizing-data.html#summarizing-numerical-data",
    "href": "slides/07_visualizing-data.html#summarizing-numerical-data",
    "title": "MATH167R: Data visualization",
    "section": "Summarizing numerical data",
    "text": "Summarizing numerical data\n\nhist(\n  x = ces_data$Unempl, \n  main = \"Distribution of Census Tract Unemployment Rates\",\n  col = \"red\"\n)"
  },
  {
    "objectID": "slides/07_visualizing-data.html#summarizing-numerical-data-1",
    "href": "slides/07_visualizing-data.html#summarizing-numerical-data-1",
    "title": "MATH167R: Data visualization",
    "section": "Summarizing numerical data",
    "text": "Summarizing numerical data\n\nsummary(ces_data$Unempl)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-999.00    3.40    5.30  -35.64    7.80   43.90 \n\n\nThe CalEnviroScreen data uses -999 for missing data. We can use the replace function to replace these with NA values.\n\nhist(\n  x = replace(ces_data$Unempl, ces_data$Unempl == -999, NA), \n  main = \"Distribution of Census Tract Unemployment Rates\",\n  xlab = \"Unemployment Rate\",\n  col = \"red\"\n)"
  },
  {
    "objectID": "slides/07_visualizing-data.html#summarizing-numerical-data-boxplots",
    "href": "slides/07_visualizing-data.html#summarizing-numerical-data-boxplots",
    "title": "MATH167R: Data visualization",
    "section": "Summarizing numerical data: boxplots",
    "text": "Summarizing numerical data: boxplots\n\nboxplot(\n  x = replace(ces_data$Unempl, ces_data$Unempl == -999, NA), \n  main = \"Distribution of Census Tract Unemployment Rates\",\n  xlab = \"Unemployment Rate\", \n  horizontal = T,\n  col = \"red\"\n)"
  },
  {
    "objectID": "slides/07_visualizing-data.html#multivariate-visualization",
    "href": "slides/07_visualizing-data.html#multivariate-visualization",
    "title": "MATH167R: Data visualization",
    "section": "Multivariate visualization",
    "text": "Multivariate visualization\nThe plot function can be used to obtain scatter plots for two numerical variables:\n\n# remove spatial information\nces_data$geometry &lt;- NULL\n\n# replace missing values\nces_data &lt;- replace(ces_data, ces_data == -999, NA)\nplot(\n  x = ces_data$PolBurdSc, \n  y = ces_data$PopCharSc\n)"
  },
  {
    "objectID": "slides/07_visualizing-data.html#multivariate-visualization-1",
    "href": "slides/07_visualizing-data.html#multivariate-visualization-1",
    "title": "MATH167R: Data visualization",
    "section": "Multivariate visualization",
    "text": "Multivariate visualization\nThe plot function can be used to obtain scatter plots for two numerical variables:\n\nplot(\n  x = ces_data$PolBurdSc, \n  y = ces_data$PopCharSc,\n  xlab = \"Pollution Burden\",\n  ylab = \"Population Characteristics\",\n  col = \"blue\",\n  pch = 16, # change shape of points\n  cex = .5, # change size of points\n)"
  },
  {
    "objectID": "slides/07_visualizing-data.html#data-visualization-with-ggplot2",
    "href": "slides/07_visualizing-data.html#data-visualization-with-ggplot2",
    "title": "MATH167R: Data visualization",
    "section": "Data visualization with ggplot2",
    "text": "Data visualization with ggplot2\nggplot2 is a fantastic package for making complex visualizations that many people find more intuitive to use.\n\nlibrary(ggplot2)\n\nPlots are built sequentially using layers, so it’s easy to edit and fine-tune the plots you generate.\nWhen using ggplot2, it is essential that your data are tidy! If they are not, the functions probably will not look like you expect.\nLet’s work through how to build a plot layer by layer."
  },
  {
    "objectID": "slides/07_visualizing-data.html#data-visualization-with-ggplot2-1",
    "href": "slides/07_visualizing-data.html#data-visualization-with-ggplot2-1",
    "title": "MATH167R: Data visualization",
    "section": "Data visualization with ggplot2",
    "text": "Data visualization with ggplot2\nFirst, let’s initialize a plot. Use the data parameter to tell ggplot what data frame to use.\n\nIt should be tidy data, in either a data.frame or tibble!\n\n\n\n\nggplot(data = ces_data)"
  },
  {
    "objectID": "slides/07_visualizing-data.html#select-variables-using-ggplot2",
    "href": "slides/07_visualizing-data.html#select-variables-using-ggplot2",
    "title": "MATH167R: Data visualization",
    "section": "Select variables using ggplot2",
    "text": "Select variables using ggplot2\nNext, we match variables to aesthetics within our plot. For example, let’s put Pollution Burden on the x-axis. We do so using the function aes() within the initial ggplot() call.\n\nPossible aesthetics include axes as well as characteristics such as color, size, shape\n\n\n\n\nggplot(data = ces_data,\n       aes(x = PolBurdSc))"
  },
  {
    "objectID": "slides/07_visualizing-data.html#map-aesthetics-to-shapes-using-ggplot2",
    "href": "slides/07_visualizing-data.html#map-aesthetics-to-shapes-using-ggplot2",
    "title": "MATH167R: Data visualization",
    "section": "Map aesthetics to shapes using ggplot2",
    "text": "Map aesthetics to shapes using ggplot2\nNow ggplot knows what to plot, but it doesn’t know how to plot it yet. Let’s add a new layer that creates a histogram with geom_histogram().\n\nThis is a new layer! We add layers using the + operator.\n\n\n\n\nggplot(data = ces_data,\n       aes(x = PolBurdSc)) +\n  geom_histogram()"
  },
  {
    "objectID": "slides/07_visualizing-data.html#customizing-shapes",
    "href": "slides/07_visualizing-data.html#customizing-shapes",
    "title": "MATH167R: Data visualization",
    "section": "Customizing shapes",
    "text": "Customizing shapes\nWe can customize the shape within geom_histogram():\n\n\n\nggplot(data = ces_data,\n       aes(x = PolBurdSc)) +\n  geom_histogram(fill = 'red')"
  },
  {
    "objectID": "slides/07_visualizing-data.html#adding-label-and-titles",
    "href": "slides/07_visualizing-data.html#adding-label-and-titles",
    "title": "MATH167R: Data visualization",
    "section": "Adding label and titles",
    "text": "Adding label and titles\nWe can finally add axis labels and a title using the + operator:\n\n\n\nggplot(data = ces_data,\n       aes(x = PolBurdSc)) +\n  geom_histogram(fill = 'red') + \n  xlab(\"Pollution Burden Score\") +\n  ggtitle(\"Histogram of Pollution Burden Score\")"
  },
  {
    "objectID": "slides/07_visualizing-data.html#subsetting-our-data",
    "href": "slides/07_visualizing-data.html#subsetting-our-data",
    "title": "MATH167R: Data visualization",
    "section": "Subsetting our data",
    "text": "Subsetting our data\nRecall we can subset our data using the dplyr::filter() function. Note the use of the %in% operator here:\n\nlibrary(dplyr)\nsfba_counties &lt;- c(\"Alameda\", \"Contra Costa\", \"Marin\", \"Napa\", \"San Francisco\",\n                   \"San Mateo\", \"Santa Clara\", \"Sonoma\", \"Solano\")\n# require county to be in SF Bay Area\nces_sfba &lt;- ces_data |&gt;\n  filter(County %in% sfba_counties)\nhead(ces_sfba)\n\n       Tract   ZIP      County     ApproxLoc TotPop19   CIscore  CIscoreP\n1 6085509201 94043 Santa Clara Mountain View     5524 12.788826 19.919314\n2 6085510500 94022 Santa Clara     Los Altos     4541  4.122372  1.714574\n3 6085509401 94306 Santa Clara     Palo Alto     3806 10.481222 14.044377\n4 6085509303 94043 Santa Clara Mountain View     3563 14.221995 23.562784\n5 6085503306 95122 Santa Clara      San Jose     4373 23.715224 45.978316\n6 6085503211 95121 Santa Clara      San Jose     4592 23.614422 45.688351\n       Ozone   OzoneP    PM2_5  PM2_5_P  DieselPM DieselPM_P Pesticide\n1 0.03716809 14.92222 8.232423 16.91350 0.6305833   93.91413         0\n2 0.03624400 13.61543 8.095511 14.76042 0.1860035   59.51462         0\n3 0.03624400 13.61543 8.181223 16.10454 0.4533547   87.66646         0\n4 0.03624400 13.61543 8.317675 18.56876 0.4539156   87.71624         0\n5 0.04125212 24.87866 8.835374 33.69011 0.1114884   40.72184         0\n6 0.04125212 24.87866 8.768682 31.98507 0.2847047   74.71064         0\n  PesticideP  Tox_Rel Tox_Rel_P   Traffic TrafficP DrinkWat DrinkWatP     Lead\n1          0 169.3650  31.44536 1646.1402  81.0375 428.4671  49.50668 21.88574\n2          0 195.1733  34.27107 1016.7001  59.0000 399.4475  43.36206 29.89372\n3          0 152.8043  29.56989 1293.1250  72.0750 509.0032  61.39628 41.26271\n4          0 146.4173  28.78220  912.1028  52.4875 428.4671  49.50668 32.28908\n5          0 143.2963  28.51963 1584.2238  79.7625 291.5255  22.74260 47.27127\n6          0 147.3003  28.94474 3469.8027  97.6875 291.5255  22.74260 39.04452\n    Lead_P Cleanup CleanupP GWThreat GWThreatP HazWaste HazWasteP ImpWatBod\n1 14.45495   65.50 97.79769   101.80  96.77901     0.58  73.60688         5\n2 23.79332    9.35 59.07055    10.00  47.43483     0.30  50.13898         0\n3 38.95400   10.40 62.03807     6.00  35.01577     0.30  50.13898         0\n4 26.96912   40.95 93.76633    39.05  85.55537     0.08  10.54931         4\n5 47.62445    3.50 33.87458     0.00   0.00000     0.15  26.67108         0\n6 35.68998    2.45 27.93953     5.75  32.77436     0.12  20.31767         3\n  ImpWatBodP SolWaste SolWasteP PollBurd PolBurdSc PolBurdP Asthma    AsthmaP\n1   51.21798        0         0 46.47630  5.674747 60.89608  19.22  8.1879362\n2    0.00000        0         0 31.13603  3.801704 20.13690   7.95  0.2367896\n3    0.00000        0         0 36.42799  4.447850 32.86870  12.05  1.6076770\n4   43.78412        0         0 38.71417  4.726992 39.34039  19.77  9.0353938\n5    0.00000        0         0 27.19803  3.320874 12.39577  57.49 66.1764706\n6   33.15834        0         0 33.99926  4.151303 26.57125  39.81 41.3010967\n  LowBirtWt  LowBirWP Cardiovas CardiovasP Educatn   EducatP Ling_Isol\n1      3.97 25.904542      8.52 17.3354935     2.5  8.415591       4.6\n2      3.16 10.944316      4.43  0.3614158     2.9 10.313845       2.7\n3      3.83 22.645625      6.26  4.4366899     7.9 33.890154      10.7\n4      2.72  6.209905      8.77 19.2048853    11.0 45.178436      14.7\n5      5.88 72.850911     12.25 48.2178465    40.0 89.977221      16.5\n6      5.15 56.351039     10.14 30.9322034    28.2 77.866363      25.3\n  Ling_IsolP Poverty PovertyP Unempl   UnemplP HousBurd HousBurdP  PopChar\n1   35.33631    14.7 21.26884    4.1 32.274857     14.2  34.24588 21.72548\n2   21.42374     7.4  4.91206    4.2 33.576262     10.3  15.06971 10.45331\n3   64.40655    11.8 14.27136    4.8 41.840187     12.3  24.94297 22.71679\n4   76.64095    20.3 34.92462    2.2  7.769391     21.3  68.11153 29.00419\n5   80.38977    26.2 46.82161    7.7 73.412285     27.4  85.75412 68.84304\n6   92.61064    18.7 31.25628    8.7 79.724102     17.7  52.61090 54.83755\n  PopCharSc  PopCharP Child_10 Pop_10_64 Elderly65 Hispanic   White AfricanAm\n1  2.253638  9.543621  10.7350   79.8878    9.3773   7.1687 52.4982    8.0920\n2  1.084349  1.159859  11.9577   60.8897   27.1526   2.1801 63.5543    0.2202\n3  2.356469 10.602622  13.8466   79.4009    6.7525  15.1077 33.9201    3.4419\n4  3.008677 18.557741   9.7390   70.5866   19.6744  15.2961 36.4861    4.2661\n5  7.141261 78.618255  10.4276   75.8290   13.7434  59.5472  2.7212    1.1434\n6  5.688436 57.387796   9.3859   73.6280   16.9861  28.2012 11.0409    1.4373\n  NativeAm OtherMult Shape_Leng Shape_Area    AAPI Unempl_Rate_Factor\n1   0.2715    3.4938   5862.187  1581581.5 28.4757              (0,5]\n2   0.0000    3.6336   7610.539  2592144.4 30.4118              (0,5]\n3   0.0000    4.1776   3401.365   666126.6 43.3526              (0,5]\n4   0.0000    8.4199   3211.309   575854.6 35.5319              (0,5]\n5   0.2058    1.0748   5951.985  1670328.7 35.3076             (5,10]\n6   0.0000    2.6568   4245.476  1076751.1 56.6638             (5,10]"
  },
  {
    "objectID": "slides/07_visualizing-data.html#scatter-plots-with-ggplot2",
    "href": "slides/07_visualizing-data.html#scatter-plots-with-ggplot2",
    "title": "MATH167R: Data visualization",
    "section": "Scatter plots with ggplot2",
    "text": "Scatter plots with ggplot2\nWe can easily add another aesthetic and change the shape to get a multivariate visualization:\n\n\n\nggplot(data = ces_sfba,\n       aes(x = PolBurdSc, y = PopCharSc)) +\n  geom_point()"
  },
  {
    "objectID": "slides/07_visualizing-data.html#customizing-our-scatter-plot",
    "href": "slides/07_visualizing-data.html#customizing-our-scatter-plot",
    "title": "MATH167R: Data visualization",
    "section": "Customizing our scatter plot",
    "text": "Customizing our scatter plot\nWe can similarly customize our scatter plots\n\n\n\nggplot(data = ces_sfba,\n       aes(x = PolBurdSc, y = PopCharSc)) +\n  geom_point(color = 'red', alpha = 0.5)  +\n  xlab(\"Pollution Burden Score\") +\n  ylab(\"Population Characteristic Score\") +\n  ggtitle(\"Scatterplot of CalEnviroScreen Scores\")"
  },
  {
    "objectID": "slides/07_visualizing-data.html#beyond-two-dimensions",
    "href": "slides/07_visualizing-data.html#beyond-two-dimensions",
    "title": "MATH167R: Data visualization",
    "section": "Beyond two dimensions",
    "text": "Beyond two dimensions\nWe can add even more mappings between aesthetics and variables to explore multivariate relationships:\n\n\n\nggplot(data = ces_sfba,\n       aes(x = PolBurdSc, y = PopCharSc, color = County)) +\n  geom_point(alpha = 0.5)  +\n  xlab(\"Pollution Burden Score\") +\n  ylab(\"Population Characteristic Score\") +\n  ggtitle(\"Scatterplot of CalEnviroScreen Scores\")"
  },
  {
    "objectID": "slides/07_visualizing-data.html#customizing-our-scatter-plot-1",
    "href": "slides/07_visualizing-data.html#customizing-our-scatter-plot-1",
    "title": "MATH167R: Data visualization",
    "section": "Customizing our scatter plot",
    "text": "Customizing our scatter plot\nWe can similarly customize our scatter plots\n\n\nAvoid:\n\n3D plots\nDeceptive axes\nExcessive labels\nExcessive/bad coloring\nFancy shading/effects\nBad variable/axis names\nUnreadable labels\nOverloaded with information\n\n\nStrive for:\n\nSimple, clean graphics\nNeat and human readable text\nAppropriate data range (bar charts should always start from 0!)\nConsistent intervals\nRoughly ~6 colors or less\nSize figures appropriately"
  },
  {
    "objectID": "slides/07_visualizing-data.html#some-misleading-visualizations",
    "href": "slides/07_visualizing-data.html#some-misleading-visualizations",
    "title": "MATH167R: Data visualization",
    "section": "Some misleading visualizations",
    "text": "Some misleading visualizations\n\nAvoid: Pie charts! Eugh! The proportions are completely off!"
  },
  {
    "objectID": "slides/07_visualizing-data.html#some-misleading-visualizations-1",
    "href": "slides/07_visualizing-data.html#some-misleading-visualizations-1",
    "title": "MATH167R: Data visualization",
    "section": "Some misleading visualizations",
    "text": "Some misleading visualizations\n\nAvoid: Pie charts! Eugh! Percents don’t add up!"
  },
  {
    "objectID": "slides/07_visualizing-data.html#some-misleading-visualizations-2",
    "href": "slides/07_visualizing-data.html#some-misleading-visualizations-2",
    "title": "MATH167R: Data visualization",
    "section": "Some misleading visualizations",
    "text": "Some misleading visualizations\n\nAvoid: 3d bar charts?!"
  },
  {
    "objectID": "slides/07_visualizing-data.html#some-misleading-visualizations-3",
    "href": "slides/07_visualizing-data.html#some-misleading-visualizations-3",
    "title": "MATH167R: Data visualization",
    "section": "Some misleading visualizations",
    "text": "Some misleading visualizations\n\nAvoid: Bad use of color"
  },
  {
    "objectID": "slides/07_visualizing-data.html#some-misleading-visualizations-4",
    "href": "slides/07_visualizing-data.html#some-misleading-visualizations-4",
    "title": "MATH167R: Data visualization",
    "section": "Some misleading visualizations",
    "text": "Some misleading visualizations\n\nAvoid: Bad axis, lack of information, 3D bar chart"
  },
  {
    "objectID": "slides/07_visualizing-data.html#some-misleading-visualizations-5",
    "href": "slides/07_visualizing-data.html#some-misleading-visualizations-5",
    "title": "MATH167R: Data visualization",
    "section": "Some misleading visualizations",
    "text": "Some misleading visualizations\n\nAvoid: Four numbers displayed as a cluttered chart, terrible labels, bad axis range"
  },
  {
    "objectID": "slides/07_visualizing-data.html#some-misleading-visualizations-6",
    "href": "slides/07_visualizing-data.html#some-misleading-visualizations-6",
    "title": "MATH167R: Data visualization",
    "section": "Some misleading visualizations",
    "text": "Some misleading visualizations\n\nAvoid: Deceptively flipped y-axis! (and excessive color)"
  },
  {
    "objectID": "slides/07_visualizing-data.html#some-misleading-visualizations-7",
    "href": "slides/07_visualizing-data.html#some-misleading-visualizations-7",
    "title": "MATH167R: Data visualization",
    "section": "Some misleading visualizations",
    "text": "Some misleading visualizations\n\n(This was presented in Congress!)]\nAvoid: Two axes in a single plot, bad axis range"
  },
  {
    "objectID": "slides/07_visualizing-data.html#some-misleading-visualizations-8",
    "href": "slides/07_visualizing-data.html#some-misleading-visualizations-8",
    "title": "MATH167R: Data visualization",
    "section": "Some misleading visualizations",
    "text": "Some misleading visualizations\n\nAvoid: Deceptive axis range (should start at 0)"
  },
  {
    "objectID": "slides/07_visualizing-data.html#some-misleading-visualizations-9",
    "href": "slides/07_visualizing-data.html#some-misleading-visualizations-9",
    "title": "MATH167R: Data visualization",
    "section": "Some misleading visualizations",
    "text": "Some misleading visualizations\n\n(From the Gates Foundation!)\nAvoid: Inconsistent x-axis intervals"
  },
  {
    "objectID": "slides/07_visualizing-data.html#ggplot-cheatsheet",
    "href": "slides/07_visualizing-data.html#ggplot-cheatsheet",
    "title": "MATH167R: Data visualization",
    "section": "ggplot cheatsheet",
    "text": "ggplot cheatsheet\n\nAxes: xlim(), ylim()\nLegends: within initial aes(), edit within theme() or guides()\ngeom_point(), geom_line(), geom_histogram(), geom_bar(), geom_boxplot(), geom_text()\nfacet_grid(), facet_wrap() for faceting\nlabs() for labels\ntheme_bw() to make things look nicer\nGraphical parameters: color for color, alpha for opacity, lwd/size for thickness, shape for shape, fill for interior color, …\n\nFind more tips here!"
  },
  {
    "objectID": "slides/07_visualizing-data.html#lab-04",
    "href": "slides/07_visualizing-data.html#lab-04",
    "title": "MATH167R: Data visualization",
    "section": "Lab 04",
    "text": "Lab 04\nIn this lab, we’ll practice data visualization with base R and ggplot2."
  },
  {
    "objectID": "slides/04_lists-data-frames.html#warm-up",
    "href": "slides/04_lists-data-frames.html#warm-up",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Warm-up",
    "text": "Warm-up\nDiscuss the following lines of code. What do they do?\n\nx &lt;- c(3 &gt; 4, T, 5 &gt; 6)\ny &lt;- c(1, 0, 1)\nrbind(x, y)\n\n\nAnswer:\n\nx &lt;- c(3 &gt; 4, T, 5 &gt; 6)\ny &lt;- c(1, 0, 1)\nrbind(x, y)\n\n  [,1] [,2] [,3]\nx    0    1    0\ny    1    0    1"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#overview-of-today",
    "href": "slides/04_lists-data-frames.html#overview-of-today",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Overview of today",
    "text": "Overview of today\n\nVectorized functions\nLists\nData frames"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#vector-arithmetic",
    "href": "slides/04_lists-data-frames.html#vector-arithmetic",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Vector Arithmetic",
    "text": "Vector Arithmetic\nVectorization, or applying functions across vectors/arrays, is one of R’s most powerful capabilities\n\nx &lt;- 1:5\ny &lt;- -1:-5\ny\n\n[1] -1 -2 -3 -4 -5\n\nx + y\n\n[1] 0 0 0 0 0\n\nx * y\n\n[1]  -1  -4  -9 -16 -25"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#vector-arithmetic-1",
    "href": "slides/04_lists-data-frames.html#vector-arithmetic-1",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Vector Arithmetic",
    "text": "Vector Arithmetic\nBe careful! R recycles, repeating elements of shorter vectors to match longer vectors. This is incredibly useful when done on purpose, but can also easily lead to hard-to-catch bugs in your code!\n\n2 * x\n\n[1]  2  4  6  8 10\n\nc(1, -1) * x\n\n[1]  1 -2  3 -4  5\n\nc(1, -1) + x\n\n[1] 2 1 4 3 6"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#vector-arithmetic-2",
    "href": "slides/04_lists-data-frames.html#vector-arithmetic-2",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Vector Arithmetic",
    "text": "Vector Arithmetic\nWe can apply many functions component-wise to vectors, including comparison operators.\n\nx &gt;= 3\n\n[1] FALSE FALSE  TRUE  TRUE  TRUE\n\ny &lt; -2\n\n[1] FALSE FALSE  TRUE  TRUE  TRUE\n\n(x &gt;= 3) & (y &lt; -2)\n\n[1] FALSE FALSE  TRUE  TRUE  TRUE\n\nx == c(1, 3, 2, 4, 5)\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#boolean-vectors",
    "href": "slides/04_lists-data-frames.html#boolean-vectors",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Boolean Vectors",
    "text": "Boolean Vectors\nIn code, entries that are TRUE or FALSE are called booleans (logicals in R). These are incredibly important, because they can be used to give your computer conditions. What will the following code do?\n\nx[x &gt; 3] &lt;- 3\nx\n\n\n\n\n[1] 1 2 3 3 3"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#boolean-vectors-1",
    "href": "slides/04_lists-data-frames.html#boolean-vectors-1",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Boolean Vectors",
    "text": "Boolean Vectors\nWe can also do basic arithmetic with booleans. TRUE is encoded as 1 and FALSE is encoded as 0.\n\n# First reset x\nx &lt;- 1:5\nsum(x &gt;= 3)\n\n\n\n\n[1] 3\n\n\n\n\n\nmean(x &gt;= 3)\n\n\n\n\n\n[1] 0.6\n\n\n\n\nWhat is this last quantity telling us?\n\n\nBy taking the mean, we are looking at the proportion of our vector that is TRUE!"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#complicated-indexing",
    "href": "slides/04_lists-data-frames.html#complicated-indexing",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Complicated indexing",
    "text": "Complicated indexing\nWe can also get more complicated with our indexing.\n\n# Return the second and third elements of \ny[c(2, 3)]\n\n[1] -2 -3\n\n# Return the values of x greater than 3\nx[x &gt;= 3]\n\n[1] 3 4 5\n\n# Values of x that match the index of the values of y that are less than -2\nx[y &lt; -2]\n\n[1] 3 4 5\n\n# which() returns the index of entries that are TRUE\nwhich(y &lt; -2)\n\n[1] 3 4 5"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#complicated-indexing-1",
    "href": "slides/04_lists-data-frames.html#complicated-indexing-1",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Complicated indexing",
    "text": "Complicated indexing\nWe can compare entire vectors using identical()\n\nidentical(x, -rev(y))\n\n[1] FALSE\n\n\nWhat do you think the function rev() is doing in the code above?\nHint: Use ?rev to read the help files for the function"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#lists-1",
    "href": "slides/04_lists-data-frames.html#lists-1",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Lists",
    "text": "Lists\nLists, like vectors and matrices, are a class of objects in R. Lists are special because they can store multiple different types of data.\n\nmy_list &lt;- list(\"some_numbers\" = 1:5,\n                \"some_characters\" = c(\"a\", \"b\", \"c\"),\n                \"a_matrix\" = diag(2))\nmy_list\n\n$some_numbers\n[1] 1 2 3 4 5\n\n$some_characters\n[1] \"a\" \"b\" \"c\"\n\n$a_matrix\n     [,1] [,2]\n[1,]    1    0\n[2,]    0    1\n\n\nMake sure to store items within a list using the = operator for assigning arguments, not &lt;-!"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#accessing-list-elements",
    "href": "slides/04_lists-data-frames.html#accessing-list-elements",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Accessing List Elements",
    "text": "Accessing List Elements\nThere are three ways to access an item within a list\n\ndouble brackets [[]] with its name in quotes\ndouble brackets [[]] with its index as a number\ndollar sign $ followed by its name without quotes\n\n\nmy_list[[\"some_numbers\"]]\n\n[1] 1 2 3 4 5\n\nmy_list[[1]]\n\n[1] 1 2 3 4 5\n\nmy_list$some_numbers\n\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#why-double-brackets",
    "href": "slides/04_lists-data-frames.html#why-double-brackets",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Why double brackets?",
    "text": "Why double brackets?\nIf you use a single bracket to index, like we do with matrices and vectors, you will return a list with a single element.\n\nmy_list[1]\n\n$some_numbers\n[1] 1 2 3 4 5\n\nmy_list[[1]]\n\n[1] 1 2 3 4 5\n\n\nNote that this means you can only return a single item in a list using double brackets or the dollar sign! (Why?)"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#why-double-brackets-1",
    "href": "slides/04_lists-data-frames.html#why-double-brackets-1",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Why double brackets?",
    "text": "Why double brackets?\nThis is a subtle but important difference!\n\nmy_list[1] + 1\n\nError in my_list[1] + 1: non-numeric argument to binary operator\n\n\n\nmy_list[[1]] + 1\n\n[1] 2 3 4 5 6"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#subsetting-a-list",
    "href": "slides/04_lists-data-frames.html#subsetting-a-list",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Subsetting a list",
    "text": "Subsetting a list\nYou can subset a list similarly to vectors and matrices using single brackets.\n\nmy_list[1:2]\n\n$some_numbers\n[1] 1 2 3 4 5\n\n$some_characters\n[1] \"a\" \"b\" \"c\"\n\nmy_list[-2]\n\n$some_numbers\n[1] 1 2 3 4 5\n\n$a_matrix\n     [,1] [,2]\n[1,]    1    0\n[2,]    0    1"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#adding-to-a-list",
    "href": "slides/04_lists-data-frames.html#adding-to-a-list",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Adding to a list",
    "text": "Adding to a list\nWe can use the same tools we used to access list elements to add to a list. However, if we use double brackets, we must use quotes, otherwise R will search for something that does not yet exist.\n\nmy_list$a_boolean &lt;- FALSE\nmy_list[[\"a_list\"]] &lt;- list(\"recursive\" = TRUE)\nmy_list\n\n$some_numbers\n[1] 1 2 3 4 5\n\n$some_characters\n[1] \"a\" \"b\" \"c\"\n\n$a_matrix\n     [,1] [,2]\n[1,]    1    0\n[2,]    0    1\n\n$a_boolean\n[1] FALSE\n\n$a_list\n$a_list$recursive\n[1] TRUE"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#names-of-list-items",
    "href": "slides/04_lists-data-frames.html#names-of-list-items",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Names of List Items",
    "text": "Names of List Items\nCall names() to get a vector of list item names.\n\nnames(my_list)\n\n[1] \"some_numbers\"    \"some_characters\" \"a_matrix\"        \"a_boolean\"      \n[5] \"a_list\""
  },
  {
    "objectID": "slides/04_lists-data-frames.html#why-bother",
    "href": "slides/04_lists-data-frames.html#why-bother",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Why bother?",
    "text": "Why bother?\n\nLists give us key-value pairs, also known as dictionaries or associative arrays\nThis means we can look up items in a list by name, rather than location\nFor example, if we know we are looking for output within a list, we can always search for it, regardless of how the list was created or what else it contains"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#data-frames-1",
    "href": "slides/04_lists-data-frames.html#data-frames-1",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Data frames",
    "text": "Data frames\nA data frame in R is essentially a special type of list, where each item is a vector of equal length. Typically, we say that data has \\(n\\) rows (one for each observation) and \\(p\\) columns (one for each variable)\nUnlike a matrix, columns can have different types. However, many column functions still apply! (such as colSums, summary, etc.)"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#creating-a-data-frame",
    "href": "slides/04_lists-data-frames.html#creating-a-data-frame",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Creating a data frame",
    "text": "Creating a data frame\nAn easy way to create a data frame is to use the function data.frame().\nLike lists, make sure you define the names using = and not &lt;-!\n\nmy_data &lt;- data.frame(\"var1\" = 1:3,\n                      \"var2\" = c(\"a\", \"b\", \"c\"),\n                      \"var3\" = c(TRUE, FALSE, TRUE))\nmy_data\n\n  var1 var2  var3\n1    1    a  TRUE\n2    2    b FALSE\n3    3    c  TRUE"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#creating-a-data-frame-1",
    "href": "slides/04_lists-data-frames.html#creating-a-data-frame-1",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Creating a data frame",
    "text": "Creating a data frame\nIf you import or create numeric data as a matrix, you can also convert it easily using as.data.frame()\n\nmy_matrix &lt;- matrix(1:9, nrow = 3, ncol = 3)\nmy_matrix\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\nas.data.frame(my_matrix)\n\n  V1 V2 V3\n1  1  4  7\n2  2  5  8\n3  3  6  9"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#subsetting-data-frames",
    "href": "slides/04_lists-data-frames.html#subsetting-data-frames",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Subsetting data frames",
    "text": "Subsetting data frames\nWe can subset data frames using most of the tools we’ve learned about subsetting so far. We can use keys or indices.\n\nmy_data$var1\n\n[1] 1 2 3\n\nmy_data[\"var1\"]\n\n  var1\n1    1\n2    2\n3    3\n\nmy_data[[\"var1\"]]\n\n[1] 1 2 3"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#subsetting-data-frames-1",
    "href": "slides/04_lists-data-frames.html#subsetting-data-frames-1",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Subsetting data frames",
    "text": "Subsetting data frames\n\nmy_data[1]\n\n  var1\n1    1\n2    2\n3    3\n\nmy_data[[1]]\n\n[1] 1 2 3\n\nmy_data[, 1]\n\n[1] 1 2 3\n\nmy_data[1, ]\n\n  var1 var2 var3\n1    1    a TRUE"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#adding-to-a-data-frame",
    "href": "slides/04_lists-data-frames.html#adding-to-a-data-frame",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Adding to a data frame",
    "text": "Adding to a data frame\nWe can add to a data frame using rbind() and cbind(), but be careful with type mismatches! We can also add columns using the column index methods.\n\n# These all do the same thing\nmy_data &lt;- cbind(my_data, \"var4\" = c(3, 2, 1))\nmy_data$var4 &lt;- c(3, 2, 1)\nmy_data[, \"var4\"] &lt;- c(3, 2, 1)\nmy_data[[\"var4\"]] &lt;- c(3, 2, 1)\nmy_data\n\n  var1 var2  var3 var4\n1    1    a  TRUE    3\n2    2    b FALSE    2\n3    3    c  TRUE    1"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#adding-to-a-data-frame-1",
    "href": "slides/04_lists-data-frames.html#adding-to-a-data-frame-1",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Adding to a data frame",
    "text": "Adding to a data frame\n\nrbind(my_data, c(1, 2, 3, 4))\n\n  var1 var2 var3 var4\n1    1    a    1    3\n2    2    b    0    2\n3    3    c    1    1\n4    1    2    3    4\n\nrbind(my_data, list(4, \"d\", FALSE, 0))\n\n  var1 var2  var3 var4\n1    1    a  TRUE    3\n2    2    b FALSE    2\n3    3    c  TRUE    1\n4    4    d FALSE    0"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#investigating-a-data-frame",
    "href": "slides/04_lists-data-frames.html#investigating-a-data-frame",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Investigating a data frame",
    "text": "Investigating a data frame\nWe can use str() to see the structure of a data frame (or any other object!)\n\nmy_data2 &lt;- rbind(my_data, c(1, 2, 3, 4))\nstr(my_data2)\n\n'data.frame':   4 obs. of  4 variables:\n $ var1: num  1 2 3 1\n $ var2: chr  \"a\" \"b\" \"c\" \"2\"\n $ var3: num  1 0 1 3\n $ var4: num  3 2 1 4\n\nmy_data2 &lt;- rbind(my_data, list(4, \"d\", FALSE, 0))\nstr(my_data2)\n\n'data.frame':   4 obs. of  4 variables:\n $ var1: num  1 2 3 4\n $ var2: chr  \"a\" \"b\" \"c\" \"d\"\n $ var3: logi  TRUE FALSE TRUE FALSE\n $ var4: num  3 2 1 0"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#investigating-a-data-frame-1",
    "href": "slides/04_lists-data-frames.html#investigating-a-data-frame-1",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Investigating a data frame",
    "text": "Investigating a data frame\nMost data frames will have column names describing the variables. They can also include rownames, which we can add using rownames().\n\nrownames(my_data2) &lt;- c(\"Obs1\", \"Obs2\", \"Obs3\", \"Obs4\")\nmy_data2\n\n     var1 var2  var3 var4\nObs1    1    a  TRUE    3\nObs2    2    b FALSE    2\nObs3    3    c  TRUE    1\nObs4    4    d FALSE    0"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#example-data-frames-in-r",
    "href": "slides/04_lists-data-frames.html#example-data-frames-in-r",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Example data frames in R",
    "text": "Example data frames in R\nThere are plenty of free datasets available through R and its packages. If you haven’t already, run install.packages(\"palmerpenguins\") in your console. Then, we can load the penguins dataset.\n\n# load palmer penguins package\nlibrary(palmerpenguins)\n\n# open penguins data as a data frame\ndata(penguins)\npenguins &lt;- as.data.frame(penguins)"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#penguins-data",
    "href": "slides/04_lists-data-frames.html#penguins-data",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Penguins data",
    "text": "Penguins data\nWe can use the head function to look at the first several rows:\n\nhead(penguins)\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   &lt;NA&gt; 2007\n5 female 2007\n6   male 2007\n\n\n\nHow many columns are in this dataset?\nHow many rows are in this dataset?"
  },
  {
    "objectID": "slides/04_lists-data-frames.html#penguins-data-1",
    "href": "slides/04_lists-data-frames.html#penguins-data-1",
    "title": "MATH167R: Vectorized functions and lists",
    "section": "Penguins data",
    "text": "Penguins data\nUsing the $ operator, we can access individual columns.\n\npenguins$bill_length_mm\n\n  [1] 39.1 39.5 40.3   NA 36.7 39.3 38.9 39.2 34.1 42.0 37.8 37.8 41.1 38.6 34.6\n [16] 36.6 38.7 42.5 34.4 46.0 37.8 37.7 35.9 38.2 38.8 35.3 40.6 40.5 37.9 40.5\n [31] 39.5 37.2 39.5 40.9 36.4 39.2 38.8 42.2 37.6 39.8 36.5 40.8 36.0 44.1 37.0\n [46] 39.6 41.1 37.5 36.0 42.3 39.6 40.1 35.0 42.0 34.5 41.4 39.0 40.6 36.5 37.6\n [61] 35.7 41.3 37.6 41.1 36.4 41.6 35.5 41.1 35.9 41.8 33.5 39.7 39.6 45.8 35.5\n [76] 42.8 40.9 37.2 36.2 42.1 34.6 42.9 36.7 35.1 37.3 41.3 36.3 36.9 38.3 38.9\n [91] 35.7 41.1 34.0 39.6 36.2 40.8 38.1 40.3 33.1 43.2 35.0 41.0 37.7 37.8 37.9\n[106] 39.7 38.6 38.2 38.1 43.2 38.1 45.6 39.7 42.2 39.6 42.7 38.6 37.3 35.7 41.1\n[121] 36.2 37.7 40.2 41.4 35.2 40.6 38.8 41.5 39.0 44.1 38.5 43.1 36.8 37.5 38.1\n[136] 41.1 35.6 40.2 37.0 39.7 40.2 40.6 32.1 40.7 37.3 39.0 39.2 36.6 36.0 37.8\n[151] 36.0 41.5 46.1 50.0 48.7 50.0 47.6 46.5 45.4 46.7 43.3 46.8 40.9 49.0 45.5\n[166] 48.4 45.8 49.3 42.0 49.2 46.2 48.7 50.2 45.1 46.5 46.3 42.9 46.1 44.5 47.8\n[181] 48.2 50.0 47.3 42.8 45.1 59.6 49.1 48.4 42.6 44.4 44.0 48.7 42.7 49.6 45.3\n[196] 49.6 50.5 43.6 45.5 50.5 44.9 45.2 46.6 48.5 45.1 50.1 46.5 45.0 43.8 45.5\n[211] 43.2 50.4 45.3 46.2 45.7 54.3 45.8 49.8 46.2 49.5 43.5 50.7 47.7 46.4 48.2\n[226] 46.5 46.4 48.6 47.5 51.1 45.2 45.2 49.1 52.5 47.4 50.0 44.9 50.8 43.4 51.3\n[241] 47.5 52.1 47.5 52.2 45.5 49.5 44.5 50.8 49.4 46.9 48.4 51.1 48.5 55.9 47.2\n[256] 49.1 47.3 46.8 41.7 53.4 43.3 48.1 50.5 49.8 43.5 51.5 46.2 55.1 44.5 48.8\n[271] 47.2   NA 46.8 50.4 45.2 49.9 46.5 50.0 51.3 45.4 52.7 45.2 46.1 51.3 46.0\n[286] 51.3 46.6 51.7 47.0 52.0 45.9 50.5 50.3 58.0 46.4 49.2 42.4 48.5 43.2 50.6\n[301] 46.7 52.0 50.5 49.5 46.4 52.8 40.9 54.2 42.5 51.0 49.7 47.5 47.6 52.0 46.9\n[316] 53.5 49.0 46.2 50.9 45.5 50.9 50.8 50.1 49.0 51.5 49.8 48.1 51.4 45.7 50.7\n[331] 42.5 52.2 45.2 49.3 50.2 45.6 51.9 46.8 45.7 55.8 43.5 49.6 50.8 50.2"
  },
  {
    "objectID": "slides/16_debugging.html#overview-of-today",
    "href": "slides/16_debugging.html#overview-of-today",
    "title": "MATH167R: Debugging",
    "section": "Overview of today",
    "text": "Overview of today\n\nDebugging (based on Jennifer Bryan and Jim Hester’s What they Forgot to Teach You About R - Debugging R Code)"
  },
  {
    "objectID": "slides/16_debugging.html#step-1-look-online",
    "href": "slides/16_debugging.html#step-1-look-online",
    "title": "MATH167R: Debugging",
    "section": "Step 1: Look online",
    "text": "Step 1: Look online\nWhen you see an error code you don’t understand, search for it!\nSearch for the exact text of your error message (except for any references to filepaths, etc.).\nR has millions of users and an incredibly active online community. If you encounter any error message, chances are someone has had to debug that exact error in the past."
  },
  {
    "objectID": "slides/16_debugging.html#step-2-reset",
    "href": "slides/16_debugging.html#step-2-reset",
    "title": "MATH167R: Debugging",
    "section": "Step 2: Reset",
    "text": "Step 2: Reset\nMany, many issues will be solved by closing and re-opening R.\nSometimes, things get weird with your global environment, and you just need to start with a clean slate. It can be frustrating, because you don’t know what was causing the issue, but also a relief, because it will be fixed.\nResetting will:\n\nClear your workspace (better than rm(list = ls()!)\nReset your options to their defaults (an easy one to miss!)\nClear your search path (the order R looks for things)"
  },
  {
    "objectID": "slides/16_debugging.html#step-3-repeat",
    "href": "slides/16_debugging.html#step-3-repeat",
    "title": "MATH167R: Debugging",
    "section": "Step 3: Repeat",
    "text": "Step 3: Repeat\nWhen you encounter a bug, try to repeat it. Likely, it came about for a reason.\nWhen you do repeat it, you should repeat it with a minimal working example. This means you should remove as much code and simplify as much data as possible.\n\nSmall and simple inputs\nNo extraneous packages\nNo unnecessary function calls\n\nExample: did your function break with a large data matrix of real-world data stored within a package? How about if you just use a \\(3 \\times 3\\) matrix of \\(1\\)’s?"
  },
  {
    "objectID": "slides/16_debugging.html#step-4-locate",
    "href": "slides/16_debugging.html#step-4-locate",
    "title": "MATH167R: Debugging",
    "section": "Step 4: Locate",
    "text": "Step 4: Locate\nIf you weren’t able to fix a bug the “easy” way (found the solution on Google or just needed a reset), and you have a minimal working example demonstrating your bug, then you are ready for the really hard part: finding the bug.\nOften (not always), once you find a bug, it is rather easy to fix."
  },
  {
    "objectID": "slides/16_debugging.html#traceback-call-stack",
    "href": "slides/16_debugging.html#traceback-call-stack",
    "title": "MATH167R: Debugging",
    "section": "traceback(): call stack",
    "text": "traceback(): call stack\nSometimes functions(in functions(in functions(in functions(…)))) can get complicated.\nExercise: What will the following code return?\n\nf &lt;- function(a) g(a)\ng &lt;- function(b) h(b)\nh &lt;- function(c) i(c)\ni &lt;- function(d) {\n  if (!is.numeric(d)) {\n    stop(\"`d` must be numeric\", call. = FALSE)\n  }\n  d + 10\n}\nf(5)\n\n\n\n\n[1] 15"
  },
  {
    "objectID": "slides/16_debugging.html#traceback-call-stack-1",
    "href": "slides/16_debugging.html#traceback-call-stack-1",
    "title": "MATH167R: Debugging",
    "section": "traceback(): call stack",
    "text": "traceback(): call stack\nWhat about this code?\n\nf &lt;- function(a) g(a)\ng &lt;- function(b) h(b)\nh &lt;- function(c) i(c)\ni &lt;- function(d) {\n  if (!is.numeric(d)) {\n    stop(\"`d` must be numeric\", call. = FALSE)\n  }\n  d + 10\n}\nf(1:3)\n\n\n\n\n[1] 11 12 13"
  },
  {
    "objectID": "slides/16_debugging.html#traceback-call-stack-2",
    "href": "slides/16_debugging.html#traceback-call-stack-2",
    "title": "MATH167R: Debugging",
    "section": "traceback(): call stack",
    "text": "traceback(): call stack\nWhat about this code?\n\nf &lt;- function(a) g(a)\ng &lt;- function(b) h(b)\nh &lt;- function(c) i(c)\ni &lt;- function(d) {\n  if (!is.numeric(d)) {\n    stop(\"`d` must be numeric\", call. = FALSE)\n  }\n  d + 10\n}\nf(\"a\")\n\n\n\n\nError: `d` must be numeric\n\n\n\n\nWhy doesn’t it say 'a' must be numeric?"
  },
  {
    "objectID": "slides/16_debugging.html#traceback-call-stack-3",
    "href": "slides/16_debugging.html#traceback-call-stack-3",
    "title": "MATH167R: Debugging",
    "section": "traceback(): call stack",
    "text": "traceback(): call stack\n\ntraceback()\n\n5: stop(\"`d` must be numeric\", call. = FALSE) \n4: i(c) \n3: h(b) \n2: g(a) \n1: f(\"a\")"
  },
  {
    "objectID": "slides/16_debugging.html#traceback-call-stack-4",
    "href": "slides/16_debugging.html#traceback-call-stack-4",
    "title": "MATH167R: Debugging",
    "section": "traceback(): call stack",
    "text": "traceback(): call stack\nThis is called a call stack.\nRead from bottom to top:\n\nFirst call was to f(\"a\")\nSecond call was g(a)\nThird call was h(b)\nFourth call was i(c)\nFifth and last call was our error message, so we know i(c) triggered our error.\n\nWe now know that our error occurred within i(c), but we don’t know where within i(c) our error occurred."
  },
  {
    "objectID": "slides/16_debugging.html#traceback-call-stack-5",
    "href": "slides/16_debugging.html#traceback-call-stack-5",
    "title": "MATH167R: Debugging",
    "section": "traceback(): call stack",
    "text": "traceback(): call stack\nNote this is done in your Console, not your Editor pane. This is typically not a part of your reproducible workflow, this is you figuring out your own problems until you fix what actually belongs in your workflow.\nOnce you have the bug fixed, then put the debugged code in your Editor pane. In general, most debugging will be done through the Console."
  },
  {
    "objectID": "slides/16_debugging.html#print-cat-str-messages",
    "href": "slides/16_debugging.html#print-cat-str-messages",
    "title": "MATH167R: Debugging",
    "section": "print(), cat(), str(): messages",
    "text": "print(), cat(), str(): messages\nUse print() statements to test out print() statements to see the values used during execution.\n\ni &lt;- function(d) {\n  print(d)\n  if (!is.numeric(d)) {\n    stop(\"`d` must be numeric\", call. = FALSE)\n  }\n  d + 10\n}\nf(\"a\")\n\n[1] \"a\"\n\n\nError: `d` must be numeric\n\n\n\nThis is a quick and easy way to find bugs quickly. Probably the most common first step when manually debugging."
  },
  {
    "objectID": "slides/16_debugging.html#print-cat-str-messages-1",
    "href": "slides/16_debugging.html#print-cat-str-messages-1",
    "title": "MATH167R: Debugging",
    "section": "print(), cat(), str(): messages",
    "text": "print(), cat(), str(): messages\nTake your function, throw in a cat() statement to see what the function is seeing.\n\ni &lt;- function(d) {\n  cat(\"The value of input parameter d is:\", d, \"\\n\")\n  cat(\"The class of input parameter d is:\", class(d), \"\\n\")\n  if (!is.numeric(d)) {\n    stop(\"`d` must be numeric\", call. = FALSE)\n  }\n  d + 10\n}\nf(\"a\")\n\nThe value of input parameter d is: a \nThe class of input parameter d is: character \n\n\nError: `d` must be numeric"
  },
  {
    "objectID": "slides/16_debugging.html#print-cat-str-messages-2",
    "href": "slides/16_debugging.html#print-cat-str-messages-2",
    "title": "MATH167R: Debugging",
    "section": "print(), cat(), str(): messages",
    "text": "print(), cat(), str(): messages\nWe can similarly use str():\n\ni &lt;- function(d) {\n  str(d)\n  if (!is.numeric(d)) {\n    stop(\"`d` must be numeric\", call. = FALSE)\n  }\n  d + 10\n}\nf(\"a\")\n\n chr \"a\"\n\n\nError: `d` must be numeric\n\n\nMore specifically, str() can be used to see the structure of what the function is seeing. This can often be more informative if the structure is not what you expect (a common source of bugs)."
  },
  {
    "objectID": "slides/16_debugging.html#print-cat-str-messages-3",
    "href": "slides/16_debugging.html#print-cat-str-messages-3",
    "title": "MATH167R: Debugging",
    "section": "print(), cat(), str(): messages",
    "text": "print(), cat(), str(): messages\nThe main downside to these approaches is that it can get messy quickly if you use multiple print statements, and you cannot further investigate the object. However, many bugs come down to typos or other trivial errors, and print statements are often all you need."
  },
  {
    "objectID": "slides/16_debugging.html#browser-interactive-debugger",
    "href": "slides/16_debugging.html#browser-interactive-debugger",
    "title": "MATH167R: Debugging",
    "section": "browser(): Interactive debugger",
    "text": "browser(): Interactive debugger\nSometimes, it may not be enough to just use print statements and locate a bug. You can get more information and interact with that information using browser(), an interactive debugger.\nWithin RStudio, you can also get right to an interactive debugger by clicking Rerun with Debug."
  },
  {
    "objectID": "slides/16_debugging.html#browser-interactive-debugger-1",
    "href": "slides/16_debugging.html#browser-interactive-debugger-1",
    "title": "MATH167R: Debugging",
    "section": "browser(): Interactive debugger",
    "text": "browser(): Interactive debugger\nAlternatively, we can plug browser() into our function, as with the print statements.\n\ni &lt;- function(d) {\n  browser()\n  if (!is.numeric(d)) {\n    stop(\"`d` must be numeric\", call. = FALSE)\n  }\n  d + 10\n}\nf(\"a\")\n\nCalled from: i(c)\ndebug at &lt;text&gt;#3: if (!is.numeric(d)) {\n    stop(\"`d` must be numeric\", call. = FALSE)\n}\ndebug at &lt;text&gt;#4: stop(\"`d` must be numeric\", call. = FALSE)\n\n\nError: `d` must be numeric"
  },
  {
    "objectID": "slides/16_debugging.html#browser-interactive-debugger-2",
    "href": "slides/16_debugging.html#browser-interactive-debugger-2",
    "title": "MATH167R: Debugging",
    "section": "browser(): Interactive debugger",
    "text": "browser(): Interactive debugger\nAfter you run a function with browser(), you will be inside of your function with an interactive debugger.\nYou will know it worked if you see a special prompt: Browse[1]&gt;.\nWe can see:\n\nThe environment within the function using the Environment pane\nThe call stack using the new Traceback pane\nSpecial interactive debugging commands"
  },
  {
    "objectID": "slides/16_debugging.html#interactive-debugging-commands",
    "href": "slides/16_debugging.html#interactive-debugging-commands",
    "title": "MATH167R: Debugging",
    "section": "Interactive debugging commands",
    "text": "Interactive debugging commands\n\nNext, n: executes the next step in the function. (If you have a variable named n, use print(n) to display its value.)\nStep into works like next, but if the next step is a function, it will step into that function so you can explore it interactively. (Easy to get lost!)\nFinish, or f: finishes execution of the current loop or function. Useful to skip over long for loops you don’t need to interact with.\nContinue, c: leaves the debugger and continues execution of the function. Useful if you’ve fixed the bad state and want to check that the function proceeds correctly.\nStop, Q: exits the debugger and returns to the R prompt."
  },
  {
    "objectID": "slides/16_debugging.html#interactive-debugging-commands-1",
    "href": "slides/16_debugging.html#interactive-debugging-commands-1",
    "title": "MATH167R: Debugging",
    "section": "Interactive debugging commands",
    "text": "Interactive debugging commands\n\nEnter (no text): repeat the previous interactive debugging command. Defaults to Next n if you haven’t used any debugging commands yet.\nwhere: prints stack trace of active calls (the interactive equivalent of traceback)."
  },
  {
    "objectID": "slides/16_debugging.html#other-useful-things-to-do",
    "href": "slides/16_debugging.html#other-useful-things-to-do",
    "title": "MATH167R: Debugging",
    "section": "Other useful things to do",
    "text": "Other useful things to do\n\nls(): List the current environment. You can use this to browse everything that the function is able to see at that moment.\nstr(), print(): examine objects as the function sees them."
  },
  {
    "objectID": "slides/16_debugging.html#a-warning",
    "href": "slides/16_debugging.html#a-warning",
    "title": "MATH167R: Debugging",
    "section": "A warning",
    "text": "A warning\nIf you execute the step of a function where the error occurs, you will exit interactive debugging mode, the error message will print, and you will be returned to the R prompt.\nThis can get annoying, because it stops you from interacting right when you hit the bug.\nStrategy: * Call browser() and execute until you hit the error. Remember exactly where it occurs. * Call browser() again and execute again, stopping just before triggering the error. * You can copy and paste the next line of code into the Browse console to trigger the error without exiting the interactive debugger."
  },
  {
    "objectID": "slides/16_debugging.html#tips",
    "href": "slides/16_debugging.html#tips",
    "title": "MATH167R: Debugging",
    "section": "Tips",
    "text": "Tips\n\nWithin the debugging section, you are interacting with the exact environment R is using before the error is triggered.\nExamine each object one-by-one in the environment to make sure the structure matches expectations.\nIf you still can’t figure it out, s “Step into” the next function and repeat this process.\n\n# BROWSER DEMO 2\nloop_fun &lt;- function(x) {\n  # browser()\n  n &lt;- length(x)\n  y &lt;- rep(NA, n)\n  z &lt;- rep(NA, n)\n  for (i in 1:n) {\n    y[i] &lt;- x[i] * 2\n    z[i] &lt;- y[i] * 2\n  }\n  return(list(\"y\" = y, \"z\" = z))\n}\nloop_fun(1:5)\nloop_fun(diag(1:5))\n\nloop_fun &lt;- function(x) {\n  # browser()\n  n &lt;- length(x)\n  y &lt;- rep(NA, n)\n  z &lt;- rep(NA, n)\n  for (i in 1:n) {\n    y[i] &lt;- x[i] * 2\n    z[i] &lt;- y[i] * 2\n  }\n  return(list(\"y\" = y, \"z\" = z))\n}\nloop_fun(1:5)\n\n$y\n[1]  2  4  6  8 10\n\n$z\n[1]  4  8 12 16 20\n\nloop_fun(diag(1:5))\n\n$y\n [1]  2  0  0  0  0  0  4  0  0  0  0  0  6  0  0  0  0  0  8  0  0  0  0  0 10\n\n$z\n [1]  4  0  0  0  0  0  8  0  0  0  0  0 12  0  0  0  0  0 16  0  0  0  0  0 20"
  },
  {
    "objectID": "slides/16_debugging.html#debugging-summary",
    "href": "slides/16_debugging.html#debugging-summary",
    "title": "MATH167R: Debugging",
    "section": "Debugging Summary",
    "text": "Debugging Summary\n1. Search online.\n2. Reset.\n3. Repeat.\n4. Locate:\n\nCall stack: traceback()\nNon-interactive messages: print(), cat(), str()\nInteractive debugging: browser(), debug(), debugonce(), trace()"
  },
  {
    "objectID": "slides/16_debugging.html#debugging-resources",
    "href": "slides/16_debugging.html#debugging-resources",
    "title": "MATH167R: Debugging",
    "section": "Debugging Resources",
    "text": "Debugging Resources\n\nAdvanced R Debugging - Hadley Wickham\nWhat they Forgot to Teach You About R - Jennifer Bryan and Jim Hester\nDebugging Techniques in RStudio - Amanda Gadrow\nDebugging with RStudio Article - Jonathan McPherson\nIntroduction to debugging in R and RStudio - Jim Hester\nCheatsheet"
  },
  {
    "objectID": "slides/17_data-analysis-functions.html#overview-of-today",
    "href": "slides/17_data-analysis-functions.html#overview-of-today",
    "title": "MATH167R: Programming for data analysis",
    "section": "Overview of today",
    "text": "Overview of today\n\nProgramming for data science\nFunctions for data analysis\nFunctional R programming with apply, lapply, mapply\nWorking with APIs\nWeb scraping"
  },
  {
    "objectID": "slides/17_data-analysis-functions.html#programming-for-data-science",
    "href": "slides/17_data-analysis-functions.html#programming-for-data-science",
    "title": "MATH167R: Programming for data analysis",
    "section": "Programming for data science",
    "text": "Programming for data science\nIn the first half of the semester, we covered skills for exploratory data analysis: visualization and descriptive statistics.\nToday, we’ll combine those skills with programming concepts."
  },
  {
    "objectID": "slides/17_data-analysis-functions.html#motivating-example",
    "href": "slides/17_data-analysis-functions.html#motivating-example",
    "title": "MATH167R: Programming for data analysis",
    "section": "Motivating example",
    "text": "Motivating example\nEach week,"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#warm-up",
    "href": "slides/03_functions-vectors-matrices.html#warm-up",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Warm-up",
    "text": "Warm-up\nDiscuss the following lines of code. What do they do?\n\nx &lt;- TRUE\ny &lt;- 3 &gt; 4\nx &lt;- x & y\nas.numeric(x)\n\n\nAnswer:\n\nx &lt;- TRUE\ny &lt;- 3 &gt; 4\nx &lt;- x & y\nas.numeric(x)\n\n[1] 0"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#overview-of-today",
    "href": "slides/03_functions-vectors-matrices.html#overview-of-today",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Overview of today",
    "text": "Overview of today\n\nFunctions and arguments\nVectors and matrices\nIndexing data"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#functions",
    "href": "slides/03_functions-vectors-matrices.html#functions",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Functions",
    "text": "Functions\n\n“To understand computations in R, two slogans are helpful: Everything that exists is an object. Everything that happens is a function call.”\n(Chambers, 2014)\n\nWe have already seen some functions, including the sample function:\n\nsides &lt;- 1:6\nrolls &lt;- sample(sides, 10, replace = T)\n\nand the typeof function:\n\nx &lt;- T\ntypeof(x)\n\n[1] \"logical\"\n\n\nFunctions provide code to execute some task given a set of inputs."
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#functions-1",
    "href": "slides/03_functions-vectors-matrices.html#functions-1",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Functions",
    "text": "Functions\nA function call is a command to execute the code of a function:\nfunction_name(argument1, argument2, ...)\nArguments or parameters are expressions/values that are the inputs to the function.\n\nexp(-1)\n\n[1] 0.3678794\n\nexp(0)\n\n[1] 1\n\n\nThe parentheses following the name of a function are still required even when there are no arguments:\n\nls()"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#functions-2",
    "href": "slides/03_functions-vectors-matrices.html#functions-2",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Functions",
    "text": "Functions\nWhenever you are using a function for the first time, it is good idea to access the documentation by typing ?function_name into the console.\n\n?exp"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#specifying-arguments",
    "href": "slides/03_functions-vectors-matrices.html#specifying-arguments",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Specifying arguments",
    "text": "Specifying arguments\nA formal argument is a named argument that is used in the code of a function.\nThe function args displays the formal arguments:\n\nargs(sample)\n\nfunction (x, size, replace = FALSE, prob = NULL) \nNULL\n\n\nAn actual argument t is the value specified by the user during a function call:\n\nsides &lt;- c(\"H\", \"T\")\nsample(x = sides, size = 1, replace = T)\n\n[1] \"H\""
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#matching-arguments",
    "href": "slides/03_functions-vectors-matrices.html#matching-arguments",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Matching arguments",
    "text": "Matching arguments\nThe two most common ways to specify arguments are positional and exact:\n\nPositional: the actual arguments are matched to the formal arguments in order:\n\n\nsample(sides, 1, T)\n\n[1] \"T\"\n\nsample(1, T, sides)\n\nError in sample.int(x, size, replace, prob): invalid 'replace' argument\n\n\n\nExact: the actual arguments are matched to the formal arguments using names:\n\n\nsample(size = 1, replace = T, x = sides)\n\n[1] \"H\""
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#check-your-understanding-functions",
    "href": "slides/03_functions-vectors-matrices.html#check-your-understanding-functions",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Check your understanding: functions",
    "text": "Check your understanding: functions\nHow can we use functions to compute (feel free to look online):\n\n\\(\\ln 10\\)\n\\(\\log_{10} 10\\)\n\n\nAnswer:\n\nlog(10)\n\n[1] 2.302585\n\nlog10(10)\n\n[1] 1"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#atomic-vectors",
    "href": "slides/03_functions-vectors-matrices.html#atomic-vectors",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Atomic Vectors",
    "text": "Atomic Vectors\n\nLast class, we introduced atomic vectors, but we only considered vectors of length one.\nGenerally, atomic vectors are sets of elements of the same type.\nWe create vectors using the function c()\n\nc(16, 3, 0, 7, -2)\n\n[1] 16  3  0  7 -2"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#accessing-elements-of-vectors",
    "href": "slides/03_functions-vectors-matrices.html#accessing-elements-of-vectors",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Accessing elements of vectors",
    "text": "Accessing elements of vectors\n\nWe index vectors using [index] after the vector name:\n\nx &lt;- c(16, 3, 0, 7, -2)\nx[3]\n\n[1] 0\n\nx[4]\n\n[1] 7\n\n\nIf we use a negative index, we return the vector with that element removed\n\nx[-4]\n\n[1] 16  3  0 -2"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#atomic-vectors-and-data-types",
    "href": "slides/03_functions-vectors-matrices.html#atomic-vectors-and-data-types",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Atomic vectors and data types",
    "text": "Atomic vectors and data types\nNote that atomic vectors can only have one type of data. So the following lines work:\n\nx &lt;- c(1, 2, 3)\ny &lt;- c(\"a\", \"b\", \"c\")\nz &lt;- c(T, F, T)\n\n\nbut when we try\n\nc(1, \"b\", 3)\n\n[1] \"1\" \"b\" \"3\"\n\n\nR will force the elements in our vector to be of the same type! This is a common source of bugs."
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#check-your-understanding-vectors",
    "href": "slides/03_functions-vectors-matrices.html#check-your-understanding-vectors",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Check your understanding: vectors",
    "text": "Check your understanding: vectors\nWhat do you expect the output of the following chunk to be?\n\nx &lt;- c(1, 2, 3)\ny &lt;- c(\"a\", \"b\", \"c\")\nc(x, y)\n\n\nAnswer:\n\nx &lt;- c(1, 2, 3)\ny &lt;- c(\"a\", \"b\", \"c\")\nc(x, y)\n\n[1] \"1\" \"2\" \"3\" \"a\" \"b\" \"c\"\n\n\nWe can use the c() function to concatenate vectors (forcing elements to be the same type)."
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#check-your-understanding-vectors-1",
    "href": "slides/03_functions-vectors-matrices.html#check-your-understanding-vectors-1",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Check your understanding: vectors",
    "text": "Check your understanding: vectors\nWhat do you expect the output of the following chunk to be?\n\nx &lt;- c(3 &gt; 4, T, 5 &gt; 6)\nx[3]\n\n\nAnswer:\n\nx &lt;- c(3 &gt; 4, T, 5 &gt; 6)\nx[3]\n\n[1] FALSE\n\n\nR evaluates expressions when creating vectors."
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#useful-functions-for-vectors",
    "href": "slides/03_functions-vectors-matrices.html#useful-functions-for-vectors",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Useful functions for vectors",
    "text": "Useful functions for vectors\n\nmax(), min(), mean(), median(), sum(), sd(), var()\nlength() returns the number of elements in the vector\nhead() and tail() return the beginning and end vectors\nsort() will sort\nsummary() returns a 5-number summary\nany() and all() to check conditions on Boolean vectors\nhist() will return a crude histogram (we’ll learn how to make this nicer later)\n\nIf you are unclear about what any of them do, use ? before the function name to read the documentation. You should get in the habit of checking function documentation a lot!"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#generating-vectors",
    "href": "slides/03_functions-vectors-matrices.html#generating-vectors",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Generating vectors",
    "text": "Generating vectors\nThe notation a:b generates integers starting at a and ending at b.\n\n1:6\n\n[1] 1 2 3 4 5 6\n\n\nThe rep function repeats values of the first argument.\n\nrep(\"Hello\", times = 3)\n\n[1] \"Hello\" \"Hello\" \"Hello\"\n\n\nThe rnorm function randomly generates n elements with the specified mean and sd.\n\nrnorm(n = 10, mean = 1, sd = 1)\n\n [1]  0.5685811  2.3764760  0.5958275  0.1057296  0.3593342  1.6830647\n [7]  1.3369043  1.2756476 -0.2531414  0.4183426"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#matrices-1",
    "href": "slides/03_functions-vectors-matrices.html#matrices-1",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Matrices",
    "text": "Matrices\n\nMatrices are two-dimensional extensions of vectors: they have rows and columns\nWe can create a matrix using the function matrix()\n\n\nx &lt;- c(1, 2, 3, 4, 5)\ny &lt;- c(5, 4, 3, 2, 1)\nmy_matrix &lt;- matrix(c(x, y), nrow = 2, ncol = 5, byrow = TRUE)\nmy_matrix\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    5    4    3    2    1"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#constructing-matrices",
    "href": "slides/03_functions-vectors-matrices.html#constructing-matrices",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Constructing matrices",
    "text": "Constructing matrices\n\n# Note: byrow = FALSE is the default\nmy_matrix2 &lt;- matrix(c(x, y), nrow = 2, ncol = 5)\nmy_matrix2\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    4    2\n[2,]    2    4    5    3    1\n\n\nWarning: be careful not to call your matrix matrix! Why not?"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#constructing-matrices-1",
    "href": "slides/03_functions-vectors-matrices.html#constructing-matrices-1",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Constructing matrices",
    "text": "Constructing matrices\nWe can also generate matrices by column binding (cbind()) and row binding (rbind()) vectors\n\ncbind(x, y)\n\n     x y\n[1,] 1 5\n[2,] 2 4\n[3,] 3 3\n[4,] 4 2\n[5,] 5 1\n\nrbind(x, y)\n\n  [,1] [,2] [,3] [,4] [,5]\nx    1    2    3    4    5\ny    5    4    3    2    1"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#indexing-and-subsetting-matrices",
    "href": "slides/03_functions-vectors-matrices.html#indexing-and-subsetting-matrices",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Indexing and Subsetting Matrices",
    "text": "Indexing and Subsetting Matrices\nIndexing a matrix is similar to indexing a vector, except we must index both the row and column, in that order.\n\nmy_matrix\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    5    4    3    2    1\n\n\nWhat is the output of the following line?\n\nmy_matrix[2, 3]\n\n\n\n\n[1] 3\n\n\n\n\nWhat is the output of the following line?\n\nmy_matrix[2, c(1, 3, 5)]\n\n\n\n\n\n[1] 5 3 1"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#dropping-entries",
    "href": "slides/03_functions-vectors-matrices.html#dropping-entries",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Dropping entries",
    "text": "Dropping entries\nAlso similarly to vectors, we can subset using a negative index.\n\nmy_matrix\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    5    4    3    2    1\n\nmy_matrix[-2, -4]\n\n[1] 1 2 3 5\n\n# Note: Leaving an index blank includes all indices\nmy_matrix[, -c(1, 3, 4, 5)]\n\n[1] 2 4"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#dropping-entries-1",
    "href": "slides/03_functions-vectors-matrices.html#dropping-entries-1",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Dropping entries",
    "text": "Dropping entries\n\nmy_matrix[, -c(1, 3, 4, 5)]\n\n[1] 2 4\n\nis.matrix(my_matrix[, -c(1, 3, 4, 5)])\n\n[1] FALSE\n\n\nWhat happened here? When subsetting a matrix reduces one dimension to length 1, R automatically coerces it into a vector. We can prevent this by including drop = FALSE.\n\nmy_matrix[, -c(1, 3, 4, 5), drop = FALSE]\n\n     [,1]\n[1,]    2\n[2,]    4\n\nis.matrix(my_matrix[, -c(1, 3, 4, 5), drop = FALSE])\n\n[1] TRUE"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#filling-in-a-matrix",
    "href": "slides/03_functions-vectors-matrices.html#filling-in-a-matrix",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Filling in a Matrix",
    "text": "Filling in a Matrix\nWe can also fill in an empty matrix using indices. In R, you should always start by initializing an empty matrix of the right size.\n\nmy_results &lt;- matrix(NA, nrow = 3, ncol = 3)\nmy_results\n\n     [,1] [,2] [,3]\n[1,]   NA   NA   NA\n[2,]   NA   NA   NA\n[3,]   NA   NA   NA"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#filling-in-a-matrix-1",
    "href": "slides/03_functions-vectors-matrices.html#filling-in-a-matrix-1",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Filling in a Matrix",
    "text": "Filling in a Matrix\nThen I can replace a single row (or column) using indices as follows.\n\nmy_results[2, ] &lt;- c(2, 4, 3)\nmy_results\n\n     [,1] [,2] [,3]\n[1,]   NA   NA   NA\n[2,]    2    4    3\n[3,]   NA   NA   NA\n\n\nWe can also fill in multiple rows (or columns) at once. (Likewise, we can also do subsets of rows/columns, or unique entries). Note that recycling applies here.\n\nmy_results[c(1, 3), ] &lt;- 7\nmy_results\n\n     [,1] [,2] [,3]\n[1,]    7    7    7\n[2,]    2    4    3\n[3,]    7    7    7"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#matrix-data-types",
    "href": "slides/03_functions-vectors-matrices.html#matrix-data-types",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Matrix Data Types",
    "text": "Matrix Data Types\nMatrices, like vectors, can only have entries of one type.\n\nrbind(c(1, 2, 3), c(\"a\", \"b\", \"c\"))\n\n     [,1] [,2] [,3]\n[1,] \"1\"  \"2\"  \"3\" \n[2,] \"a\"  \"b\"  \"c\""
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#matrix-functions",
    "href": "slides/03_functions-vectors-matrices.html#matrix-functions",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Matrix functions",
    "text": "Matrix functions\nLet’s create 3 matrices for the purposes of demonstrating matrix functions.\n\nmat1 &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE)\nmat1\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\nmat2 &lt;- matrix(1:6, nrow = 3, ncol = 2)\nmat2\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\n\nmat3 &lt;- matrix(5:10, nrow = 2, ncol = 3, byrow = TRUE)\nmat3\n\n     [,1] [,2] [,3]\n[1,]    5    6    7\n[2,]    8    9   10"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#matrix-functions-1",
    "href": "slides/03_functions-vectors-matrices.html#matrix-functions-1",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Matrix functions",
    "text": "Matrix functions\nMatrix Sums +\n\nmat1 + mat3\n\n     [,1] [,2] [,3]\n[1,]    6    8   10\n[2,]   12   14   16\n\n\nElement-wise Matrix Multiplication *\n\nmat1 * mat3\n\n     [,1] [,2] [,3]\n[1,]    5   12   21\n[2,]   32   45   60\n\n\nMatrix Multiplication %*%\n\nmat_square &lt;- mat1 %*% mat2\nmat_square\n\n     [,1] [,2]\n[1,]   14   32\n[2,]   32   77"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#matrix-functions-2",
    "href": "slides/03_functions-vectors-matrices.html#matrix-functions-2",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Matrix functions",
    "text": "Matrix functions\nColumn Bind Matrices cbind()\n\ncbind(mat1, mat3)\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    1    2    3    5    6    7\n[2,]    4    5    6    8    9   10\n\n\nTranspose t()\n\nt(mat1)\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nColumn Sums colSums()\n\ncolSums(mat1)\n\n[1] 5 7 9\n\n\nRow Sums rowSums()\n\nrowSums(mat1)\n\n[1]  6 15"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#matrix-functions-3",
    "href": "slides/03_functions-vectors-matrices.html#matrix-functions-3",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Matrix functions",
    "text": "Matrix functions\nColumn Means colMeans()\n\ncolMeans(mat1)\n\n[1] 2.5 3.5 4.5\n\n\nRow Means rowMeans()\n\nrowMeans(mat1)\n\n[1] 2 5\n\n\nDimensions dim()\n\ndim(mat1)\n\n[1] 2 3"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#matrix-functions-4",
    "href": "slides/03_functions-vectors-matrices.html#matrix-functions-4",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Matrix functions",
    "text": "Matrix functions\nDeterminant det()\n\ndet(mat_square)\n\n[1] 54\n\n\nMatrix Inverse solve()\n\nsolve(mat_square)\n\n           [,1]       [,2]\n[1,]  1.4259259 -0.5925926\n[2,] -0.5925926  0.2592593\n\n\nMatrix Diagonal diag()\n\ndiag(mat_square)\n\n[1] 14 77"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#what-is-a-comment",
    "href": "slides/03_functions-vectors-matrices.html#what-is-a-comment",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "What is a comment?",
    "text": "What is a comment?\n\nComputers completely ignore comments (in R, any line preceded by #)\nComments do not impact the functionality of your code at all."
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#so-why-do-them",
    "href": "slides/03_functions-vectors-matrices.html#so-why-do-them",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "So why do them…",
    "text": "So why do them…\n\nCommenting a code allows you to write notes for readers of your code only\nUsually, that reader is you!\nCoding without comments is ill-advised, bordering on impossible\nSneak peak at functions…"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#example",
    "href": "slides/03_functions-vectors-matrices.html#example",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Example",
    "text": "Example\n\n#' Wald-type t test\n#' @param mod an object of class \\code{bbdml}\n#' @return Matrix with wald test statistics and p-values. Univariate tests only.\nwaldt &lt;- function(mod) {\n  # Covariance matrix\n  covMat &lt;- try(chol2inv(chol(hessian(mod))), silent = TRUE)\n  if (class(covMat) == \"try-error\") {\n    warning(\"Singular Hessian! Cannot calculate p-values in this setting.\")\n    np &lt;- length(mod$param)\n    se &lt;- tvalue &lt;- pvalue &lt;- rep(NA, np)\n  } else {\n    # Standard errors\n    se &lt;- sqrt(diag(covMat))\n    # test statistic\n    tvalue &lt;- mod$param/se\n    # P-value\n    pvalue &lt;- 2*stats::pt(-abs(tvalue), mod$df.residual)\n  }\n  # make table\n  coef.table &lt;- cbind(mod$param, se, tvalue, pvalue)\n  dimnames(coef.table) &lt;- list(names(mod$param),\n                               c(\"Estimate\", \"Std. Error\", \"t value\", \"Pr(&gt;|t|)\"))\n  return(coef.table)\n}"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#comment-style-guide",
    "href": "slides/03_functions-vectors-matrices.html#comment-style-guide",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Comment Style Guide",
    "text": "Comment Style Guide\n\nWhen starting out, you should comment most lines\nFrequent use of comments should allow most comments to be restricted to one line for readability\nA comment should go above its corresponding line, be indented equally with the next line, and use a single # to mark a comment\nUse a string of - or = to break your code into easily noticeable chunks\n\nExample: # Data Manipulation -----------\nRStudio allows you to collapse chunks marked like this to help with clutter"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#comment-style-guide-1",
    "href": "slides/03_functions-vectors-matrices.html#comment-style-guide-1",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Comment Style Guide",
    "text": "Comment Style Guide\n\nThere are exceptions to every rule! Usually, comments are to help you!\n\nExample of breaking rules\n\nHere’s a snippet of a long mathematical function (lots of code omitted with ellipses for space).\nCode is divided into major steps marked by easily visible comments"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#example-of-breaking-rules-1",
    "href": "slides/03_functions-vectors-matrices.html#example-of-breaking-rules-1",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Example of breaking rules",
    "text": "Example of breaking rules\n\nobjfun &lt;- function(theta, W, M, X, X_star, np, npstar, link, phi.link) {\n\n  ### STEP 1 - Negative Log-likelihood\n\n  # extract matrix of betas (np x 1), first np entries\n  b      &lt;- utils::head(theta, np)\n  # extract matrix of beta stars (npstar x 1), last npstar entries\n  b_star &lt;- utils::tail(theta, npstar)\n\n  ...\n\n  ### STEP 2 - Gradient\n\n  # define gam\n  gam &lt;- phi/(1 - phi)"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#a-final-plea",
    "href": "slides/03_functions-vectors-matrices.html#a-final-plea",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "A final plea",
    "text": "A final plea\n\nBeing a successful programmer requires commenting your code\nWant to understand code you wrote &gt;24 hours ago without comments?"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#who-are-you-to-tell-me-how-to-type",
    "href": "slides/03_functions-vectors-matrices.html#who-are-you-to-tell-me-how-to-type",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Who are you to tell me how to type?",
    "text": "Who are you to tell me how to type?\nWe will be using a mix of the Tidyverse Style Guide by Hadley Wickham and the Google Style Guide. Please see the links for details, but I will summarize some main points here and throughout the class as we learn more functionality, such as functions and packages.\nYou may be graded on following good code style!"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#object-names",
    "href": "slides/03_functions-vectors-matrices.html#object-names",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Object Names",
    "text": "Object Names\nUse either underscores (_) or big camel case (BigCamelCase) to separate words within an object name. Do not use dots . to separate words in R functions!\n\n# Good\nday_one\nday_1\nDayOne\n\n# Bad\ndayone"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#object-names-1",
    "href": "slides/03_functions-vectors-matrices.html#object-names-1",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Object Names",
    "text": "Object Names\nNames should be concise, meaningful, and (generally) nouns.\n\n# Good\nday_one\n\n# Bad\nfirst_day_of_the_month\ndjm1"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#object-names-2",
    "href": "slides/03_functions-vectors-matrices.html#object-names-2",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Object Names",
    "text": "Object Names\nIt is very important that object names do not write over common functions!\n\n# Very extra super bad\nc &lt;- 7\nt &lt;- 23\nT &lt;- FALSE\nmean &lt;- \"something\"\n\nNote: T and F are R shorthand for TRUE and FALSE, respectively. In general, spell them out to be as clear as possible."
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#spacing",
    "href": "slides/03_functions-vectors-matrices.html#spacing",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Spacing",
    "text": "Spacing\nPut a space after every comma, just like in English writing.\n\n# Good\nx[, 1]\n\n# Bad\nx[,1]\nx[ ,1]\nx[ , 1]\n\nDo not put spaces inside or outside parentheses for regular function calls.\n\n# Good\nmean(x, na.rm = TRUE)\n\n# Bad\nmean (x, na.rm = TRUE)\nmean( x, na.rm = TRUE )"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#spacing-with-operators",
    "href": "slides/03_functions-vectors-matrices.html#spacing-with-operators",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Spacing with Operators",
    "text": "Spacing with Operators\nMost of the time when you are doing math, conditionals, logicals, or assignment, your operators should be surrounded by spaces. (e.g. for ==, +, -, &lt;-, etc.)\n\n# Good\nheight &lt;- (feet * 12) + inches\nmean(x, na.rm = 10)\n\n# Bad\nheight&lt;-feet*12+inches\nmean(x, na.rm=10)\n\nThere are some exceptions we will learn more about later, such as the power symbol ^. See the Tidyverse Style Guide for more details!"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#extra-spacing",
    "href": "slides/03_functions-vectors-matrices.html#extra-spacing",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Extra Spacing",
    "text": "Extra Spacing\nAdding extra spaces ok if it improves alignment of = or &lt;-.\n\n# Good\nlist(\n  total = a + b + c,\n  mean  = (a + b + c) / n\n)\n\n# Also fine\nlist(\n  total = a + b + c,\n  mean = (a + b + c) / n\n)"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#long-lines-of-code",
    "href": "slides/03_functions-vectors-matrices.html#long-lines-of-code",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Long Lines of Code",
    "text": "Long Lines of Code\nStrive to limit your code to 80 characters per line. This fits comfortably on a printed page with a reasonably sized font.\nIf a function call is too long to fit on a single line, use one line each for the function name, each argument, and the closing ). This makes the code easier to read and to change later.\n\n# Good\ndo_something_very_complicated(\n  something = \"that\",\n  requires = many,\n  arguments = \"some of which may be long\"\n)\n\n# Bad\ndo_something_very_complicated(\"that\", requires, many, arguments,\n                              \"some of which may be long\"\n                              )\n\nTip! Try RStudio &gt; Preferences &gt; Code &gt; Display &gt; Show Margin with Margin column 80 to give yourself a visual cue!"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#assignment",
    "href": "slides/03_functions-vectors-matrices.html#assignment",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Assignment",
    "text": "Assignment\nWe use &lt;- instead of = for assignment. This is moderately controversial if you find yourself in the right (wrong?) communities.\n\n# Good\nx &lt;- 5\n\n# Bad\nx = 5"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#semicolons",
    "href": "slides/03_functions-vectors-matrices.html#semicolons",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Semicolons",
    "text": "Semicolons\nIn R, semi-colons (;) are used to execute pieces of R code on a single line. In general, this is bad practice and should be avoided. Also, you never need to end lines of code with semi-colons!\n\n# Bad\na &lt;- 2; b &lt;- 3\n\n# Also bad\na &lt;- 2;\nb &lt;- 3;\n\n# Good\na &lt;- 2\nb &lt;- 3"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#quotes-and-strings",
    "href": "slides/03_functions-vectors-matrices.html#quotes-and-strings",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Quotes and Strings",
    "text": "Quotes and Strings\nUse \", not ', for quoting text. The only exception is when the text already contains double quotes and no single quotes.\n\n# Bad\n'Text'\n'Text with \"double\" and \\'single\\' quotes'\n\n# Good\n\"Text\"\n'Text with \"quotes\"'\n'&lt;a href=\"http://style.tidyverse.org\"&gt;A link&lt;/a&gt;'"
  },
  {
    "objectID": "slides/03_functions-vectors-matrices.html#check-in-2",
    "href": "slides/03_functions-vectors-matrices.html#check-in-2",
    "title": "MATH167R: Functions, vectors, and matrices",
    "section": "Check-in 2",
    "text": "Check-in 2\nIn Check-in 2, we’ll practice using functions, vectors, and matrices. We’ll also make practice using an .Rmd template."
  },
  {
    "objectID": "slides/14_vectorization-recursion.html#overview-of-today",
    "href": "slides/14_vectorization-recursion.html#overview-of-today",
    "title": "MATH167R: Vectorization and recursion",
    "section": "Overview of today",
    "text": "Overview of today\n\nVectorization\nRecursion\nLab time"
  },
  {
    "objectID": "slides/14_vectorization-recursion.html#vectorization",
    "href": "slides/14_vectorization-recursion.html#vectorization",
    "title": "MATH167R: Vectorization and recursion",
    "section": "Vectorization",
    "text": "Vectorization\nLast class, we saw how to use for and while loops to repeat tasks. However, often in R, functions or operations are vectorized, meaning they automatically act on every entry in a vector.\n\nx &lt;- 1:4\nx * 2\n\n[1] 2 4 6 8"
  },
  {
    "objectID": "slides/14_vectorization-recursion.html#vectorization-1",
    "href": "slides/14_vectorization-recursion.html#vectorization-1",
    "title": "MATH167R: Vectorization and recursion",
    "section": "Vectorization",
    "text": "Vectorization\n\nx &lt;- 1:4\nx &lt; 2\n\n[1]  TRUE FALSE FALSE FALSE\n\n\n\n\nx &lt;- 1:4\ny &lt;- 4:1\nx + y\n\n[1] 5 5 5 5"
  },
  {
    "objectID": "slides/14_vectorization-recursion.html#vectorization-with-data",
    "href": "slides/14_vectorization-recursion.html#vectorization-with-data",
    "title": "MATH167R: Vectorization and recursion",
    "section": "Vectorization with data",
    "text": "Vectorization with data\nWe often rely on vectorization when working with columns of a data frame.\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\ndata(penguins)\npenguins &lt;- penguins |&gt;\n  mutate(bill_len_dep_ratio = bill_length_mm / bill_depth_mm)\npenguins$bill_len_dep_ratio\n\n  [1] 2.090909 2.270115 2.238889       NA 1.901554 1.907767 2.185393 2.000000\n  [9] 1.883978 2.079208 2.210526 2.184971 2.335227 1.820755 1.639810 2.056180\n [17] 2.036842 2.053140 1.869565 2.139535 2.065574 2.016043 1.869792 2.110497\n [25] 2.255814 1.867725 2.182796 2.262570 2.037634 2.142857 2.365269 2.055249\n [33] 2.219101 2.164021 2.141176 1.857820 1.940000 2.281081 1.948187 2.083770\n [41] 2.027778 2.217391 1.945946 2.238579 2.189349 2.106383 2.163158 1.984127\n [49] 2.011173 1.995283 2.237288 2.121693 1.955307 2.153846 1.906077 2.225806\n [57] 2.228571 2.159574 2.198795 1.968586 2.112426 1.957346 2.211765 2.258242\n [65] 2.128655 2.311111 2.191358 2.151832 2.162651 2.154639 1.763158 2.157609\n [73] 2.302326 2.423280 2.028571 2.313514 2.434524 1.917526 2.248447 2.204188\n [81] 2.011628 2.437500 1.952128 1.809278 2.095506 2.034483 1.861538 1.983871\n [89] 1.994792 2.069149 1.983333 2.270718 1.988304 2.187845 2.092486 2.158730\n [97] 2.048387 2.178378 2.055901 2.335135 1.955307 2.050000 2.356250 1.890000\n[105] 2.037634 2.100529 2.244186 1.910000 2.241176 2.273684 2.309091 2.246305\n[113] 2.242938 2.164103 1.913043 2.333333 2.270588 1.819512 2.100000 2.209677\n[121] 2.104651 1.904040 2.364706 2.237838 2.213836 2.136842 2.204545 2.267760\n[129] 2.280702 2.450000 2.150838 2.244792 1.989189 2.027027 2.164773 2.348571\n[137] 2.034286 2.000000 2.242424 2.217877 2.350877 2.360465 2.070968 2.394118\n[145] 2.220238 2.085561 2.107527 1.989130 2.022472 2.088398 2.105263 2.243243\n[153] 3.492424 3.067485 3.453901 3.289474 3.282759 3.444444 3.109589 3.052288\n[161] 3.231343 3.038961 2.985401 3.043478 3.321168 3.315068 3.136986 3.140127\n[169] 3.111111 3.236842 3.186207 3.225166 3.510490 3.110345 3.206897 2.930380\n[177] 3.274809 3.052980 3.111888 3.186667 3.370629 3.267974 3.091503 3.014085\n[185] 3.110345 3.505882 3.317568 2.969325 3.109489 2.566474 3.235294 3.101911\n[193] 3.116788 3.100000 3.306569 3.306667 3.176101 3.136691 3.273381 3.176101\n[201] 3.375940 2.860759 3.281690 3.439716 3.131944 3.340000 3.229167 2.922078\n[209] 3.151079 3.033333 2.979310 3.294118 3.282609 3.100671 3.287770 3.458599\n[217] 3.225352 2.964286 3.208333 3.055556 3.063380 3.380000 3.180000 2.974359\n[225] 3.089744 3.141892 3.093333 3.037500 3.345070 3.134969 3.275362 2.756098\n[233] 3.386207 3.365385 3.246575 3.144654 3.253623 2.936416 3.013889 3.612676\n[241] 3.392857 3.064706 3.166667 3.052632 3.137931 3.074534 3.027211 3.235669\n[249] 3.126582 3.212329 3.361111 3.096970 3.233333 3.288235 3.045161 3.273333\n[257] 3.427536 2.906832 2.836735 3.379747 3.092857 3.185430 3.322368 3.132075\n[265] 2.861842 3.159509 3.276596 3.443750 2.834395 3.012346 3.445255       NA\n[273] 3.272727 3.210191 3.054054 3.099379 2.597765 2.564103 2.671875 2.427807\n[281] 2.661616 2.539326 2.532967 2.818681 2.433862 2.577889 2.617978 2.546798\n[289] 2.716763 2.872928 2.684211 2.576531 2.515000 3.258427 2.494624 2.703297\n[297] 2.450867 2.771429 2.602410 2.608247 2.608939 2.736842 2.744565 2.605263\n[305] 2.606742 2.640000 2.463855 2.605769 2.544910 2.712766 2.672043 2.827381\n[313] 2.601093 2.512077 2.825301 2.688442 2.512821 2.640000 2.664921 2.676471\n[321] 2.843575 2.745946 2.798883 2.500000 2.754011 2.878613 2.932927 2.705263\n[329] 2.641618 2.573604 2.456647 2.776596 2.722892 2.477387 2.670213 2.350515\n[337] 2.661538 2.836364 2.688235 2.818182 2.403315 2.725275 2.673684 2.684492"
  },
  {
    "objectID": "slides/14_vectorization-recursion.html#vectorization-in-functions",
    "href": "slides/14_vectorization-recursion.html#vectorization-in-functions",
    "title": "MATH167R: Vectorization and recursion",
    "section": "Vectorization in functions",
    "text": "Vectorization in functions\nOften we desire our function to be vectorized: so that it can take in vectors as inputs and perform an operation/task for each entry of the vector(s).\nFor this reason, it is important to begin remembering which functions are vectorized/vectorizable."
  },
  {
    "objectID": "slides/14_vectorization-recursion.html#absolute-error",
    "href": "slides/14_vectorization-recursion.html#absolute-error",
    "title": "MATH167R: Vectorization and recursion",
    "section": "Absolute error",
    "text": "Absolute error\n\nweather_forecasts &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-12-20/weather_forecasts.csv')\nweather_forecasts &lt;- weather_forecasts |&gt;\n  mutate(abs_err_precip = abs(observed_temp - forecast_temp))\n\nExercise: Write a function that takes as input two vectors of length \\(n\\), observed and predicted and returns a vector of length \\(n\\) of the absolute errors."
  },
  {
    "objectID": "slides/14_vectorization-recursion.html#absolute-error-1",
    "href": "slides/14_vectorization-recursion.html#absolute-error-1",
    "title": "MATH167R: Vectorization and recursion",
    "section": "Absolute error",
    "text": "Absolute error\n\nabsolute_error &lt;- function(observed, predicted) {\n  return(abs(observed - predicted))\n}"
  },
  {
    "objectID": "slides/14_vectorization-recursion.html#squared-error",
    "href": "slides/14_vectorization-recursion.html#squared-error",
    "title": "MATH167R: Vectorization and recursion",
    "section": "Squared error",
    "text": "Squared error\nExercise: Write a function that takes as input two vectors of length \\(n\\), observed and predicted and returns a vector of length \\(n\\) of the squared errors.\n\n\nsquared_error &lt;- function(observed, predicted) {\n  return((observed - predicted)^2)\n}"
  },
  {
    "objectID": "slides/14_vectorization-recursion.html#why-not-vectorize",
    "href": "slides/14_vectorization-recursion.html#why-not-vectorize",
    "title": "MATH167R: Vectorization and recursion",
    "section": "Why not vectorize?",
    "text": "Why not vectorize?\n\nmodifying in place\nwhile loops\nrecursive functions"
  },
  {
    "objectID": "slides/14_vectorization-recursion.html#modifying-in-place",
    "href": "slides/14_vectorization-recursion.html#modifying-in-place",
    "title": "MATH167R: Vectorization and recursion",
    "section": "Modifying in place",
    "text": "Modifying in place\nSometimes we wish to change the value of some object iteratively. In such cases, vectorizing code may not be possible.\nWhat do you expect the output of this code to be?\n\nx &lt;- 1:10\nfor (i in 10:1) {\n  x[i] &lt;- sum(x[1:i])\n}\nx\n\n\n\n\n [1]  1  3  6 10 15 21 28 36 45 55\n\n\n\n\nThese are known as the triangular numbers."
  },
  {
    "objectID": "slides/14_vectorization-recursion.html#recursion",
    "href": "slides/14_vectorization-recursion.html#recursion",
    "title": "MATH167R: Vectorization and recursion",
    "section": "Recursion",
    "text": "Recursion\nRecursion is a method for solving a problem where the solution can be divided into simpler or smaller versions of the same problem.\nExample: Factorial function\n\nExample: Fractals"
  },
  {
    "objectID": "slides/14_vectorization-recursion.html#recursive-functions-factorial",
    "href": "slides/14_vectorization-recursion.html#recursive-functions-factorial",
    "title": "MATH167R: Vectorization and recursion",
    "section": "Recursive functions: factorial",
    "text": "Recursive functions: factorial\nRecursive functions are those that call themselves to solve problems.\n\nfact &lt;- function(x) {\n  if (x == 0 | x == 1) {\n    return(1)\n  } else {\n    return(x * fact(x - 1))\n  }\n}\nfact(4)\n\n\n\n\n[1] 24"
  },
  {
    "objectID": "slides/14_vectorization-recursion.html#recursive-functions-fibonacci",
    "href": "slides/14_vectorization-recursion.html#recursive-functions-fibonacci",
    "title": "MATH167R: Vectorization and recursion",
    "section": "Recursive functions: Fibonacci",
    "text": "Recursive functions: Fibonacci\nExercise: write a function fibonacci() that takes as input a natural number n and returns the \\(n\\)th Fibonacci number.\n\n\nfibonacci &lt;- function(n) {\n  if (n == 1 | n == 2) {\n    return(1)\n  } else {\n    return(fibonacci(n - 1) + fibonacci(n - 2))\n  }\n}\nfibonacci(10)\n\n[1] 55"
  },
  {
    "objectID": "slides/14_vectorization-recursion.html#recursive-functions-prime-factorization",
    "href": "slides/14_vectorization-recursion.html#recursive-functions-prime-factorization",
    "title": "MATH167R: Vectorization and recursion",
    "section": "Recursive functions: Prime factorization",
    "text": "Recursive functions: Prime factorization\nChallenge: write a function factorize() that takes as input a natural number n and returns its prime factorization.\n\nHow might we get started with this question?"
  },
  {
    "objectID": "slides/12_programming-basics.html#overview-of-today",
    "href": "slides/12_programming-basics.html#overview-of-today",
    "title": "MATH167R: Programming Basics",
    "section": "Overview of today",
    "text": "Overview of today\n\nWhat is an algorithm?\nControl statements\nWriting R functions"
  },
  {
    "objectID": "slides/12_programming-basics.html#programming-and-this-class",
    "href": "slides/12_programming-basics.html#programming-and-this-class",
    "title": "MATH167R: Programming Basics",
    "section": "Programming and this class",
    "text": "Programming and this class\nUp until now, we have been focusing on using R for exploratory data analysis:\n\nDownloading and combining datasets\nObjects and types of data in R\nCreating data visualizations and computing descriptive statistics\nWriting R Markdown documents for communication\n\nFor the next several weeks, we will focus on programming and computer science concepts (as they might be used for data science)."
  },
  {
    "objectID": "slides/12_programming-basics.html#what-is-an-algorithm",
    "href": "slides/12_programming-basics.html#what-is-an-algorithm",
    "title": "MATH167R: Programming Basics",
    "section": "What is an algorithm?",
    "text": "What is an algorithm?\nAn algorithm is a finite sequence of instructions for performing some task or solving some problem.\nAlgorithms should be unambiguous and precise. In other words, if the instructions are followed correctly, the output should be reproducible: using the same inputs twice should yield the same outputs each time."
  },
  {
    "objectID": "slides/12_programming-basics.html#a-bad-example-an-ambiguous-cookie-recipe.",
    "href": "slides/12_programming-basics.html#a-bad-example-an-ambiguous-cookie-recipe.",
    "title": "MATH167R: Programming Basics",
    "section": "A bad example: an ambiguous cookie recipe.",
    "text": "A bad example: an ambiguous cookie recipe.\n\nMix dry ingredients.\nMix wet ingredients.\nAdd dry ingredients to wet ingredients.\nRoll into balls and put on baking sheet.\nBake in oven."
  },
  {
    "objectID": "slides/12_programming-basics.html#a-more-precise-example-the-smallest-number",
    "href": "slides/12_programming-basics.html#a-more-precise-example-the-smallest-number",
    "title": "MATH167R: Programming Basics",
    "section": "A more precise example: the smallest number",
    "text": "A more precise example: the smallest number\nInput: A list of numbers L. Output: The smallest number in the list L\n\nIf L is empty, then there is no smallest number.\nAssume the first number in L is the smallest.\nFor each remaining number in L, compare with the current assumed smallest number. If it is smaller, assume this number is now the smallest number.\nWhen there are no more numbers in L to consider, report the current smallest number."
  },
  {
    "objectID": "slides/12_programming-basics.html#flowcharts-for-algorithms",
    "href": "slides/12_programming-basics.html#flowcharts-for-algorithms",
    "title": "MATH167R: Programming Basics",
    "section": "Flowcharts for algorithms",
    "text": "Flowcharts for algorithms\nYou may also find it helpful to imagine an algorithm as a flowchart (from Wikipedia):"
  },
  {
    "objectID": "slides/12_programming-basics.html#algorithms-in-code",
    "href": "slides/12_programming-basics.html#algorithms-in-code",
    "title": "MATH167R: Programming Basics",
    "section": "Algorithms in code",
    "text": "Algorithms in code\nSince algorithms are simply sets of instructions or “recipes,” we can represent them as:\n\nWritten “pseudo-code” instructions (in English or other languages)\nFlow charts\nCode (in R, Python, or other programming languages)\n\nOur goal will be to write basic algorithms in R that we can use to carry out data science tasks."
  },
  {
    "objectID": "slides/12_programming-basics.html#functions-as-algorithms",
    "href": "slides/12_programming-basics.html#functions-as-algorithms",
    "title": "MATH167R: Programming Basics",
    "section": "Functions as algorithms",
    "text": "Functions as algorithms\nEach function is an implementation of an algorithm. For example, consider the rank() function which returns the rank-ordering of each number in a vector:\n\nrank(c(10, 9, 8))\n\n[1] 3 2 1\n\n\n\nrank\n\nfunction (x, na.last = TRUE, ties.method = c(\"average\", \"first\", \n    \"last\", \"random\", \"max\", \"min\")) \n{\n    stopifnot(length(na.last) == 1L)\n    nas &lt;- is.na(x)\n    nm &lt;- names(x)\n    ties.method &lt;- match.arg(ties.method)\n    if (is.factor(x)) \n        x &lt;- as.integer(x)\n    x &lt;- x[!nas]\n    y &lt;- switch(ties.method, average = , min = , max = .Internal(rank(x, \n        length(x), ties.method)), first = sort.list(sort.list(x)), \n        last = sort.list(rev.default(sort.list(x, decreasing = TRUE))), \n        random = sort.list(order(x, stats::runif(sum(!nas)))))\n    if (!is.na(na.last) && any(nas)) {\n        yy &lt;- NA\n        NAkeep &lt;- (na.last == \"keep\")\n        if (NAkeep || na.last) {\n            yy[!nas] &lt;- y\n            if (!NAkeep) \n                yy[nas] &lt;- (length(y) + 1L):length(yy)\n        }\n        else {\n            len &lt;- sum(nas)\n            yy[!nas] &lt;- y + len\n            yy[nas] &lt;- seq_len(len)\n        }\n        y &lt;- yy\n        names(y) &lt;- nm\n    }\n    else names(y) &lt;- nm[!nas]\n    y\n}\n&lt;bytecode: 0x13bcf1048&gt;\n&lt;environment: namespace:base&gt;"
  },
  {
    "objectID": "slides/12_programming-basics.html#exercise",
    "href": "slides/12_programming-basics.html#exercise",
    "title": "MATH167R: Programming Basics",
    "section": "Exercise",
    "text": "Exercise\nCan you write an algorithm to check if a positive integer N is divisible by 3?"
  },
  {
    "objectID": "slides/12_programming-basics.html#control-statements",
    "href": "slides/12_programming-basics.html#control-statements",
    "title": "MATH167R: Programming Basics",
    "section": "Control statements",
    "text": "Control statements\nMost algorithms will require the interpreter to check some conditions to determine the outcome.\n\nBy default, the expressions in the body of a function are evaluated sequentially.\nIn programming, control statements allow the developer (the person writing the code) to tell the interpreter what to do in different scenarios."
  },
  {
    "objectID": "slides/12_programming-basics.html#if-statements",
    "href": "slides/12_programming-basics.html#if-statements",
    "title": "MATH167R: Programming Basics",
    "section": "if statements",
    "text": "if statements\nR provides the if syntax for conditional evaluation:\nif (condition) code\n\nif statements give conditions for which a chunk of code is evaluated.\nFirst, a condition is specified before a chunk of code.\n\nIf the condition is TRUE, then the chunk is evaluated.\nIf the condition is FALSE, then it is not evaluated."
  },
  {
    "objectID": "slides/12_programming-basics.html#if-statements-1",
    "href": "slides/12_programming-basics.html#if-statements-1",
    "title": "MATH167R: Programming Basics",
    "section": "if statements",
    "text": "if statements\n\nx &lt;- 1\n# Conditions go in parentheses after if\nif (x &gt; 0) {\n  # code chunks get surrounded by curly brackets\n  print(paste0(\"x is equal to \", x, \", a positive number!\"))\n}\n\n\n\n\n[1] \"x is equal to 1, a positive number!\""
  },
  {
    "objectID": "slides/12_programming-basics.html#if-statements-2",
    "href": "slides/12_programming-basics.html#if-statements-2",
    "title": "MATH167R: Programming Basics",
    "section": "if statements",
    "text": "if statements\n\nx &lt;- -1\n# Conditions go in parenthesis after if\nif (x &gt; 0) {\n  # code chunks get surrounded by curly brackets\n  print(paste0(\"x is equal to \", x, \", a positive number!\"))\n}"
  },
  {
    "objectID": "slides/12_programming-basics.html#if-statements-3",
    "href": "slides/12_programming-basics.html#if-statements-3",
    "title": "MATH167R: Programming Basics",
    "section": "if statements",
    "text": "if statements\nWe can also write one line if statements without braces:\n\ngrade &lt;- NULL\nscore &lt;- 65\nif (score &gt;= 60) grade &lt;- \"CR\"\nprint(grade)\n\n[1] \"CR\"\n\n\n\ngrade &lt;- NULL\nscore &lt;- 55\nif (score &gt;= 60) grade &lt;- \"CR\"\nprint(grade)\n\nNULL"
  },
  {
    "objectID": "slides/12_programming-basics.html#else-statements",
    "href": "slides/12_programming-basics.html#else-statements",
    "title": "MATH167R: Programming Basics",
    "section": "else statements",
    "text": "else statements\nWe can use else to specify what we want to happen when the condition is FALSE.\n\nx &lt;- 1\nif (x &gt; 0) {\n  print(paste0(\"x is equal to \", x, \", a positive number!\"))\n} else {\n  print(paste0(\"x is equal to \", x, \", a negative number!\"))\n}\n\n\n\n\n[1] \"x is equal to 1, a positive number!\""
  },
  {
    "objectID": "slides/12_programming-basics.html#else-statements-1",
    "href": "slides/12_programming-basics.html#else-statements-1",
    "title": "MATH167R: Programming Basics",
    "section": "else statements",
    "text": "else statements\n\nx &lt;- -1\nif (x &gt; 0) {\n  print(paste0(\"x is equal to \", x, \", a positive number!\"))\n} else {\n  print(paste0(\"x is equal to \", x, \", a negative number!\"))\n}\n\n[1] \"x is equal to -1, a negative number!\""
  },
  {
    "objectID": "slides/12_programming-basics.html#else-if",
    "href": "slides/12_programming-basics.html#else-if",
    "title": "MATH167R: Programming Basics",
    "section": "else if",
    "text": "else if\nWe use else if when there are more than two possible paths. Here, the final else chunk will evaluate for any cases not covered by the if or else if.\n\nx &lt;- 1\nif (x &gt; 0) {\n  paste0(\"x is equal to \", x, \", a positive number!\")\n} else if (x &lt; 0) {\n  paste0(\"x is equal to \", x, \", a negative number!\")\n} else {\n  paste0(\"x is equal to \", x, \"!\")\n}\n\n[1] \"x is equal to 1, a positive number!\""
  },
  {
    "objectID": "slides/12_programming-basics.html#else-if-1",
    "href": "slides/12_programming-basics.html#else-if-1",
    "title": "MATH167R: Programming Basics",
    "section": "else if",
    "text": "else if\n\nx &lt;- -1\nif (x &gt; 0) {\n  paste0(\"x is equal to \", x, \", a positive number!\")\n} else if (x &lt; 0) {\n  paste0(\"x is equal to \", x, \", a negative number!\")\n} else {\n  paste0(\"x is equal to \", x, \"!\")\n}\n\n[1] \"x is equal to -1, a negative number!\""
  },
  {
    "objectID": "slides/12_programming-basics.html#else-if-2",
    "href": "slides/12_programming-basics.html#else-if-2",
    "title": "MATH167R: Programming Basics",
    "section": "else if",
    "text": "else if\n\nx &lt;- 0\nif (x &gt; 0) {\n  paste0(\"x is equal to \", x, \", a positive number!\")\n} else if (x &lt; 0) {\n  paste0(\"x is equal to \", x, \", a negative number!\")\n} else {\n  paste0(\"x is equal to \", x, \"!\")\n}\n\n[1] \"x is equal to 0!\""
  },
  {
    "objectID": "slides/12_programming-basics.html#divisibility",
    "href": "slides/12_programming-basics.html#divisibility",
    "title": "MATH167R: Programming Basics",
    "section": "Divisibility",
    "text": "Divisibility\nSuppose we want to check if x is divisible by 3 and print out the answer. What should CONDITION be?\n\nx &lt;- 5\nif (CONDITION) {\n  IF TRUE, DO THIS\n} else {\n  ELSE, DO THIS\n}"
  },
  {
    "objectID": "slides/12_programming-basics.html#divisibility-1",
    "href": "slides/12_programming-basics.html#divisibility-1",
    "title": "MATH167R: Programming Basics",
    "section": "Divisibility",
    "text": "Divisibility\nSuppose we want to check if x is divisible by 5 and print out the answer. What should CONDITION be?\n\nx &lt;- 5\n# modulo operator\nif (x %% 3 == 0) {\n  print(\"divisible by 3\")\n} else {\n  print(\"not divisible by 3\")\n}\n\n\n\n\n[1] \"not divisible by 3\""
  },
  {
    "objectID": "slides/12_programming-basics.html#check-length-of-strings",
    "href": "slides/12_programming-basics.html#check-length-of-strings",
    "title": "MATH167R: Programming Basics",
    "section": "Check length of strings",
    "text": "Check length of strings\nNote: We will need the stringr package for this.\n\n# Run this if you have never installed stringr before!\n# install.packages(\"stringr\")\nlibrary(stringr)\n\n\nx &lt;- \"cat\"\nif (str_length(x) &lt;= 10) {\n  cat(\"x is a short string.\")\n} else {\n  cat(\"x is a long string.\")\n}\n\nx is a short string."
  },
  {
    "objectID": "slides/12_programming-basics.html#check-class",
    "href": "slides/12_programming-basics.html#check-class",
    "title": "MATH167R: Programming Basics",
    "section": "Check class",
    "text": "Check class\n\nx &lt;- 5\nif (is.numeric(x)) {\n  cat(\"x is a numeric.\")\n} else if (is.character(x)) {\n  cat(\"x is a character.\")\n} else {\n  cat(\"x is some class I didn't check for in my code.\")\n}\n\nx is a numeric."
  },
  {
    "objectID": "slides/12_programming-basics.html#check-class-1",
    "href": "slides/12_programming-basics.html#check-class-1",
    "title": "MATH167R: Programming Basics",
    "section": "Check class",
    "text": "Check class\n\nx &lt;- list()\nif (is.numeric(x)) {\n  cat(\"x is a numeric.\")\n} else if (is.character(x)) {\n  cat(\"x is a character.\")\n} else {\n  cat(\"x is some class I didn't check for in my code.\")\n}\n\nx is some class I didn't check for in my code."
  },
  {
    "objectID": "slides/12_programming-basics.html#exercise-1",
    "href": "slides/12_programming-basics.html#exercise-1",
    "title": "MATH167R: Programming Basics",
    "section": "Exercise",
    "text": "Exercise\nWrite code that, given two numerics x and y, prints out:\n\nEQUAL if sum(x) and sum(y) are equal.\nX if sum(x) is bigger.\nY if sum(y) is bigger."
  },
  {
    "objectID": "slides/12_programming-basics.html#functions",
    "href": "slides/12_programming-basics.html#functions",
    "title": "MATH167R: Programming Basics",
    "section": "Functions",
    "text": "Functions\nWe’ve already seen and used several functions, but you can also create your own.\nThis is incredibly useful when:\n\nYou use the same code repeatedly\nYou want to perform the same task for slightly different input values\nYou want others to be able to use your code"
  },
  {
    "objectID": "slides/12_programming-basics.html#anatomy-of-a-function",
    "href": "slides/12_programming-basics.html#anatomy-of-a-function",
    "title": "MATH167R: Programming Basics",
    "section": "Anatomy of a function",
    "text": "Anatomy of a function\nThe function named function is used to create a function:\nfunction(formal arguments) {body}\nThe body comprises one or more lines of code that will perform the desired computations.\n\ncelsiusToFahrenheit &lt;- function(x) {x * 9 / 5 + 32}\ncelsiusToFahrenheit(0)\n\n\n\n\n[1] 32"
  },
  {
    "objectID": "slides/12_programming-basics.html#anatomy-of-a-function-1",
    "href": "slides/12_programming-basics.html#anatomy-of-a-function-1",
    "title": "MATH167R: Programming Basics",
    "section": "Anatomy of a function",
    "text": "Anatomy of a function\nFor more complicated functions, we typically move the body to a new line:\n\nfunction_name &lt;- function(param1, param2 = \"default\") {\n  # body of the function\n  return(output)\n}\n\n\nfunction_name: the name you want to give your function, what you will use to call it\nfunction(): call this to define a function\nparam1, param2: formal arguments input by the user. You can assign default values by setting them equal to something in the call to function()\nbody: the actual code that is executed\nreturn(): the output value returned to the user"
  },
  {
    "objectID": "slides/12_programming-basics.html#square-a-number-add-2",
    "href": "slides/12_programming-basics.html#square-a-number-add-2",
    "title": "MATH167R: Programming Basics",
    "section": "Square a number, add 2",
    "text": "Square a number, add 2\n\nsquare_plus_2 &lt;- function(x) {\n  y &lt;- x^2 + 2\n  return(y)\n}\n\nsquare_plus_2(4)\n\n[1] 18\n\nsquare_plus_2(10)\n\n[1] 102\n\nsquare_plus_2(1:5)\n\n[1]  3  6 11 18 27"
  },
  {
    "objectID": "slides/12_programming-basics.html#square-a-number-add-2-1",
    "href": "slides/12_programming-basics.html#square-a-number-add-2-1",
    "title": "MATH167R: Programming Basics",
    "section": "Square a number, add 2",
    "text": "Square a number, add 2\n\nsquare_plus_2(\"some string\")\n\nError in x^2: non-numeric argument to binary operator\n\n\nWhat happened here?\n\nWe wrote a function for numerics only but didn’t check the input."
  },
  {
    "objectID": "slides/12_programming-basics.html#square-a-number-add-2-2",
    "href": "slides/12_programming-basics.html#square-a-number-add-2-2",
    "title": "MATH167R: Programming Basics",
    "section": "Square a number, add 2",
    "text": "Square a number, add 2\nLet’s try making our function more robust by adding a if statement and a stop call.\n\nsquare_plus_2 &lt;- function(x) {\n  if (!is.numeric(x)) {\n    stop(\"x must be numeric!\")\n  } else {\n    y &lt;- x^2 + 2\n    return(y)\n  }\n}\n\nsquare_plus_2(\"some string\")\n\nError in square_plus_2(\"some string\"): x must be numeric!"
  },
  {
    "objectID": "slides/12_programming-basics.html#function-names",
    "href": "slides/12_programming-basics.html#function-names",
    "title": "MATH167R: Programming Basics",
    "section": "Function Names",
    "text": "Function Names\nStrive to have function names based on verbs. Otherwise, standard variable name style guidelines apply!\n\n# Good\nadd_row()\npermute()\n\n# Bad\nrow_adder()\npermutation()"
  },
  {
    "objectID": "slides/12_programming-basics.html#spacing",
    "href": "slides/12_programming-basics.html#spacing",
    "title": "MATH167R: Programming Basics",
    "section": "Spacing",
    "text": "Spacing\nPlace a space before and after () when used with if, for, or while.\n\n# Good\nif (condition) {\n  x + 2\n}\n\n# Bad\nif(condition){\n  x + 2\n}"
  },
  {
    "objectID": "slides/12_programming-basics.html#spacing-1",
    "href": "slides/12_programming-basics.html#spacing-1",
    "title": "MATH167R: Programming Basics",
    "section": "Spacing",
    "text": "Spacing\nPlace a space after () used for function arguments.\n\n# Good\nif (debug) {\n  show(x)\n}\n\n# Bad\nif(debug){\n  show(x)\n}"
  },
  {
    "objectID": "slides/12_programming-basics.html#code-blocks",
    "href": "slides/12_programming-basics.html#code-blocks",
    "title": "MATH167R: Programming Basics",
    "section": "Code Blocks",
    "text": "Code Blocks\n\n{ should be the last character on the line. Related code (e.g., an if clause, a function declaration, a trailing comma, …) must be on the same line as the opening brace. It should be preceded by a single space.\nThe contents within code blocks should be indented by two spaces from where it started\n} should be the first character on the line."
  },
  {
    "objectID": "slides/12_programming-basics.html#code-blocks-1",
    "href": "slides/12_programming-basics.html#code-blocks-1",
    "title": "MATH167R: Programming Basics",
    "section": "Code Blocks",
    "text": "Code Blocks\n\n# Good\nif (y &lt; 0) {\n  message(\"y is negative\")\n}\n\nif (y == 0) {\n  if (x &gt; 0) {\n    log(x)\n  } else {\n    message(\"x is negative or zero\")\n  }\n} else {\n  y^x\n}"
  },
  {
    "objectID": "slides/12_programming-basics.html#code-blocks-2",
    "href": "slides/12_programming-basics.html#code-blocks-2",
    "title": "MATH167R: Programming Basics",
    "section": "Code Blocks",
    "text": "Code Blocks\n\n# Bad\nif (y&lt;0){\nmessage(\"Y is negative\")\n}\n\nif (y == 0)\n{\n    if (x &gt; 0) {\n      log(x)\n    } else {\n  message(\"x is negative or zero\")\n    }\n} else { y ^ x }"
  },
  {
    "objectID": "slides/12_programming-basics.html#in-line-statements",
    "href": "slides/12_programming-basics.html#in-line-statements",
    "title": "MATH167R: Programming Basics",
    "section": "In-line Statements",
    "text": "In-line Statements\nIn general, it’s ok to drop the curly braces for very simple statements that fit on one line. However, function calls that affect control flow (return, stop, etc.) should always go in their own {} block:\n\n# Good\ny &lt;- 10\nx &lt;- if (y &lt; 20) \"Too low\" else \"Too high\"\n\nif (y &lt; 0) {\n  stop(\"Y is negative\")\n}\n\nfind_abs &lt;- function(x) {\n  if (x &gt; 0) {\n    return(x)\n  }\n  x * -1\n}"
  },
  {
    "objectID": "slides/12_programming-basics.html#in-line-statements-1",
    "href": "slides/12_programming-basics.html#in-line-statements-1",
    "title": "MATH167R: Programming Basics",
    "section": "In-line Statements",
    "text": "In-line Statements\nIn general, it’s ok to drop the curly braces for very simple statements that fit on one line. However, function calls that affect control flow (return, stop, etc.) should always go in their own {} block:\n\n# Bad\nif (y &lt; 0) stop(\"Y is negative\")\n\nif (y &lt; 0)\n  stop(\"Y is negative\")\n\nfind_abs &lt;- function(x) {\n  if (x &gt; 0) return(x)\n  x * -1\n}"
  },
  {
    "objectID": "slides/12_programming-basics.html#long-lines-in-functions",
    "href": "slides/12_programming-basics.html#long-lines-in-functions",
    "title": "MATH167R: Programming Basics",
    "section": "Long lines in functions",
    "text": "Long lines in functions\nIf a function definition runs over multiple lines, indent the second line to where the definition starts.\n\n# Good\nlong_function_name &lt;- function(a = \"a long argument\",\n                               b = \"another argument\",\n                               c = \"another long argument\") {\n  # As usual code is indented by two spaces.\n}\n\n# Bad\nlong_function_name &lt;- function(a = \"a long argument\",\n  b = \"another argument\",\n  c = \"another long argument\") {\n  # Here it's hard to spot where the definition ends and the\n  # code begins\n}"
  },
  {
    "objectID": "slides/12_programming-basics.html#return",
    "href": "slides/12_programming-basics.html#return",
    "title": "MATH167R: Programming Basics",
    "section": "return",
    "text": "return\nStrictly speaking, return is not necessary in a function definition. The function will output the last line of executable R code. The following function definitions will output the same results!\n\nAdd_Values &lt;- function(x, y) {\n  return(x + y)\n}\n\nAdd_Values &lt;- function(x, y) {\n  x + y\n}"
  },
  {
    "objectID": "slides/12_programming-basics.html#commenting-functions",
    "href": "slides/12_programming-basics.html#commenting-functions",
    "title": "MATH167R: Programming Basics",
    "section": "Commenting functions",
    "text": "Commenting functions\nFor now, when commenting functions, include (at least) 3 lines of comments:\n\na comment describing the purpose of a function\na comment describing each input\na comment describing the output\n\nThe function body should be commented as usual!"
  },
  {
    "objectID": "slides/12_programming-basics.html#commenting-functions-1",
    "href": "slides/12_programming-basics.html#commenting-functions-1",
    "title": "MATH167R: Programming Basics",
    "section": "Commenting functions",
    "text": "Commenting functions\n\n# Good ----\n# Function: square_plus_2, squares a number and then adds 2\n# Input: x, must be numeric\n# Output: numeric equal to x^2 + 2\nsquare_plus_2 &lt;- function(x) {\n  # check that x is numeric\n  if (!is.numeric(x)) {\n    stop(\"x must be numeric!\")\n  } else {\n    # if numeric, then square and add 2\n    y &lt;- x^2 + 2\n    return(y)\n  }\n}"
  },
  {
    "objectID": "slides/12_programming-basics.html#commenting-functions-2",
    "href": "slides/12_programming-basics.html#commenting-functions-2",
    "title": "MATH167R: Programming Basics",
    "section": "Commenting functions",
    "text": "Commenting functions\n\n# Bad ----\n# Function for problem 2c\nsquare_plus_2 &lt;- function(x) {\n  if (!is.numeric(x)) {\n    stop(\"x must be numeric!\")\n  } else {\n    y &lt;- x^2 + 2\n    return(y)\n  }\n}"
  },
  {
    "objectID": "slides/12_programming-basics.html#exercises",
    "href": "slides/12_programming-basics.html#exercises",
    "title": "MATH167R: Programming Basics",
    "section": "Exercises",
    "text": "Exercises\n\nWrite a function that takes as input three numbers, a, b, and c, and returns the sum, without using the sum function.\nWrite a function that takes as input one number, a, and returns its absolute value, without using the abs function."
  },
  {
    "objectID": "slides/05_exploring-data.html#warm-up",
    "href": "slides/05_exploring-data.html#warm-up",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Warm-up",
    "text": "Warm-up\n\nWhat is the main difference between matrices and data frames?\nWhat does the following code do?\n\nB &lt;- diag(1, nrow = 4)\nB &lt;- B + .01\nprint(B[2, 3])"
  },
  {
    "objectID": "slides/05_exploring-data.html#warm-up-1",
    "href": "slides/05_exploring-data.html#warm-up-1",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Warm-up",
    "text": "Warm-up\nAnswer:\n\nMatrices only contain one type of data whereas each column of a data frame may contain a different type of data.\n\nB &lt;- diag(1, nrow = 4)\nB &lt;- B + .01\nB\n\n     [,1] [,2] [,3] [,4]\n[1,] 1.01 0.01 0.01 0.01\n[2,] 0.01 1.01 0.01 0.01\n[3,] 0.01 0.01 1.01 0.01\n[4,] 0.01 0.01 0.01 1.01"
  },
  {
    "objectID": "slides/05_exploring-data.html#overview-of-today",
    "href": "slides/05_exploring-data.html#overview-of-today",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Overview of today",
    "text": "Overview of today\n\nImporting and downloading data\nDescriptive statistics and summaries\nFiltering and sorting data\nPipe notation"
  },
  {
    "objectID": "slides/05_exploring-data.html#importing-data",
    "href": "slides/05_exploring-data.html#importing-data",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Importing data",
    "text": "Importing data\nToday we’ll use the flights data to practice our data exploration skills."
  },
  {
    "objectID": "slides/05_exploring-data.html#r-packages",
    "href": "slides/05_exploring-data.html#r-packages",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "R Packages",
    "text": "R Packages\n\nPackages bundle together code, data, and documentation in an easy to share way.\nThey come with code that others have written to extend the functionality of R.\nPackages can range from graphical software, to web scraping tools, statistical models for spatio-temporal data, microbial data analysis tools, etc.="
  },
  {
    "objectID": "slides/05_exploring-data.html#downloading-packages",
    "href": "slides/05_exploring-data.html#downloading-packages",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Downloading packages",
    "text": "Downloading packages\n\nThe most popular package repository is the Comprehensive R Archive Network, or CRAN\nOther popular repositories include Bioconductor and Github"
  },
  {
    "objectID": "slides/05_exploring-data.html#installing-packages",
    "href": "slides/05_exploring-data.html#installing-packages",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Installing packages",
    "text": "Installing packages\nIf a package is available on CRAN, like most packages we will use for this course, you can install it using install.packages():\nYou can also install by clicking Install in the Packages tab through RStudio.\nFor the most part, after you install a package, it is saved on your computer until you update R, and you will not need to re-install it. Thus, you should never include a call to install.packages() in any .R or .Rmd file!"
  },
  {
    "objectID": "slides/05_exploring-data.html#loading-packages",
    "href": "slides/05_exploring-data.html#loading-packages",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Loading packages",
    "text": "Loading packages\nAfter a package is installed, you can load it into your current R session using library():\nNote that unlike install.packages(), you do not need to include the package name in quotes."
  },
  {
    "objectID": "slides/05_exploring-data.html#loading-packages-1",
    "href": "slides/05_exploring-data.html#loading-packages-1",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Loading packages",
    "text": "Loading packages\nLoading a package must be done with each new R session, so you should put calls to library() in your .R and .Rmd files.\nThis can be done in the opening code chunk. If it is a .Rmd, you can set the parameter include = FALSE to hide the messages and code if the details are unimportant for the reader.\n```{r, include = FALSE}\nlibrary(nycflights13)\n```"
  },
  {
    "objectID": "slides/05_exploring-data.html#exploring-data",
    "href": "slides/05_exploring-data.html#exploring-data",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Exploring data",
    "text": "Exploring data\nOnce we load the nycflights13 package, we can access the flights data using the following command:\n\nlibrary(nycflights13)\ndata(flights)\n\nThe flights data is saved as a special kind of data frame called a tibble. The main difference between tibbles and data frames is that tibbles generally display more nicely.\n\nclass(flights)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\""
  },
  {
    "objectID": "slides/05_exploring-data.html#exploring-data-1",
    "href": "slides/05_exploring-data.html#exploring-data-1",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Exploring data",
    "text": "Exploring data\nThe head() function prints the first \\(m\\) rows (\\(m=6\\) by default):\n\nhead(flights)\n\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n6  2013     1     1      554            558        -4      740            728\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/05_exploring-data.html#exploring-data-2",
    "href": "slides/05_exploring-data.html#exploring-data-2",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Exploring data",
    "text": "Exploring data\nWe can access documentation on the flights dataset using the ? operator:\n\n?flights\n\n\nThe nrow(), ncol(), and dim() functions provide information about the number of rows and columns:\n\nnrow(flights)\n\n[1] 336776\n\nncol(flights)\n\n[1] 19\n\ndim(flights)\n\n[1] 336776     19"
  },
  {
    "objectID": "slides/05_exploring-data.html#summarizing-data",
    "href": "slides/05_exploring-data.html#summarizing-data",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Summarizing data",
    "text": "Summarizing data\nThe summary() function provides a default way to summarize the dataset.\n\nsummary(flights)\n\n      year          month             day           dep_time    sched_dep_time\n Min.   :2013   Min.   : 1.000   Min.   : 1.00   Min.   :   1   Min.   : 106  \n 1st Qu.:2013   1st Qu.: 4.000   1st Qu.: 8.00   1st Qu.: 907   1st Qu.: 906  \n Median :2013   Median : 7.000   Median :16.00   Median :1401   Median :1359  \n Mean   :2013   Mean   : 6.549   Mean   :15.71   Mean   :1349   Mean   :1344  \n 3rd Qu.:2013   3rd Qu.:10.000   3rd Qu.:23.00   3rd Qu.:1744   3rd Qu.:1729  \n Max.   :2013   Max.   :12.000   Max.   :31.00   Max.   :2400   Max.   :2359  \n                                                 NA's   :8255                 \n   dep_delay          arr_time    sched_arr_time   arr_delay       \n Min.   : -43.00   Min.   :   1   Min.   :   1   Min.   : -86.000  \n 1st Qu.:  -5.00   1st Qu.:1104   1st Qu.:1124   1st Qu.: -17.000  \n Median :  -2.00   Median :1535   Median :1556   Median :  -5.000  \n Mean   :  12.64   Mean   :1502   Mean   :1536   Mean   :   6.895  \n 3rd Qu.:  11.00   3rd Qu.:1940   3rd Qu.:1945   3rd Qu.:  14.000  \n Max.   :1301.00   Max.   :2400   Max.   :2359   Max.   :1272.000  \n NA's   :8255      NA's   :8713                  NA's   :9430      \n   carrier              flight       tailnum             origin         \n Length:336776      Min.   :   1   Length:336776      Length:336776     \n Class :character   1st Qu.: 553   Class :character   Class :character  \n Mode  :character   Median :1496   Mode  :character   Mode  :character  \n                    Mean   :1972                                        \n                    3rd Qu.:3465                                        \n                    Max.   :8500                                        \n                                                                        \n     dest              air_time        distance         hour      \n Length:336776      Min.   : 20.0   Min.   :  17   Min.   : 1.00  \n Class :character   1st Qu.: 82.0   1st Qu.: 502   1st Qu.: 9.00  \n Mode  :character   Median :129.0   Median : 872   Median :13.00  \n                    Mean   :150.7   Mean   :1040   Mean   :13.18  \n                    3rd Qu.:192.0   3rd Qu.:1389   3rd Qu.:17.00  \n                    Max.   :695.0   Max.   :4983   Max.   :23.00  \n                    NA's   :9430                                  \n     minute        time_hour                     \n Min.   : 0.00   Min.   :2013-01-01 05:00:00.00  \n 1st Qu.: 8.00   1st Qu.:2013-04-04 13:00:00.00  \n Median :29.00   Median :2013-07-03 10:00:00.00  \n Mean   :26.23   Mean   :2013-07-03 05:22:54.64  \n 3rd Qu.:44.00   3rd Qu.:2013-10-01 07:00:00.00  \n Max.   :59.00   Max.   :2013-12-31 23:00:00.00"
  },
  {
    "objectID": "slides/05_exploring-data.html#summarizing-one-column-at-a-time",
    "href": "slides/05_exploring-data.html#summarizing-one-column-at-a-time",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Summarizing one column at a time",
    "text": "Summarizing one column at a time\nAs we saw last week, the $ operator allows us to pull a single column from our dataset:\n\nflights$origin[1:10]\n\n [1] \"EWR\" \"LGA\" \"JFK\" \"JFK\" \"LGA\" \"EWR\" \"EWR\" \"LGA\" \"JFK\" \"LGA\""
  },
  {
    "objectID": "slides/05_exploring-data.html#summarizing-one-column-at-a-time-1",
    "href": "slides/05_exploring-data.html#summarizing-one-column-at-a-time-1",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Summarizing one column at a time",
    "text": "Summarizing one column at a time\nFor character vectors that represent categorical variables, the unique() and table() functions provide useful summaries:\n\nunique(flights$origin)\n\n[1] \"EWR\" \"LGA\" \"JFK\"\n\ntable(flights$origin)\n\n\n   EWR    JFK    LGA \n120835 111279 104662"
  },
  {
    "objectID": "slides/05_exploring-data.html#summarizing-one-column-at-a-time-2",
    "href": "slides/05_exploring-data.html#summarizing-one-column-at-a-time-2",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Summarizing one column at a time",
    "text": "Summarizing one column at a time\nFor numeric columns, we can use many of the functions we’ve seen earlier:\n\nmean(flights$dep_delay, na.rm = T)\n\n[1] 12.63907\n\nrange(flights$dep_delay, na.rm = T)\n\n[1]  -43 1301\n\nmax(flights$dep_delay, na.rm = T)\n\n[1] 1301"
  },
  {
    "objectID": "slides/05_exploring-data.html#subsetting-a-data-frame",
    "href": "slides/05_exploring-data.html#subsetting-a-data-frame",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Subsetting a data frame",
    "text": "Subsetting a data frame\nWhat if we want to remove all rows with NA values? Or what if we only want to look at flights from JFK?\nThe most basic way to take a subset of (rows of) a data frame is to define an appropriate logical vector:\nWhat do you think the following code does?\n\nis_delayed &lt;- flights$dep_delay &gt; 60\nhead(is_delayed)\n\n\n\n[1] FALSE FALSE FALSE FALSE FALSE FALSE"
  },
  {
    "objectID": "slides/05_exploring-data.html#subsetting-a-data-frame-1",
    "href": "slides/05_exploring-data.html#subsetting-a-data-frame-1",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Subsetting a data frame",
    "text": "Subsetting a data frame\nWe can then use this logical vector to index the desired rows:\n\ndelayed_flights &lt;- flights[is_delayed, ]\nnrow(delayed_flights)"
  },
  {
    "objectID": "slides/05_exploring-data.html#check-your-understanding-subsetting",
    "href": "slides/05_exploring-data.html#check-your-understanding-subsetting",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Check your understanding: Subsetting",
    "text": "Check your understanding: Subsetting\nWhat do you think the following lines of code do?\n\nflights[flights$origin == \"JFK\", ]\nflights[flights$air_time &gt; 120, ]\nflights[!is.na(flights$arr_delay), ]\nflights[complete.cases(flights), ]"
  },
  {
    "objectID": "slides/05_exploring-data.html#summarizing-subsets-of-a-dataset",
    "href": "slides/05_exploring-data.html#summarizing-subsets-of-a-dataset",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Summarizing subsets of a dataset",
    "text": "Summarizing subsets of a dataset\nSuppose we create three separate datasets–one for each departure airport.\n\nJFK_flights &lt;- flights[flights$origin == \"JFK\", ]\nLGA_flights &lt;- flights[flights$origin == \"LGA\", ]\nEWR_flights &lt;- flights[flights$origin == \"EWR\", ]\n\n\n\nmean(JFK_flights$arr_delay, na.rm = T)\n\n[1] 5.551481\n\nmean(LGA_flights$arr_delay, na.rm = T)\n\n[1] 5.783488\n\nmean(EWR_flights$arr_delay, na.rm = T)\n\n[1] 9.107055"
  },
  {
    "objectID": "slides/05_exploring-data.html#summarizing-subsets-of-a-dataset-1",
    "href": "slides/05_exploring-data.html#summarizing-subsets-of-a-dataset-1",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Summarizing subsets of a dataset",
    "text": "Summarizing subsets of a dataset\nOther summaries might be more relevant/informative:\n\nmean(JFK_flights$arr_delay &gt; 30, na.rm = T)\n\n[1] 0.1519908\n\nmean(LGA_flights$arr_delay &gt; 30, na.rm = T)\n\n[1] 0.1451256\n\nmean(EWR_flights$arr_delay &gt; 30, na.rm = T)\n\n[1] 0.172821\n\n\n\n\nmean(JFK_flights$distance, na.rm = T)\n\n[1] 1266.249\n\nmean(LGA_flights$distance, na.rm = T)\n\n[1] 779.8357\n\nmean(EWR_flights$distance, na.rm = T)\n\n[1] 1056.743"
  },
  {
    "objectID": "slides/05_exploring-data.html#the-tidyverse",
    "href": "slides/05_exploring-data.html#the-tidyverse",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "The tidyverse",
    "text": "The tidyverse\nThe previous code provides a basic way to subset datasets. When doing a lot of descriptive/exploratory analysis, many people prefer using code from the tidyverse packages:\n\nReading and saving data: readr\nData manipulation: tidyr, dplyr\nData visualization: ggplot2\nWorking with different data structures: tibble, purrr, stringr, forcats\n\nYou can install them all using\n(Remember, you only need to do this once!)"
  },
  {
    "objectID": "slides/05_exploring-data.html#tidy-data-principles",
    "href": "slides/05_exploring-data.html#tidy-data-principles",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Tidy Data Principles",
    "text": "Tidy Data Principles\nThere are three rules required for data to be considered tidy\n\nEach variable must have its own column\nEach observation must have its own row\nEach value must have its own cell\n\nSeems simple, but can sometimes be tricky. We will discuss transformating data in the future."
  },
  {
    "objectID": "slides/05_exploring-data.html#name-conflicts",
    "href": "slides/05_exploring-data.html#name-conflicts",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Name conflicts",
    "text": "Name conflicts\nRecall that packages are essentially ways for you to install and use functions written by others. Occasionally, some of these functions have the same name and there is a conflict. Whichever package you load more recently using library will mask the old function, meaning that R will default to that version.\nIn general, this is fine, especially with tidyverse. These package authors know when they have masked common functions in R, and typically we will prefer tidyverse version.\nThe conflict message is to make sure you know about conflicts. You can (and should) hide this in your R Markdown files by adding the parameter message=FALSE or include=FALSE to your code chunk when you load packages."
  },
  {
    "objectID": "slides/05_exploring-data.html#subsetting-with-filter",
    "href": "slides/05_exploring-data.html#subsetting-with-filter",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Subsetting with filter()",
    "text": "Subsetting with filter()\nThe filter() function from the dplyr package provides a way to subset data. The second argument of filter() below looks for a logical vector defined in terms of the variables in the first argument.\n\nlibrary(dplyr)\nJFK_flights &lt;- filter(flights, origin == \"JFK\")\nLGA_flights &lt;- filter(flights, origin == \"LGA\")\nEWR_flights &lt;- filter(flights, origin == \"EWR\")\n\nCompare with:\n\nJFK_flights &lt;- flights[flights$origin == \"JFK\", ]\nLGA_flights &lt;- flights[flights$origin == \"LGA\", ]\nEWR_flights &lt;- flights[flights$origin == \"EWR\", ]"
  },
  {
    "objectID": "slides/05_exploring-data.html#descriptive-statistics-with-summarize",
    "href": "slides/05_exploring-data.html#descriptive-statistics-with-summarize",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Descriptive statistics with summarize()",
    "text": "Descriptive statistics with summarize()\nThe summarize() function can similarly be used to compute summary statistics:\n\nsummarize(flights, mean_dep_delay = mean(dep_delay, na.rm = T))\n\n# A tibble: 1 × 1\n  mean_dep_delay\n           &lt;dbl&gt;\n1           12.6\n\n\nThe summarize() function can handle more than one statistic at once:\n\nsummarize(flights, \n          mean_dep_delay = mean(dep_delay, na.rm = T),\n          mean_arr_delay = mean(arr_delay, na.rm = T))\n\n# A tibble: 1 × 2\n  mean_dep_delay mean_arr_delay\n           &lt;dbl&gt;          &lt;dbl&gt;\n1           12.6           6.90"
  },
  {
    "objectID": "slides/05_exploring-data.html#pipe-notation",
    "href": "slides/05_exploring-data.html#pipe-notation",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Pipe notation",
    "text": "Pipe notation\nPipes use the |&gt; operator to take the output from a previous function call and “pipe” it through to the next function.\nThe object before the pipe is treated as the first argument to the function coming after the pipe.\n\nJFK_flights &lt;- flights |&gt; filter(origin == \"JFK\")\nLGA_flights &lt;- flights |&gt; filter(origin == \"LGA\")\nEWR_flights &lt;- flights |&gt; filter(origin == \"EWR\")"
  },
  {
    "objectID": "slides/05_exploring-data.html#piping-filter-and-summarize",
    "href": "slides/05_exploring-data.html#piping-filter-and-summarize",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Piping filter() and summarize()",
    "text": "Piping filter() and summarize()\nPipes are useful if we want to combine multiple functions. To see how this can be useful, consider the combining the filter() and summarize() functions:\n\nflights |&gt;\n  filter(origin == \"JFK\") |&gt;\n  summarize(mean_dep_delay = mean(dep_delay, na.rm = T))\n\n# A tibble: 1 × 1\n  mean_dep_delay\n           &lt;dbl&gt;\n1           12.1"
  },
  {
    "objectID": "slides/05_exploring-data.html#check-your-understanding",
    "href": "slides/05_exploring-data.html#check-your-understanding",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Check your understanding:",
    "text": "Check your understanding:\nWhat does the following code do?\n\nflights |&gt;\n  filter(air_time &gt; 120) |&gt;\n  summarize(mean_arr_delay = mean(arr_delay, na.rm = T))\n\n\n\n\n# A tibble: 1 × 1\n  mean_arr_delay\n           &lt;dbl&gt;\n1           5.69\n\n\nHow could you do the same thing with base R?\n\n\n\nlong_flights &lt;- flights[flights$air_time &gt; 120, ]\nmean(long_flights$arr_delay, na.rm = T)\n\n[1] 5.689161\n\n\nNote that the class of object is slightly different!"
  },
  {
    "objectID": "slides/05_exploring-data.html#saving-data",
    "href": "slides/05_exploring-data.html#saving-data",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Saving Data",
    "text": "Saving Data\nYou can save single R objects as .rds files using saveRDS(), multiple R objects as .RData or .rda files using save(), and your entire workspace as .RData using save.image()."
  },
  {
    "objectID": "slides/05_exploring-data.html#saving-data-1",
    "href": "slides/05_exploring-data.html#saving-data-1",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Saving Data",
    "text": "Saving Data\nIn general, you should use .RData for multiple objects, and generally should not usesave.image().\nsave.image() should never be a part of your workflow."
  },
  {
    "objectID": "slides/05_exploring-data.html#loading-data",
    "href": "slides/05_exploring-data.html#loading-data",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Loading Data",
    "text": "Loading Data\nYou can load .rds files using readRDS() and .Rdata and .rda files using load()."
  },
  {
    "objectID": "slides/05_exploring-data.html#notes-on-saving-and-loading-r-data",
    "href": "slides/05_exploring-data.html#notes-on-saving-and-loading-r-data",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Notes on Saving and Loading R Data",
    "text": "Notes on Saving and Loading R Data\nThe values in quotes are all filepaths, and by default, R will search for these objects in your current working directory.\nYou can change where R searches for images by adjusting this filepath. For example, if you save your data in a Data subfolder within your working directory, you might try"
  },
  {
    "objectID": "slides/05_exploring-data.html#other-types-of-data",
    "href": "slides/05_exploring-data.html#other-types-of-data",
    "title": "MATH167R: Importing and Exploring Data",
    "section": "Other types of data",
    "text": "Other types of data\nOften, you will read and write files as comma separated values, or .csv. You can do this by navigating File &gt; Import Dataset in the menu bar, but generally I recommend doing it manually using the readr package. You will need to do so if loading data is part of your work flow, such as if it is required for an R Markdown writeup."
  },
  {
    "objectID": "slides/02_objects-classes.html#warm-up-getting-to-know-each-other",
    "href": "slides/02_objects-classes.html#warm-up-getting-to-know-each-other",
    "title": "MATH167R: Basic Definitions",
    "section": "Warm-up: Getting to know each other",
    "text": "Warm-up: Getting to know each other\nIn groups of two or three, share:\n\nIntroduce yourself\nDiscuss what you think the following code does (feel free to try it out):\n\n\nsides &lt;- 1:6\nrolls &lt;- sample(sides, 100, replace = T)\nprint(sum(rolls == 1))"
  },
  {
    "objectID": "slides/02_objects-classes.html#overview-of-today",
    "href": "slides/02_objects-classes.html#overview-of-today",
    "title": "MATH167R: Basic Definitions",
    "section": "Overview of today",
    "text": "Overview of today\n\nBasic definitions: objects, expressions, functions, data types\nR Markdown and file management"
  },
  {
    "objectID": "slides/02_objects-classes.html#review",
    "href": "slides/02_objects-classes.html#review",
    "title": "MATH167R: Basic Definitions",
    "section": "Review",
    "text": "Review\n\n“To understand computations in R, two slogans are helpful: Everything that exists is an object. Everything that happens is a function call.”\n(Chambers, 2014)\n\nWe saw last class that we can use R to perform basic mathematical operations:\n\n3 + 5\n\n[1] 8"
  },
  {
    "objectID": "slides/02_objects-classes.html#expressions",
    "href": "slides/02_objects-classes.html#expressions",
    "title": "MATH167R: Basic Definitions",
    "section": "Expressions",
    "text": "Expressions\nWe saw last class that we can use R to perform basic mathematical operations:\n\n3 + 5\n\n[1] 8\n\n\nDefinition: an expression is a symbol or a combination of symbols that evaluates to a value.\n\n1 + 2\n\n[1] 3"
  },
  {
    "objectID": "slides/02_objects-classes.html#objects",
    "href": "slides/02_objects-classes.html#objects",
    "title": "MATH167R: Basic Definitions",
    "section": "Objects",
    "text": "Objects\nDefinition: An object is created when R evaluates an expression. The object is accessible only by name.\n\nAn anonymous object gets deleted from the computer memory by a process called garbage collection.\nA special object named .Last.value contains the value of the last evaluated expression (in console only)."
  },
  {
    "objectID": "slides/02_objects-classes.html#assignment",
    "href": "slides/02_objects-classes.html#assignment",
    "title": "MATH167R: Basic Definitions",
    "section": "Assignment",
    "text": "Assignment\nWe saw last class that we can assign names to values:\n\nx &lt;- 1 + 2\nx\n\n[1] 3\n\n\nDefinition: Assignment is an operation to bind an object to name, using the symbol &lt;-.\n\n= and &lt;- are not generally equivalent. However, they are equivalent when they are used as assignment operators.\n\nx = 1 + 2\nx\n\n[1] 3"
  },
  {
    "objectID": "slides/02_objects-classes.html#check-your-understanding-assignment",
    "href": "slides/02_objects-classes.html#check-your-understanding-assignment",
    "title": "MATH167R: Basic Definitions",
    "section": "Check your understanding: Assignment",
    "text": "Check your understanding: Assignment\nWhat do you expect the output of the following chunks to be?\n\nx &lt;- 1\ny &lt;- x + 1\nx &lt;- 0\nz &lt;- y + 1\nprint(z)\n\n\na &lt;- 1\nb &lt;- a + 1\nb &lt;- 2 * b\nprint(b)"
  },
  {
    "objectID": "slides/02_objects-classes.html#check-your-understanding-assignment-1",
    "href": "slides/02_objects-classes.html#check-your-understanding-assignment-1",
    "title": "MATH167R: Basic Definitions",
    "section": "Check your understanding: Assignment",
    "text": "Check your understanding: Assignment\nWhat do you expect the output of the following chunks to be?\n\nx &lt;- 1\ny &lt;- x + 1\nx &lt;- 0\nz &lt;- y + 1\nprint(z)\n\n[1] 3\n\n\n\na &lt;- 1\nb &lt;- a + 1\nb &lt;- 2 * b\nprint(b)\n\n[1] 4"
  },
  {
    "objectID": "slides/02_objects-classes.html#objects-and-data",
    "href": "slides/02_objects-classes.html#objects-and-data",
    "title": "MATH167R: Basic Definitions",
    "section": "Objects and data",
    "text": "Objects and data\nWe can use assignments to save values as named objects and perform math on the objects:\n\nx &lt;- 3\ny &lt;- 5\nx + y\n\n[1] 8\n\n\nToday we’ll see that R can handle objects that are not numbers:\n\nz &lt;- \"Hello\"\n\n\nHowever, we need to be careful because not all operations work with all types of data:\n\nx + z\n\nError in x + z: non-numeric argument to binary operator"
  },
  {
    "objectID": "slides/02_objects-classes.html#atomic-vectors",
    "href": "slides/02_objects-classes.html#atomic-vectors",
    "title": "MATH167R: Basic Definitions",
    "section": "Atomic vectors",
    "text": "Atomic vectors\nThe most basic type of object in R used for storing values is the atomic vector. The four most common types of atomic vectors are:\n\nlogical: ex. TRUE or FALSE\ninteger: ex. 1, 2, 3, 4, …\ndouble: ex. 3.1\ncharacter: ex. \"Hello\"\n\nIntegers and doubles are both also called numeric vectors."
  },
  {
    "objectID": "slides/02_objects-classes.html#atomic-vectors-1",
    "href": "slides/02_objects-classes.html#atomic-vectors-1",
    "title": "MATH167R: Basic Definitions",
    "section": "Atomic vectors",
    "text": "Atomic vectors\n\nfrom Advanced R, Hadley Wickham."
  },
  {
    "objectID": "slides/02_objects-classes.html#atomic-vectors-2",
    "href": "slides/02_objects-classes.html#atomic-vectors-2",
    "title": "MATH167R: Basic Definitions",
    "section": "Atomic vectors",
    "text": "Atomic vectors\n\nexample_lgc &lt;- T\nexample_int &lt;- 1L\nexample_dbl &lt;- 1.0\nexample_chr &lt;- \"Hello\"\n\nThe typeof function can be used to get the data type of an object.\n\n\ntypeof(example_lgc)\n\n[1] \"logical\"\n\ntypeof(example_int)\n\n[1] \"integer\"\n\ntypeof(example_dbl)\n\n[1] \"double\"\n\ntypeof(example_chr)\n\n[1] \"character\""
  },
  {
    "objectID": "slides/02_objects-classes.html#coercion",
    "href": "slides/02_objects-classes.html#coercion",
    "title": "MATH167R: Basic Definitions",
    "section": "Coercion",
    "text": "Coercion\n\nYou can explicitly change the type of an object:\n\nas.numeric(example_lgc)\n\n[1] 1\n\nas.numeric(example_chr)\n\n[1] NA\n\n\nWhen elements of different types are mixed in an atomic vector, R automatically converts all of them to the same type.\nOrder of precedence, from the highest to the lowest: character, numeric, integer, logical.\n\nc(TRUE, \"hello\", 1)\n\n[1] \"TRUE\"  \"hello\" \"1\""
  },
  {
    "objectID": "slides/02_objects-classes.html#special-values",
    "href": "slides/02_objects-classes.html#special-values",
    "title": "MATH167R: Basic Definitions",
    "section": "Special values",
    "text": "Special values\n\n\n\n\n\n\n\nValue\nUsual meaning\n\n\n\n\nNA\nMissing values\n\n\nNaN\na computed value that is not a number (try 1/0)\n\n\nNULL\nan object with no value\n\n\n-Inf and Inf\na computed value that is large (or large and negative)"
  },
  {
    "objectID": "slides/02_objects-classes.html#environment",
    "href": "slides/02_objects-classes.html#environment",
    "title": "MATH167R: Basic Definitions",
    "section": "Environment",
    "text": "Environment\nWhen R evaluates an expression such as x + 1, how does R locate the object associated with the name x?\n\nDuring an assignment, the binding between an object and its name is stored in an environment.\n\n\nWhen R starts, a global environment (sometimes called a workspace) is created; every subsequent assignment that takes place at the command prompt adds objects to this environment."
  },
  {
    "objectID": "slides/02_objects-classes.html#environment-1",
    "href": "slides/02_objects-classes.html#environment-1",
    "title": "MATH167R: Basic Definitions",
    "section": "Environment",
    "text": "Environment\nWe will see later that we can enter local environments within the global environment and define objects that are confined to these local environments.\nThe ls() command displays object in the current global environment.\nTo remove objects, we can use the rm() command."
  },
  {
    "objectID": "slides/02_objects-classes.html#operators",
    "href": "slides/02_objects-classes.html#operators",
    "title": "MATH167R: Basic Definitions",
    "section": "Operators",
    "text": "Operators\nAn operator is a symbol that tells the compiler to perform specific mathematical or logical operations.\nTypes of operators:\n\nAssignment operators\nArithmetic operators\nLogical operators\nRelational operators"
  },
  {
    "objectID": "slides/02_objects-classes.html#arithmetic-operators",
    "href": "slides/02_objects-classes.html#arithmetic-operators",
    "title": "MATH167R: Basic Definitions",
    "section": "Arithmetic Operators",
    "text": "Arithmetic Operators\n\n\n\n\n\n\n\n\nOperator\nOperation\nExample\n\n\n\n\n+\nAddition\n&gt; 3 + 4\n[1] 7\n\n\n-\nSubtraction\n&gt; 3 - 4\n[1] -1\n\n\n*\nMultiplication\n&gt; 3 * 4\n[1] 12\n\n\n/\nDivision\n&gt; 3 / 4\n[1] 0.75"
  },
  {
    "objectID": "slides/02_objects-classes.html#arithmetic-operators-1",
    "href": "slides/02_objects-classes.html#arithmetic-operators-1",
    "title": "MATH167R: Basic Definitions",
    "section": "Arithmetic Operators",
    "text": "Arithmetic Operators\n\n\n\n\n\n\n\n\nOperator\nOperation\nExample\n\n\n\n\n^ or **\nExponentiation\n&gt; 3 ^ 4\n[1] 81\n\n\n%%\nModulo\n&gt; 3 %% 4\n[1] 3"
  },
  {
    "objectID": "slides/02_objects-classes.html#logical-operators",
    "href": "slides/02_objects-classes.html#logical-operators",
    "title": "MATH167R: Basic Definitions",
    "section": "Logical Operators",
    "text": "Logical Operators\n\n\n\n\n\n\n\n\nOperator\nOperation\nExample\n\n\n\n\n&\nAND\n&gt; TRUE & FALSE\n[1] FALSE\n\n\n|\nOR\n&gt; TRUE & FALSE\n[1] TRUE\n\n\n!\nNOT\n&gt; !TRUE\n[1] FALSE"
  },
  {
    "objectID": "slides/02_objects-classes.html#relational-operators",
    "href": "slides/02_objects-classes.html#relational-operators",
    "title": "MATH167R: Basic Definitions",
    "section": "Relational Operators",
    "text": "Relational Operators\n\n\n\n\n\n\n\n\nOperator\nOperation\nExample\n\n\n\n\n&gt;\ngreater than\n&gt; 2 &gt; 1\n[1] TRUE\n\n\n&gt;=\ngreater than or equal to\n&gt; 2 &gt;= 1\n[1] TRUE\n\n\n==\nequal\n&gt; 2 == 1\n[1] FALSE\n\n\n&lt;=\nless than or equal to\n&gt; 2 &lt;= 1\n[1] FALSE\n\n\n&lt;\nless than\n&gt; 2 &lt; 1\n[1] FALSE\n\n\n!=\nnot equal to\n&gt; 2 != 1\n[1] TRUE"
  },
  {
    "objectID": "slides/02_objects-classes.html#relational-operators-1",
    "href": "slides/02_objects-classes.html#relational-operators-1",
    "title": "MATH167R: Basic Definitions",
    "section": "Relational Operators",
    "text": "Relational Operators\n\n\n\n\n\n\n\n\nOperator\nOperation\nExample\n\n\n\n\n!=\nnot equal to\n&gt; 2 != 1\n[1] TRUE"
  },
  {
    "objectID": "slides/02_objects-classes.html#check-your-understanding-operators",
    "href": "slides/02_objects-classes.html#check-your-understanding-operators",
    "title": "MATH167R: Basic Definitions",
    "section": "Check your understanding: Operators",
    "text": "Check your understanding: Operators\n\nTRUE & FALSE & TRUE\nTRUE & (FALSE | TRUE)\n1 &lt; 4\n(1 &lt; 4) & (3 &gt; 4)\n\n\nAnswers:\n\nTRUE & FALSE & TRUE\n\n[1] FALSE\n\nTRUE & (FALSE | TRUE)\n\n[1] TRUE\n\n1 &lt; 4\n\n[1] TRUE\n\n(1 &lt; 4) & (3 &gt; 4)\n\n[1] FALSE"
  },
  {
    "objectID": "slides/02_objects-classes.html#the-working-directory",
    "href": "slides/02_objects-classes.html#the-working-directory",
    "title": "MATH167R: Basic Definitions",
    "section": "The working directory",
    "text": "The working directory\n\nThe working directory is a folder where files are retrieved from or saved to by default.\nThe command getwd() gets the working directory, which usually is:\n\n/Users/USERNAME on Apple\nC:\\Users\\USERNAME\\Documents on Windows\n\nFiles on a computer are grouped into folders, which are organized in a hierarchy.\nThe absolute pathname of a file describes its location in the hierarchy."
  },
  {
    "objectID": "slides/02_objects-classes.html#relative-pathnames",
    "href": "slides/02_objects-classes.html#relative-pathnames",
    "title": "MATH167R: Basic Definitions",
    "section": "Relative pathnames",
    "text": "Relative pathnames\nThe relative pathname of a file specifies its location relative to the working directory.\n\nThe command setwd() sets the working directory for the current R session.\n\n\ngetwd()\nsetwd(\"/Users/pgao/Desktop\")\n\n\nOn Windows, add C: to the beginning of the absolute pathname.\n\n\ngetwd()\nsetwd(\"C:/Documents/\")"
  },
  {
    "objectID": "slides/02_objects-classes.html#example-file-structure",
    "href": "slides/02_objects-classes.html#example-file-structure",
    "title": "MATH167R: Basic Definitions",
    "section": "Example file structure",
    "text": "Example file structure"
  },
  {
    "objectID": "slides/02_objects-classes.html#project-based-workflow",
    "href": "slides/02_objects-classes.html#project-based-workflow",
    "title": "MATH167R: Basic Definitions",
    "section": "Project-based workflow",
    "text": "Project-based workflow\nIn this class, I encourage you to organize all your code/assignments/files into a single MATH167R folder.\nOnce you create this folder, you can create an RStudio Project, which will create a file that tells RStudio that all the code in the folder is associated with a single project.\nAny code in the project folder assumes that the working directory is the project root directory. This ensures that the project can be moved around your computer or onto another computer and none of the paths will break."
  },
  {
    "objectID": "slides/02_objects-classes.html#example-file-structure-for-math167r",
    "href": "slides/02_objects-classes.html#example-file-structure-for-math167r",
    "title": "MATH167R: Basic Definitions",
    "section": "Example file structure for MATH167R",
    "text": "Example file structure for MATH167R\nMATH167R\n├── labs\n│   ├── 01_lab.R\n│   └── 02_lab.R\n├── checkins\n│   ├── 01_checkin.R\n│   └── 02_checkin.R\n├── project\n│   └── data\n│       └── trees.csv\n└── exams"
  },
  {
    "objectID": "slides/02_objects-classes.html#naming-files",
    "href": "slides/02_objects-classes.html#naming-files",
    "title": "MATH167R: Basic Definitions",
    "section": "Naming files",
    "text": "Naming files\nTips from Jenny Bryan:\n\nmachine readable\nhuman readable\nplays well with default ordering"
  },
  {
    "objectID": "slides/02_objects-classes.html#naming-files-1",
    "href": "slides/02_objects-classes.html#naming-files-1",
    "title": "MATH167R: Basic Definitions",
    "section": "Naming files",
    "text": "Naming files\n\n\nBad\n\nnewfinal2actualFINALnew.docx\nmy first lab.R\nstuff.R\n\n\nGood:\n\n01_lab1.Rmd\nanalysis_functions.R\n2020-01-08_labWriteup.Rmd"
  },
  {
    "objectID": "slides/02_objects-classes.html#r-markdown-1",
    "href": "slides/02_objects-classes.html#r-markdown-1",
    "title": "MATH167R: Basic Definitions",
    "section": "R Markdown",
    "text": "R Markdown\nR Markdown files (see examples here)\n\nCombine code, output, and writing\nSelf-contained analyses\nCreates HTML, PDF, slides (like these!), webpages, …\nwill be required for assignments"
  },
  {
    "objectID": "slides/02_objects-classes.html#your-first-rmarkdown-file",
    "href": "slides/02_objects-classes.html#your-first-rmarkdown-file",
    "title": "MATH167R: Basic Definitions",
    "section": "Your first RMarkdown file",
    "text": "Your first RMarkdown file\nOpen 01_first-R-lab.Rmd in RStudio. At the top of the file, you should see the following header:\n---\ntitle: \"Lab 1: Basic Definitions\"\nauthor: \"YOUR NAME HERE\"\ndate: \"2023-08-21\"\noutput: html_document\n---\nThis header contains metadata about the document that follows: the name of the file, the author, the date, and what kind of output it will create."
  },
  {
    "objectID": "slides/02_objects-classes.html#source-editor",
    "href": "slides/02_objects-classes.html#source-editor",
    "title": "MATH167R: Basic Definitions",
    "section": "Source Editor",
    "text": "Source Editor"
  },
  {
    "objectID": "slides/02_objects-classes.html#visual-editor",
    "href": "slides/02_objects-classes.html#visual-editor",
    "title": "MATH167R: Basic Definitions",
    "section": "Visual Editor",
    "text": "Visual Editor"
  },
  {
    "objectID": "slides/02_objects-classes.html#code-chunks",
    "href": "slides/02_objects-classes.html#code-chunks",
    "title": "MATH167R: Basic Definitions",
    "section": "Code chunks",
    "text": "Code chunks\nCode chunks contain R code that is evaluated when you render your R Markdown report. You can insert a code chunk by clicking Insert &gt; Code Chunk or by typing the chunk delimiters ```{r} and ``` .\nChunk output can be customized with optional arguments set in the {} of a chunk header, as we will see in Lab 01."
  },
  {
    "objectID": "slides/02_objects-classes.html#r-markdown-and-directory-weirdness",
    "href": "slides/02_objects-classes.html#r-markdown-and-directory-weirdness",
    "title": "MATH167R: Basic Definitions",
    "section": "R Markdown (and directory weirdness)",
    "text": "R Markdown (and directory weirdness)\n\nR Markdown handles all the tricky file management–just put the file you want to access in the same folder as your .Rmd file\nThis can be confusing/frustrating—patience is key!\nTry downloading the sample code 01_lab-test-code.R from [here](../static/01_lab-test-code.R) and putting it in the same folder as your Lab 01 R Markdown report."
  },
  {
    "objectID": "slides/02_objects-classes.html#r-markdown-2",
    "href": "slides/02_objects-classes.html#r-markdown-2",
    "title": "MATH167R: Basic Definitions",
    "section": "R Markdown",
    "text": "R Markdown\nRemember the following:\n\nR Markdown produces fully reproducible reports – each time you render, you run the analyis from the beginning\nCode goes in chunks, while the explanation/narrative goes outside of chunks\nRStudio now provides a visual editor for a familiar / Google docs-like editing experience"
  },
  {
    "objectID": "slides/02_objects-classes.html#lab-1",
    "href": "slides/02_objects-classes.html#lab-1",
    "title": "MATH167R: Basic Definitions",
    "section": "Lab 1",
    "text": "Lab 1\nIn Lab 1, we’ll make sure R and RStudio are properly installed and updated, practice assigning objects, and generate your first R Markdown report (in a properly organized directory)."
  },
  {
    "objectID": "slides/11_spatial-data.html#overview-of-today",
    "href": "slides/11_spatial-data.html#overview-of-today",
    "title": "MATH167R: Spatial data analysis",
    "section": "Overview of today",
    "text": "Overview of today\n\nVisualizing spatial data\nMerging data\nProject work time"
  },
  {
    "objectID": "slides/11_spatial-data.html#loading-project-data",
    "href": "slides/11_spatial-data.html#loading-project-data",
    "title": "MATH167R: Spatial data analysis",
    "section": "Loading project data",
    "text": "Loading project data\nToday we’ll practice working with spatial data. In R, most basic GIS (geographic information system) tasks can be carried out using the sf package, which you can install using install.packages(\"sf\"). Today we’ll also be using tidyverse packages.\n\nlibrary(sf)\nlibrary(knitr)\nlibrary(tidyverse)\nba_rent &lt;- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-07-05/rent.csv\")"
  },
  {
    "objectID": "slides/11_spatial-data.html#craigslist-rental-data",
    "href": "slides/11_spatial-data.html#craigslist-rental-data",
    "title": "MATH167R: Spatial data analysis",
    "section": "Craigslist rental data",
    "text": "Craigslist rental data\nThis dataset provides Craigslist rental listings for the Bay Area, from 2000-2018. It was originally collected by Dr. Kate Pennington, whose methodology you can read about here.\n\nhead(ba_rent)\n\n# A tibble: 6 × 17\n  post_id      date  year nhood city  county price  beds baths  sqft room_in_apt\n  &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;\n1 pre2013_1… 2.01e7  2005 alam… alam… alame…  1250     2     2    NA           0\n2 pre2013_1… 2.01e7  2005 alam… alam… alame…  1295     2    NA    NA           0\n3 pre2013_1… 2.00e7  2004 alam… alam… alame…  1100     2    NA    NA           0\n4 pre2013_6… 2.01e7  2012 alam… alam… alame…  1425     1    NA   735           0\n5 pre2013_1… 2.00e7  2004 alam… alam… alame…   890     1    NA    NA           0\n6 pre2013_1… 2.01e7  2006 alam… alam… alame…   825     1    NA    NA           0\n# ℹ 6 more variables: address &lt;chr&gt;, lat &lt;dbl&gt;, lon &lt;dbl&gt;, title &lt;chr&gt;,\n#   descr &lt;chr&gt;, details &lt;chr&gt;"
  },
  {
    "objectID": "slides/11_spatial-data.html#craigslist-rental-data-variables",
    "href": "slides/11_spatial-data.html#craigslist-rental-data-variables",
    "title": "MATH167R: Spatial data analysis",
    "section": "Craigslist rental data variables",
    "text": "Craigslist rental data variables\n\n\n\n\nvariable\nclass\ndescription\n\n\n\n\npost_id\ncharacter\nUnique ID\n\n\ndate\ndouble\ndate\n\n\nyear\ndouble\nyear\n\n\nnhood\ncharacter\nneighborhood\n\n\ncity\ncharacter\ncity\n\n\ncounty\ncharacter\ncounty\n\n\nprice\ndouble\nprice in USD\n\n\nbeds\ndouble\nn of beds\n\n\nbaths\ndouble\nn of baths\n\n\nsqft\ndouble\nsquare feet of rental\n\n\nroom_in_apt\ndouble\nroom in apartment\n\n\naddress\ncharacter\naddress\n\n\nlat\ndouble\nlatitude\n\n\nlon\ndouble\nlongitude\n\n\ntitle\ncharacter\ntitle of listing\n\n\ndescr\ncharacter\ndescription\n\n\ndetails\ncharacter\nadditional details"
  },
  {
    "objectID": "slides/11_spatial-data.html#craigslist-rental-data-1",
    "href": "slides/11_spatial-data.html#craigslist-rental-data-1",
    "title": "MATH167R: Spatial data analysis",
    "section": "Craigslist rental data",
    "text": "Craigslist rental data"
  },
  {
    "objectID": "slides/11_spatial-data.html#basic-summaries",
    "href": "slides/11_spatial-data.html#basic-summaries",
    "title": "MATH167R: Spatial data analysis",
    "section": "Basic summaries",
    "text": "Basic summaries\nReview: What does the following code produce?\n\nba_rent |&gt;\n  filter(beds == 2, year == 2010) |&gt;\n  group_by(city) |&gt;\n  summarize(mean_price = mean(price, na.rm = T)) |&gt;\n  arrange(mean_price) |&gt;\n  kable()\n\n\n\n\n\n\n\ncity\nmean_price\n\n\n\n\nsan leandro\n700.0000\n\n\nrichmond\n910.0000\n\n\nfairfield\n922.7273\n\n\nsf bay area\n925.0000\n\n\ngilroy\n1000.0000\n\n\nrohnert park\n1061.1111\n\n\nconcord\n1098.1818\n\n\nvallejo\n1141.4286\n\n\nsanta rosa\n1161.0000\n\n\nhayward\n1178.8571\n\n\nel sobrante\n1197.8571\n\n\nalameda\n1250.0000\n\n\npittsburg\n1259.6667\n\n\nsonoma\n1330.0000\n\n\ncambrian\n1350.0000\n\n\nfairfax\n1395.0000\n\n\ndublin\n1431.3333\n\n\nmorgan hill\n1439.0000\n\n\nlivermore\n1447.0000\n\n\nwoodacre\n1450.0000\n\n\nlos gatos\n1472.5000\n\n\npetaluma\n1491.1429\n\n\nunion city\n1498.6500\n\n\noakland\n1512.3529\n\n\nmilpitas\n1528.0000\n\n\nwalnut creek\n1548.0000\n\n\nnapa county\n1565.0000\n\n\ncampbell\n1570.8750\n\n\nredwood city\n1575.5000\n\n\nel cerrito\n1581.2500\n\n\nnovato\n1615.5000\n\n\nbelmont\n1622.5000\n\n\npacifica\n1630.7500\n\n\nsunnyvale\n1657.0588\n\n\nsan jose\n1669.1818\n\n\nsan ramon\n1683.3333\n\n\nmountain view\n1726.3000\n\n\nsanta clara\n1780.6190\n\n\ncorte madera\n1799.0000\n\n\nberkeley\n1842.0417\n\n\nlarkspur\n1847.5000\n\n\nsan mateo\n1909.3333\n\n\nlos altos\n1923.7500\n\n\ncupertino\n1936.8889\n\n\nfoster city\n2017.2500\n\n\nsan bruno\n2047.5000\n\n\nsanta cruz\n2100.0000\n\n\npalo alto\n2110.0000\n\n\nmill valley\n2124.0000\n\n\nsan rafael\n2152.8750\n\n\norinda\n2175.0000\n\n\nsausalito\n2236.0000\n\n\ndaly city\n2252.5000\n\n\nmenlo park\n2327.5000\n\n\nemeryville\n2331.6667\n\n\nwoodside\n2400.0000\n\n\nburlingame\n2575.0000\n\n\nsan anselmo\n2750.0000\n\n\nsan francisco\n2800.2436\n\n\nbelvedere\n2806.6667\n\n\nhealdsburg\n4500.0000"
  },
  {
    "objectID": "slides/11_spatial-data.html#simple-features",
    "href": "slides/11_spatial-data.html#simple-features",
    "title": "MATH167R: Spatial data analysis",
    "section": "Simple features",
    "text": "Simple features\nSimple Features is a set of standards for storing and accessing geographic data.\n\nGeographic data typically consist of geometries such as points, lines, and polygons\nIn R, the most popular package for working with simple features data is sf.\nWorking with spatial data can be extremely memory intensive, so care is needed."
  },
  {
    "objectID": "slides/11_spatial-data.html#working-with-point-data",
    "href": "slides/11_spatial-data.html#working-with-point-data",
    "title": "MATH167R: Spatial data analysis",
    "section": "Working with point data",
    "text": "Working with point data\nOur ba_rent data frame already has latitude and longitude, but many points are missing:\n\nsummary(ba_rent$lat)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  33.57   37.40   37.76   37.67   37.80   40.43  193145 \n\nsummary(ba_rent$lon)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n -123.2  -122.4  -122.3  -122.2  -122.0   -74.2  196484 \n\n\n\nCompare the number of NA values with the total rows:\n\n\n\nnrow(ba_rent)\n\n[1] 200796"
  },
  {
    "objectID": "slides/11_spatial-data.html#working-with-point-data-1",
    "href": "slides/11_spatial-data.html#working-with-point-data-1",
    "title": "MATH167R: Spatial data analysis",
    "section": "Working with point data",
    "text": "Working with point data\nLet’s just work with the entries for which we have data from the year 2018.\n\nba_rent_geo &lt;- ba_rent |&gt;\n  filter(!is.na(lat) & !is.na(lon))\nnrow(ba_rent_geo)\n\n[1] 4311\n\n\nWe have extremely limited data in this time frame."
  },
  {
    "objectID": "slides/11_spatial-data.html#converting-data-to-sf-object",
    "href": "slides/11_spatial-data.html#converting-data-to-sf-object",
    "title": "MATH167R: Spatial data analysis",
    "section": "Converting data to sf object",
    "text": "Converting data to sf object\nWhen each row in our data frame refers to a point with longitude and latitude, we can use the st_as_sf function to convert our data frame to an sf object.\n\nba_rent_geo &lt;- ba_rent_geo |&gt;\n  st_as_sf(coords = c(\"lon\", \"lat\"), crs = st_crs(4326))\nba_rent_geo\n\nSimple feature collection with 4311 features and 15 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -123.1965 ymin: 33.97564 xmax: -74.19802 ymax: 40.43494\nGeodetic CRS:  WGS 84\n# A tibble: 4,311 × 16\n   post_id     date  year nhood city  county price  beds baths  sqft room_in_apt\n * &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;\n 1 43283531… 2.01e7  2014 alam… alam… alame…  1450     1    NA   640           0\n 2 48659165… 2.02e7  2015 alam… alam… alame…  2100     1     1    NA           0\n 3 48172274… 2.01e7  2014 alam… alam… alame…  1939     2     1   864           0\n 4 35443866… 2.01e7  2013 alam… alam… alame…  2650     3    NA  2400           0\n 5 46673146… 2.01e7  2014 alam… alam… alame…   600     0    NA    NA           0\n 6 47108881… 2.01e7  2014 alam… alam… alame…  2250     2     1  1080           0\n 7 59557241… 2.02e7  2017 alam… alam… alame…  3900     3     2    NA           0\n 8 59619891… 2.02e7  2017 alam… alam… alame…  3995     3     2  1787           0\n 9 42680700… 2.01e7  2014 alam… alam… alame…  7200     5    NA  3400           0\n10 49351757… 2.02e7  2015 alam… alam… alame…  2536     2     2  1225           0\n# ℹ 4,301 more rows\n# ℹ 5 more variables: address &lt;chr&gt;, title &lt;chr&gt;, descr &lt;chr&gt;, details &lt;chr&gt;,\n#   geometry &lt;POINT [°]&gt;"
  },
  {
    "objectID": "slides/11_spatial-data.html#visualizing-point-data",
    "href": "slides/11_spatial-data.html#visualizing-point-data",
    "title": "MATH167R: Spatial data analysis",
    "section": "Visualizing point data",
    "text": "Visualizing point data\nWe can easily visualize this data now using the geom_sf() function, which automatically handles sf objects.\n\nggplot(ba_rent_geo) + geom_sf()"
  },
  {
    "objectID": "slides/11_spatial-data.html#visualizing-point-data-1",
    "href": "slides/11_spatial-data.html#visualizing-point-data-1",
    "title": "MATH167R: Spatial data analysis",
    "section": "Visualizing point data",
    "text": "Visualizing point data\nWe can add a basemap using the annotation_map_tile function from the ggspatial package.\n\nlibrary(ggspatial)\nggplot(ba_rent_geo) + \n  annotation_map_tile(zoomin = -1) +\n  geom_sf()"
  },
  {
    "objectID": "slides/11_spatial-data.html#removing-extra-point",
    "href": "slides/11_spatial-data.html#removing-extra-point",
    "title": "MATH167R: Spatial data analysis",
    "section": "Removing extra point",
    "text": "Removing extra point\nWe can remove points outside a certain box using the st_crop function:\n\nbox = c(xmin = -130, ymin = 36.5, xmax = -120, ymax = 40)\nba_rent_geo &lt;- ba_rent_geo |&gt;\n  st_crop(box)\nggplot(ba_rent_geo) + \n  annotation_map_tile(zoomin = -1) +\n  geom_sf()"
  },
  {
    "objectID": "slides/11_spatial-data.html#theme-and-customization",
    "href": "slides/11_spatial-data.html#theme-and-customization",
    "title": "MATH167R: Spatial data analysis",
    "section": "Theme and customization",
    "text": "Theme and customization\nWe can then adjust the color to show price and also change the color scale:\n\nggplot(ba_rent_geo, aes(color = price)) + \n  annotation_map_tile(zoomin = -1) +\n  geom_sf(alpha = 0.75, size = 0.75) +\n  scale_color_viridis_c()"
  },
  {
    "objectID": "slides/11_spatial-data.html#spatial-polygon-data",
    "href": "slides/11_spatial-data.html#spatial-polygon-data",
    "title": "MATH167R: Spatial data analysis",
    "section": "Spatial polygon data",
    "text": "Spatial polygon data\nAlthough we do not have complete coordinate data, we have good information about county:\n\nsum(is.na(ba_rent$county))\n\n[1] 1394\n\nunique(ba_rent$county)\n\n [1] \"alameda\"       \"san francisco\" \"contra costa\"  \"santa clara\"  \n [5] \"napa\"          \"san mateo\"     \"santa cruz\"    \"sonoma\"       \n [9] \"marin\"         \"solano\"        NA"
  },
  {
    "objectID": "slides/11_spatial-data.html#spatial-polygon-data-1",
    "href": "slides/11_spatial-data.html#spatial-polygon-data-1",
    "title": "MATH167R: Spatial data analysis",
    "section": "Spatial polygon data",
    "text": "Spatial polygon data\nWe can create a county level summary table for the median rent by county for 2015:\n\ncounty_rent_15 &lt;- ba_rent %&gt;%\n  filter(beds == 1, year == 2015, !is.na(county)) |&gt;\n  group_by(county) |&gt;\n  summarize(median_rent = median(price, na.rm = T))\ncounty_rent_15\n\n# A tibble: 10 × 2\n   county        median_rent\n   &lt;chr&gt;               &lt;dbl&gt;\n 1 alameda             1950 \n 2 contra costa        1475 \n 3 marin               2188 \n 4 napa                1642.\n 5 san francisco       3227 \n 6 san mateo           2465 \n 7 santa clara         2228 \n 8 santa cruz          1650 \n 9 solano              1292 \n10 sonoma              1495"
  },
  {
    "objectID": "slides/11_spatial-data.html#spatial-polygon-data-2",
    "href": "slides/11_spatial-data.html#spatial-polygon-data-2",
    "title": "MATH167R: Spatial data analysis",
    "section": "Spatial polygon data",
    "text": "Spatial polygon data\nWe will then connect this summary table to an sf object. We can load US county data using the tigris package.\n\nlibrary(tigris)\nca_counties &lt;- counties(\"California\", cb = TRUE)\n\n\n# convert county names to lower case\nca_counties &lt;- ca_counties |&gt;\n  mutate(county = stringr::str_to_lower(NAME))\nca_counties\n\nSimple feature collection with 58 features and 13 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -124.4096 ymin: 32.53444 xmax: -114.1312 ymax: 42.00948\nGeodetic CRS:  NAD83\nFirst 10 features:\n    STATEFP COUNTYFP COUNTYNS       AFFGEOID GEOID        NAME\n48       06      059 00277294 0500000US06059 06059      Orange\n51       06      111 00277320 0500000US06111 06111     Ventura\n95       06      063 00277296 0500000US06063 06063      Plumas\n182      06      015 01682074 0500000US06015 06015   Del Norte\n246      06      023 01681908 0500000US06023 06023    Humboldt\n254      06      043 00277286 0500000US06043 06043    Mariposa\n327      06      037 00277283 0500000US06037 06037 Los Angeles\n340      06      065 00277297 0500000US06065 06065   Riverside\n341      06      101 00277315 0500000US06101 06101      Sutter\n342      06      113 00277321 0500000US06113 06113        Yolo\n              NAMELSAD STUSPS STATE_NAME LSAD       ALAND     AWATER\n48       Orange County     CA California   06  2053476505  406279630\n51      Ventura County     CA California   06  4767622161  947345735\n95       Plumas County     CA California   06  6612400772  156387638\n182   Del Norte County     CA California   06  2606118035  578742633\n246    Humboldt County     CA California   06  9241565229 1253726036\n254    Mariposa County     CA California   06  3752476985   36220865\n327 Los Angeles County     CA California   06 10513508620 1787475204\n340   Riverside County     CA California   06 18671924669  242973907\n341      Sutter County     CA California   06  1560975503   14811541\n342        Yolo County     CA California   06  2628145869   22877242\n                          geometry      county\n48  MULTIPOLYGON (((-118.1144 3...      orange\n51  MULTIPOLYGON (((-119.4412 3...     ventura\n95  MULTIPOLYGON (((-121.497 40...      plumas\n182 MULTIPOLYGON (((-124.2175 4...   del norte\n246 MULTIPOLYGON (((-124.4086 4...    humboldt\n254 MULTIPOLYGON (((-120.3944 3...    mariposa\n327 MULTIPOLYGON (((-118.6044 3... los angeles\n340 MULTIPOLYGON (((-117.6767 3...   riverside\n341 MULTIPOLYGON (((-121.9483 3...      sutter\n342 MULTIPOLYGON (((-122.4215 3...        yolo"
  },
  {
    "objectID": "slides/11_spatial-data.html#joining-spatial-data",
    "href": "slides/11_spatial-data.html#joining-spatial-data",
    "title": "MATH167R: Spatial data analysis",
    "section": "Joining spatial data",
    "text": "Joining spatial data\nIf we want to keep only the counties for which we have data, we must use a right_join starting with ca_counties:\n\nca_counties &lt;- ca_counties |&gt;\n  right_join(county_rent_15, by = \"county\")\nca_counties\n\nSimple feature collection with 10 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -123.5335 ymin: 36.85065 xmax: -121.2082 ymax: 38.86424\nGeodetic CRS:  NAD83\n   STATEFP COUNTYFP COUNTYNS       AFFGEOID GEOID          NAME\n1       06      081 00277305 0500000US06081 06081     San Mateo\n2       06      041 00277285 0500000US06041 06041         Marin\n3       06      095 00277312 0500000US06095 06095        Solano\n4       06      001 01675839 0500000US06001 06001       Alameda\n5       06      055 00277292 0500000US06055 06055          Napa\n6       06      013 01675903 0500000US06013 06013  Contra Costa\n7       06      097 01657246 0500000US06097 06097        Sonoma\n8       06      085 00277307 0500000US06085 06085   Santa Clara\n9       06      087 00277308 0500000US06087 06087    Santa Cruz\n10      06      075 00277302 0500000US06075 06075 San Francisco\n               NAMELSAD STUSPS STATE_NAME LSAD      ALAND    AWATER\n1      San Mateo County     CA California   06 1161922042 757123906\n2          Marin County     CA California   06 1347889807 797077678\n3         Solano County     CA California   06 2128527683 218619356\n4        Alameda County     CA California   06 1910017353 216902808\n5           Napa County     CA California   06 1938032964 104262608\n6   Contra Costa County     CA California   06 1856838508 225278783\n7         Sonoma County     CA California   06 4080864785 498081645\n8    Santa Clara County     CA California   06 3343892720  33595850\n9     Santa Cruz County     CA California   06 1152823584 419714230\n10 San Francisco County     CA California   06  121507089 479146790\n          county median_rent                       geometry\n1      san mateo      2465.0 MULTIPOLYGON (((-122.5209 3...\n2          marin      2188.0 MULTIPOLYGON (((-122.4463 3...\n3         solano      1292.0 MULTIPOLYGON (((-122.4035 3...\n4        alameda      1950.0 MULTIPOLYGON (((-122.3423 3...\n5           napa      1642.5 MULTIPOLYGON (((-122.6464 3...\n6   contra costa      1475.0 MULTIPOLYGON (((-122.4298 3...\n7         sonoma      1495.0 MULTIPOLYGON (((-123.5331 3...\n8    santa clara      2228.0 MULTIPOLYGON (((-122.2027 3...\n9     santa cruz      1650.0 MULTIPOLYGON (((-122.3177 3...\n10 san francisco      3227.0 MULTIPOLYGON (((-122.3323 3..."
  },
  {
    "objectID": "slides/11_spatial-data.html#visualizing-polygon-data",
    "href": "slides/11_spatial-data.html#visualizing-polygon-data",
    "title": "MATH167R: Spatial data analysis",
    "section": "Visualizing polygon data",
    "text": "Visualizing polygon data\nWe can now use the geom_sf() function to visualize our data.\n\nggplot(ca_counties, aes(fill = median_rent)) +\n  geom_sf()"
  },
  {
    "objectID": "slides/11_spatial-data.html#themes-and-customization",
    "href": "slides/11_spatial-data.html#themes-and-customization",
    "title": "MATH167R: Spatial data analysis",
    "section": "Themes and customization",
    "text": "Themes and customization\n\nggplot(ca_counties, aes(fill = median_rent)) +\n  geom_sf() +\n  scale_fill_viridis_c(name = \"Median Rent\") +\n  ggtitle(\"Median 1BR rent by county, Bay Area, 2015\",\n           subtitle = \"based on Craigslist rental listings\") +\n  theme_minimal()"
  },
  {
    "objectID": "slides/18_simulations.html#overview-of-today",
    "href": "slides/18_simulations.html#overview-of-today",
    "title": "MATH167R: Simulations",
    "section": "Overview of today",
    "text": "Overview of today\n\nRandom variables in R\nThe r, p, d, and q functions\nWriting simulations"
  },
  {
    "objectID": "slides/18_simulations.html#random-variables-in-r",
    "href": "slides/18_simulations.html#random-variables-in-r",
    "title": "MATH167R: Simulations",
    "section": "Random variables in R",
    "text": "Random variables in R\nWe have already seen"
  },
  {
    "objectID": "slides/18_simulations.html#the-r-p-d-and-q-functions",
    "href": "slides/18_simulations.html#the-r-p-d-and-q-functions",
    "title": "MATH167R: Simulations",
    "section": "The r, p, d, and q functions",
    "text": "The r, p, d, and q functions\n\nrnorm() can be used to generate n random observations from a normal distribution:\n\n\nrnorm(n = 1, mean = 0, sd = 1)\n\n[1] 0.4004343\n\n\n\npnorm() can be used to compute the distribution function at a value q:\n\n\npnorm(q = 1, mean = 0, sd = 1)\n\n[1] 0.8413447\n\n\n\nqnorm() can be used to compute the quantile function at a percentile p:\n\n\nqnorm(p = .75, mean = 0, sd = 1)\n\n[1] 0.6744898\n\n\n\ndnorm() can be used to compute the density function at a value x:\n\n\ndnorm(x = .5, mean = 0, sd = 1)\n\n[1] 0.3520653"
  },
  {
    "objectID": "slides/18_simulations.html#exercise",
    "href": "slides/18_simulations.html#exercise",
    "title": "MATH167R: Simulations",
    "section": "Exercise",
    "text": "Exercise\nSuppose we perform a hypothesis test using a normal distribution and obtain a z-score of -1.24. How would we compute the p-value?"
  },
  {
    "objectID": "slides/18_simulations.html#random-seeds",
    "href": "slides/18_simulations.html#random-seeds",
    "title": "MATH167R: Simulations",
    "section": "Random seeds",
    "text": "Random seeds\nRemember that set.seed() can be used to ensure that you obtain the same results each time you run your code.\nFor example, if you include the command x &lt;- rnorm(1) in an .Rmd document with running set.seed(), each time you knit, you will produce a different value of x.\n\nset.seed(1022)\nrnorm(n = 1, mean = 0, sd = 1)\n\n[1] -0.6303919"
  },
  {
    "objectID": "slides/18_simulations.html#writing-simulations",
    "href": "slides/18_simulations.html#writing-simulations",
    "title": "MATH167R: Simulations",
    "section": "Writing simulations",
    "text": "Writing simulations\nSuppose we wish to compute the expected value (or some other summary) of the gambler’s winnings. We can either:\n\nAnalytically compute the quantity of interest\nWrite code to repeatedly simulate values of the gambler’s winnings and then summarize these values"
  },
  {
    "objectID": "slides/18_simulations.html#monte-carlo-methods",
    "href": "slides/18_simulations.html#monte-carlo-methods",
    "title": "MATH167R: Simulations",
    "section": "Monte Carlo methods",
    "text": "Monte Carlo methods"
  },
  {
    "objectID": "slides/18_simulations.html#example-transformations-of-random-variables",
    "href": "slides/18_simulations.html#example-transformations-of-random-variables",
    "title": "MATH167R: Simulations",
    "section": "Example: Transformations of random variables",
    "text": "Example: Transformations of random variables\nSuppose \\(X_i\\sim N(0, 1)\\) for \\(1\\leq i\\leq n\\), for some \\(n\\). What is \\(E(\\mathrm{max}(X_1,\\ldots, X_n))?\\) How does \\(E(\\mathrm{max}(X_1,\\ldots, X_n))\\) change for different values of \\(n\\)?\n\nset.seed(1022)\nn_sim &lt;- 1000\nn &lt;- 10\nmaxes &lt;- numeric(n_sim)\nfor (i in 1:n_sim) {\n  maxes[i] &lt;- max(rnorm(n))\n}\nmean(maxes)\n\n[1] 1.547503\n\n\n\nWhat about for \\(n=100\\)? Should the expected maximum be larger or smaller?\n\n\n\nn_sim &lt;- 1000\nn &lt;- 100\nmaxes &lt;- numeric(n_sim)\nfor (i in 1:n_sim) {\n  maxes[i] &lt;- max(rnorm(n))\n}\nmean(maxes)\n\n[1] 2.51509"
  },
  {
    "objectID": "slides/18_simulations.html#example-transformations-of-random-variables-1",
    "href": "slides/18_simulations.html#example-transformations-of-random-variables-1",
    "title": "MATH167R: Simulations",
    "section": "Example: Transformations of random variables",
    "text": "Example: Transformations of random variables\nSuppose \\(X\\sim N(0, 1)\\). What is \\(E(e^X)\\)?\n\ni &lt;- function(d) {\n  print(d)\n  if (!is.numeric(d)) {\n    stop(\"`d` must be numeric\", call. = FALSE)\n  }\n  d + 10\n}\nf(\"a\")\n\nError in f(\"a\"): could not find function \"f\""
  },
  {
    "objectID": "slides/18_simulations.html#random-walks",
    "href": "slides/18_simulations.html#random-walks",
    "title": "MATH167R: Simulations",
    "section": "Random walks",
    "text": "Random walks"
  },
  {
    "objectID": "slides/18_simulations.html#gamblers-ruin",
    "href": "slides/18_simulations.html#gamblers-ruin",
    "title": "MATH167R: Simulations",
    "section": "Gambler’s ruin",
    "text": "Gambler’s ruin"
  },
  {
    "objectID": "slides/15_environment-scope.html#overview-of-today",
    "href": "slides/15_environment-scope.html#overview-of-today",
    "title": "MATH167R: Environment and Scope",
    "section": "Overview of today",
    "text": "Overview of today\n\nAdvanced functions\nEnvironments and scope (based on Advanced R by Hadley Wickham)\nLab time"
  },
  {
    "objectID": "slides/15_environment-scope.html#function-composition",
    "href": "slides/15_environment-scope.html#function-composition",
    "title": "MATH167R: Environment and Scope",
    "section": "Function composition",
    "text": "Function composition\nIn mathematics, function composition is an operation that combines functions:\nFor example, if \\(f(x) = x^2\\) and \\(g(x)=x+2\\), what is \\(f(g(x))\\)?\nThroughout this class we have been composing functions:\n\nx &lt;- 1:10\nprint(sum(x))\n\n[1] 55\n\n\n\nWe can also compose functions using pipes:\n\nx |&gt; sum() |&gt; print()\n\n[1] 55"
  },
  {
    "objectID": "slides/15_environment-scope.html#function-structure-in-r",
    "href": "slides/15_environment-scope.html#function-structure-in-r",
    "title": "MATH167R: Environment and Scope",
    "section": "Function structure in R",
    "text": "Function structure in R\nMost functions in R have three parts:\n\nformals(): the list of formal arguments\nbody(): the code inside the functio\nenvironment(): the data structure that determines how objects and values are found when evaluating the function"
  },
  {
    "objectID": "slides/15_environment-scope.html#environments-and-scoping",
    "href": "slides/15_environment-scope.html#environments-and-scoping",
    "title": "MATH167R: Environment and Scope",
    "section": "Environments and scoping",
    "text": "Environments and scoping\nPreviously, we talked about assignment in R, which binds names to values.\nToday we’ll talk about scoping, which involves finding a value associated with a name.\nExercise: What will the following code return?\n\nx &lt;- 10\nmy_function &lt;- function() {\n  return(x)\n}\nmy_function()\n\n\n\n\n[1] 10"
  },
  {
    "objectID": "slides/15_environment-scope.html#environments-and-scoping-1",
    "href": "slides/15_environment-scope.html#environments-and-scoping-1",
    "title": "MATH167R: Environment and Scope",
    "section": "Environments and scoping",
    "text": "Environments and scoping\nExercise: What about this code?\n\nx &lt;- 10\nmy_function &lt;- function() {\n  x &lt;- 20\n  return(x)\n}\nmy_function()\n\n\n\n\n[1] 20"
  },
  {
    "objectID": "slides/15_environment-scope.html#lexical-scoping",
    "href": "slides/15_environment-scope.html#lexical-scoping",
    "title": "MATH167R: Environment and Scope",
    "section": "Lexical scoping",
    "text": "Lexical scoping\nR generally uses lexical scoping meaning that a function accesses values of names based on how the function is defined and not how it is called."
  },
  {
    "objectID": "slides/15_environment-scope.html#name-masking",
    "href": "slides/15_environment-scope.html#name-masking",
    "title": "MATH167R: Environment and Scope",
    "section": "Name masking",
    "text": "Name masking\nName masking: names defined within a function mask names defined outside the function.\nExercise: What will the following code return?\n\nx &lt;- 10\ny &lt;- 20\nmy_function &lt;- function() {\n  x &lt;- 1\n  y &lt;- 2\n  return(c(x, y))\n}\nmy_function()\nprint(x)\n\n\n\n\n[1] 1 2\n\n\n[1] 10"
  },
  {
    "objectID": "slides/15_environment-scope.html#name-masking-1",
    "href": "slides/15_environment-scope.html#name-masking-1",
    "title": "MATH167R: Environment and Scope",
    "section": "Name masking",
    "text": "Name masking\nNow, y is a free variable, meaning that it is not defined as a formal argument or declared in the body of the function?\nExercise: What will the following code return?\n\nx &lt;- 10\ny &lt;- 20\nmy_function &lt;- function() {\n  x &lt;- 1\n  return(c(x, y))\n}\nmy_function()\nprint(x)\n\n\n\n\n[1]  1 20\n\n\n[1] 10"
  },
  {
    "objectID": "slides/15_environment-scope.html#free-variables",
    "href": "slides/15_environment-scope.html#free-variables",
    "title": "MATH167R: Environment and Scope",
    "section": "Free variables",
    "text": "Free variables\nLexical scoping means that free variables are searched for in the environment where the function is defined."
  },
  {
    "objectID": "slides/15_environment-scope.html#environments",
    "href": "slides/15_environment-scope.html#environments",
    "title": "MATH167R: Environment and Scope",
    "section": "Environments",
    "text": "Environments\nAn environment is a collection of pairs of symbols (names) and values.\nWe can think of environments as simply bags of names bound to values (figure from Advanced R)"
  },
  {
    "objectID": "slides/15_environment-scope.html#environments-1",
    "href": "slides/15_environment-scope.html#environments-1",
    "title": "MATH167R: Environment and Scope",
    "section": "Environments",
    "text": "Environments\nEnvironments are organized hierarchically: Every environment has a parent and may have one or multiple children.\nThere is one environment without a parent: the empty environment."
  },
  {
    "objectID": "slides/15_environment-scope.html#the-global-environment",
    "href": "slides/15_environment-scope.html#the-global-environment",
    "title": "MATH167R: Environment and Scope",
    "section": "The global environment",
    "text": "The global environment\nWhen we work in RStudio and interact with the console, we are generally working in the global environment. The global environment is often called the workspace.\nWhen we try to access a variable in the console (or click Run when editing an R Markdown document), we are working in the global environment."
  },
  {
    "objectID": "slides/15_environment-scope.html#package-environments",
    "href": "slides/15_environment-scope.html#package-environments",
    "title": "MATH167R: Environment and Scope",
    "section": "Package environments",
    "text": "Package environments\nWhenever we load a package with library() we add a parent to the global environment:\n\nWe can see the current search path using the search() function."
  },
  {
    "objectID": "slides/15_environment-scope.html#searching-for-a-value",
    "href": "slides/15_environment-scope.html#searching-for-a-value",
    "title": "MATH167R: Environment and Scope",
    "section": "Searching for a value",
    "text": "Searching for a value\nSuppose we are looking for a value for a given symbol used in a function.\n\nFirst, the search begins within the body of the function.\nNext, if the value is not found in the body, the search continues in the function’s environment (where it was defined).\nIf the value is not found there, the search continues in the parent environment.\nThe search continues up the sequence of parents until the empty environmnet is reached at which point we throw an error."
  },
  {
    "objectID": "slides/15_environment-scope.html#example",
    "href": "slides/15_environment-scope.html#example",
    "title": "MATH167R: Environment and Scope",
    "section": "Example",
    "text": "Example\nExercise: What will the following code return?\n\nf &lt;- function(x) {\n  f &lt;- function(x) {\n    f &lt;- function() {\n      x ^ 2\n    }\n    f() + 1\n  }\n  f(x) * 2\n}\nf(10)\n\n\n\n\n[1] 202"
  },
  {
    "objectID": "slides/15_environment-scope.html#knittingrendering-an-r-markdown-document",
    "href": "slides/15_environment-scope.html#knittingrendering-an-r-markdown-document",
    "title": "MATH167R: Environment and Scope",
    "section": "Knitting/Rendering an R Markdown document",
    "text": "Knitting/Rendering an R Markdown document\nWhen you open RStudio, you are working in a (new) global environment.\nWhen we click Run within RStudio, you are working in this same global environment.\nHowever, when you knit an R Markdown document, you are essentially starting a new global environment, so you cannot access anything in your current workspace.\nThis ensures that the R Markdown document is self-contained and has everything that one would need to reproduce your results."
  },
  {
    "objectID": "slides/15_environment-scope.html#a-fresh-start-function-execution",
    "href": "slides/15_environment-scope.html#a-fresh-start-function-execution",
    "title": "MATH167R: Environment and Scope",
    "section": "A fresh start: function execution",
    "text": "A fresh start: function execution\nEach time you execute a function by calling it, a temporary environment is created.\nExercise: What will the following code return?\n\nf &lt;- function() {\n  if (!exists(\"a\")) {\n    a &lt;- 1\n  } else {\n    a &lt;- a + 1\n  }\n  a\n}\nf()\nf()\n\n\n\n\n[1] 1\n\n\n[1] 1"
  },
  {
    "objectID": "slides/15_environment-scope.html#practical-tips",
    "href": "slides/15_environment-scope.html#practical-tips",
    "title": "MATH167R: Environment and Scope",
    "section": "Practical tips",
    "text": "Practical tips\nRemember:\n\nName masking: names defined within a function mask names defined outside the function.\nFree variables: Free variables are searched for first in the environment where the function is defined.\nKnitting an R Markdown document: R Markdown documents are self-contained, so when you knit, you cannot access anything in the global environment you were working in.\nFunction execution environments: Function execution environments are generally temporary, so whatever happens within a function does not affect the global environment."
  },
  {
    "objectID": "slides/02_fundamentals.html#warm-up",
    "href": "slides/02_fundamentals.html#warm-up",
    "title": "MATH167R: Overview",
    "section": "Warm-up",
    "text": "Warm-up\nWhaa"
  },
  {
    "objectID": "slides/02_fundamentals.html#introductions",
    "href": "slides/02_fundamentals.html#introductions",
    "title": "MATH167R: Overview",
    "section": "Introductions",
    "text": "Introductions"
  },
  {
    "objectID": "slides/02_fundamentals.html#overview-of-today",
    "href": "slides/02_fundamentals.html#overview-of-today",
    "title": "MATH167R: Overview",
    "section": "Overview of today",
    "text": "Overview of today\n\nTypes of data\nBasic definitions: objects, expressions, values, functions\nR Markdown and file management"
  },
  {
    "objectID": "slides/02_fundamentals.html#types-of-data-1",
    "href": "slides/02_fundamentals.html#types-of-data-1",
    "title": "MATH167R: Overview",
    "section": "Types of data",
    "text": "Types of data\nWe saw last class that we can use R to perform basic mathematical operations:\n\n3 + 5\n\n[1] 8\n\n\n\nWe can also save these values as objects/variables and perform math on the objects:\n\nx &lt;- 3\ny &lt;- 5\nx + y\n\n[1] 8"
  },
  {
    "objectID": "slides/02_fundamentals.html#non-numerical-data",
    "href": "slides/02_fundamentals.html#non-numerical-data",
    "title": "MATH167R: Overview",
    "section": "Non-numerical data",
    "text": "Non-numerical data\nToday we’ll see that R can handle objects that are not numbers:\n\nz &lt;- \"Hello\"\n\n\nHowever, we need to be careful because not all operations work with all types of data:\n\nx + z\n\nError in x + z: non-numeric argument to binary operator"
  },
  {
    "objectID": "slides/02_fundamentals.html#atomic-vectors",
    "href": "slides/02_fundamentals.html#atomic-vectors",
    "title": "MATH167R: Overview",
    "section": "Atomic vectors",
    "text": "Atomic vectors\n\nlogical\ninteger\ndouble\ncharacter"
  },
  {
    "objectID": "slides/02_fundamentals.html#atomic-vectors-1",
    "href": "slides/02_fundamentals.html#atomic-vectors-1",
    "title": "MATH167R: Overview",
    "section": "Atomic vectors",
    "text": "Atomic vectors\n\nfrom Advanced R, Hadley Wickham."
  },
  {
    "objectID": "slides/02_fundamentals.html#atomic-vectors-2",
    "href": "slides/02_fundamentals.html#atomic-vectors-2",
    "title": "MATH167R: Overview",
    "section": "Atomic vectors",
    "text": "Atomic vectors\n\nexample_logical &lt;- T\nexample_integer &lt;- 1L\nexample_double &lt;- 1.0\nexample_character &lt;- \"Hello\"\n\n\n\nclass(example_logical)\n\n[1] \"logical\"\n\nclass(example_integer)\n\n[1] \"integer\"\n\nclass(example_double)\n\n[1] \"numeric\"\n\nclass(example_character)\n\n[1] \"character\""
  },
  {
    "objectID": "slides/02_fundamentals.html#coercion",
    "href": "slides/02_fundamentals.html#coercion",
    "title": "MATH167R: Overview",
    "section": "Coercion",
    "text": "Coercion\n\nas.numeric(example_logical)\n\n[1] 1\n\nas.numeric(example_character)\n\n[1] NA"
  },
  {
    "objectID": "slides/02_fundamentals.html#vectors",
    "href": "slides/02_fundamentals.html#vectors",
    "title": "MATH167R: Overview",
    "section": "Vectors",
    "text": "Vectors\n\nA vector is a set of atomic vectors of the same type\nWe create vectors using the function c()\n\n\n\n[1] 16  3  0  7 -2\n\n\n\nWe can shorthand vectors counting up (or down) using :\n\n\n\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "slides/02_fundamentals.html#vectors-1",
    "href": "slides/02_fundamentals.html#vectors-1",
    "title": "MATH167R: Overview",
    "section": "Vectors",
    "text": "Vectors\n\nWe index vectors using [index] after the vector name\n\n\n\n[1] 3\n\n\n\nIf we use a negative index, we return the vector with that element removed\n\n\n\n[1] 1 2 3 5"
  },
  {
    "objectID": "slides/02_fundamentals.html#vector-data-types",
    "href": "slides/02_fundamentals.html#vector-data-types",
    "title": "MATH167R: Overview",
    "section": "Vector Data Types",
    "text": "Vector Data Types\nNote that vectors can only have one type of data. So we can do\n\n\n[1] 1 2 3\n\n\n[1] \"a\" \"b\" \"c\"\n\n\nbut when we try\n\n\n[1] \"1\" \"b\" \"3\"\n\n\nR will force the entries in our vector to be of the same type! This is a common source of bugs."
  },
  {
    "objectID": "slides/02_fundamentals.html#useful-functions-for-vectors",
    "href": "slides/02_fundamentals.html#useful-functions-for-vectors",
    "title": "MATH167R: Overview",
    "section": "Useful functions for vectors",
    "text": "Useful functions for vectors\n\nmax(), min(), mean(), median(), sum(), sd(), var()\nlength() returns the number of elements in the vector\nhead() and tail() return the beginning and end vectors\nsort() will sort\nsummary() returns a 5-number summary\nany() and all() to check conditions on Boolean vectors\nhist() will return a crude histogram (we’ll learn how to make this nicer later)\n\nYou will need some of these for Lab 1!\nIf you are unclear about what any of them do, use ? before the function name to read the documentation. You should get in the habit of checking function documentation a lot!"
  },
  {
    "objectID": "slides/02_fundamentals.html#what-is-a-comment",
    "href": "slides/02_fundamentals.html#what-is-a-comment",
    "title": "MATH167R: Overview",
    "section": "What is a comment?",
    "text": "What is a comment?\n\nComputers completely ignore comments (in R, any line preceded by #)\nComments do not impact the functionality of your code at all."
  },
  {
    "objectID": "slides/02_fundamentals.html#so-why-do-them",
    "href": "slides/02_fundamentals.html#so-why-do-them",
    "title": "MATH167R: Overview",
    "section": "So why do them…",
    "text": "So why do them…\n\nCommenting a code allows you to write notes for readers of your code only\nUsually, that reader is you!\nCoding without comments is ill-advised, bordering on impossible\nSneak peak at functions…"
  },
  {
    "objectID": "slides/02_fundamentals.html#example",
    "href": "slides/02_fundamentals.html#example",
    "title": "MATH167R: Overview",
    "section": "Example",
    "text": "Example"
  },
  {
    "objectID": "slides/02_fundamentals.html#comment-style-guide",
    "href": "slides/02_fundamentals.html#comment-style-guide",
    "title": "MATH167R: Overview",
    "section": "Comment Style Guide",
    "text": "Comment Style Guide\n\nWhen starting out, you should comment most lines\nFrequent use of comments should allow most comments to be restricted to one line for readability\nA comment should go above its corresponding line, be indented equally with the next line, and use a single # to mark a comment\nUse a string of - or = to break your code into easily noticeable chunks\n\nExample: # Data Manipulation -----------\nRStudio allows you to collapse chunks marked like this to help with clutter\n\n\n\n\n\n* There are exceptions to every rule! Usually, comments are to help you!\n\n\n\n\n* Clear commenting is required for this course\n\n\n## Who are you to tell me how to type?\n\n\nWe will be using a mix of the Tidyverse Style Guide by Hadley Wickham and the Google Style Guide. Please see the links for details, but I will summarize some main points here and throughout the class as we learn more functionality, such as functions and packages.\n\n\nYou will be graded on following good code style!\n\n\n## Object Names\n\n\nUse either underscores (_) or big camel case (BigCamelCase) to separate words within an object name. Do not use dots . to separate words in R functions!\n\n\n::: {.cell}\n\n\n:::\n\n\n## Object Names\n\n\nNames should be concise, meaningful, and (generally) nouns.\n\n\n::: {.cell}\n\n\n:::\n\n\n## Object Names\n\n\nIt is very important that object names do not write over common functions!\n\n\n::: {.cell}\n\n\n:::\n\n\nNote: T and F are R shorthand for TRUE and FALSE, respectively. In general, spell them out to be as clear as possible.\n\n\n## Spacing\n\n\nPut a space after every comma, just like in English writing.\n\n\n::: {.cell}\n\n\n:::\n\n\nDo not put spaces inside or outside parentheses for regular function calls.\n\n\n::: {.cell}\n\n\n:::"
  },
  {
    "objectID": "slides/02_fundamentals.html#spacing-with-operators",
    "href": "slides/02_fundamentals.html#spacing-with-operators",
    "title": "MATH167R: Overview",
    "section": "Spacing with Operators",
    "text": "Spacing with Operators\nMost of the time when you are doing math, conditionals, logicals, or assignment, your operators should be surrounded by spaces. (e.g. for ==, +, -, &lt;-, etc.)\nThere are some exceptions we will learn more about later, such as the power symbol ^. See the Tidyverse Style Guide for more details!"
  },
  {
    "objectID": "slides/02_fundamentals.html#extra-spacing",
    "href": "slides/02_fundamentals.html#extra-spacing",
    "title": "MATH167R: Overview",
    "section": "Extra Spacing",
    "text": "Extra Spacing\nAdding extra spaces ok if it improves alignment of = or &lt;-."
  },
  {
    "objectID": "slides/02_fundamentals.html#long-lines-of-code",
    "href": "slides/02_fundamentals.html#long-lines-of-code",
    "title": "MATH167R: Overview",
    "section": "Long Lines of Code",
    "text": "Long Lines of Code\nStrive to limit your code to 80 characters per line. This fits comfortably on a printed page with a reasonably sized font.\nIf a function call is too long to fit on a single line, use one line each for the function name, each argument, and the closing ). This makes the code easier to read and to change later.\nTip! Try RStudio &gt; Preferences &gt; Code &gt; Display &gt; Show Margin with Margin column 80 to give yourself a visual cue!"
  },
  {
    "objectID": "slides/02_fundamentals.html#assignment",
    "href": "slides/02_fundamentals.html#assignment",
    "title": "MATH167R: Overview",
    "section": "Assignment",
    "text": "Assignment\nWe use &lt;- instead of = for assignment. This is moderately controversial if you find yourself in the right (wrong?) communities."
  },
  {
    "objectID": "slides/02_fundamentals.html#semicolons",
    "href": "slides/02_fundamentals.html#semicolons",
    "title": "MATH167R: Overview",
    "section": "Semicolons",
    "text": "Semicolons\nIn R, semi-colons (;) are used to execute pieces of R code on a single line. In general, this is bad practice and should be avoided. Also, you never need to end lines of code with semi-colons!"
  },
  {
    "objectID": "slides/02_fundamentals.html#quotes-and-strings",
    "href": "slides/02_fundamentals.html#quotes-and-strings",
    "title": "MATH167R: Overview",
    "section": "Quotes and Strings",
    "text": "Quotes and Strings\nUse \", not ', for quoting text. The only exception is when the text already contains double quotes and no single quotes."
  },
  {
    "objectID": "slides/13_functions-loops.html#overview-of-today",
    "href": "slides/13_functions-loops.html#overview-of-today",
    "title": "MATH167R: Functions and Loops",
    "section": "Overview of today",
    "text": "Overview of today\n\nWriting R functions\nLoops"
  },
  {
    "objectID": "slides/13_functions-loops.html#anatomy-of-a-function",
    "href": "slides/13_functions-loops.html#anatomy-of-a-function",
    "title": "MATH167R: Functions and Loops",
    "section": "Anatomy of a function",
    "text": "Anatomy of a function\nRecall the structure of a function:\n\nfunction_name &lt;- function(param1, param2 = \"default\") {\n  # body of the function\n  return(output)\n}\n\n\nfunction_name: the name you want to give your function, what you will use to call it\nfunction(): call this to define a function\nparam1, param2: formal arguments input by the user. You can assign default values by setting them equal to something in the call to function()\nbody: the actual code that is executed\nreturn(): the output value returned to the user"
  },
  {
    "objectID": "slides/13_functions-loops.html#exercise-degrees-to-radians",
    "href": "slides/13_functions-loops.html#exercise-degrees-to-radians",
    "title": "MATH167R: Functions and Loops",
    "section": "Exercise: degrees to radians",
    "text": "Exercise: degrees to radians\n\nWrite a function degreesToRadians that takes as input one number, degrees, and returns its value in radians. You do not need to check the data type of the input."
  },
  {
    "objectID": "slides/13_functions-loops.html#exercise-degrees-to-radians-1",
    "href": "slides/13_functions-loops.html#exercise-degrees-to-radians-1",
    "title": "MATH167R: Functions and Loops",
    "section": "Exercise: degrees to radians",
    "text": "Exercise: degrees to radians\n\n\ndegreesToRadians &lt;- function(degrees) {\n  return((degrees / 360) * 2 * pi)\n}\ndegreesToRadians(180)\n\n[1] 3.141593"
  },
  {
    "objectID": "slides/13_functions-loops.html#additional-notes-on-functions",
    "href": "slides/13_functions-loops.html#additional-notes-on-functions",
    "title": "MATH167R: Functions and Loops",
    "section": "Additional notes on functions",
    "text": "Additional notes on functions\n\n\nHow do I know if a function is working?\n\nTest it on easy examples for which you know the results\nWhen using if, test all the possible cases"
  },
  {
    "objectID": "slides/13_functions-loops.html#loops",
    "href": "slides/13_functions-loops.html#loops",
    "title": "MATH167R: Functions and Loops",
    "section": "Loops",
    "text": "Loops\n\nLoops enable us to repeat a line/lines of code many times.\nR provides three types of explicit loops: for, while, and repeat. We will focus on for and while."
  },
  {
    "objectID": "slides/13_functions-loops.html#for-loops",
    "href": "slides/13_functions-loops.html#for-loops",
    "title": "MATH167R: Functions and Loops",
    "section": "for loops",
    "text": "for loops\n\nfor loops repeat a chunk of code for each value of a vector.\n\nfor (name in vector) {body}\n\n\n\n\nfor (i in 1:8) {\n  print(i)\n}\n\n\n\n\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8"
  },
  {
    "objectID": "slides/13_functions-loops.html#example-vector-sum",
    "href": "slides/13_functions-loops.html#example-vector-sum",
    "title": "MATH167R: Functions and Loops",
    "section": "Example: Vector sum",
    "text": "Example: Vector sum\n\nx &lt;- c(1:10)\nsum(x)\n\n[1] 55\n\ntotal_sum &lt;- 0\nfor (i in x) {\n  total_sum &lt;- total_sum + i\n}\nprint(total_sum)\n\n[1] 55"
  },
  {
    "objectID": "slides/13_functions-loops.html#example-fibonacci-sequence",
    "href": "slides/13_functions-loops.html#example-fibonacci-sequence",
    "title": "MATH167R: Functions and Loops",
    "section": "Example: Fibonacci sequence",
    "text": "Example: Fibonacci sequence\n\n# code to compute the first 10 Fibonacci numbers\nfib_10 &lt;- numeric(10) # empty numeric vector of length 10\nfib_10[1] &lt;- 1\nfib_10[2] &lt;- 1\nfor (i in 3:10) {\n  fib_10[i] &lt;- fib_10[i - 1] + fib_10[i - 2]\n}\nfib_10\n\n [1]  1  1  2  3  5  8 13 21 34 55"
  },
  {
    "objectID": "slides/13_functions-loops.html#while-loops",
    "href": "slides/13_functions-loops.html#while-loops",
    "title": "MATH167R: Functions and Loops",
    "section": "while loops",
    "text": "while loops\n\nwhile loops continuously evaluate the inner code chunk until the condition is FALSE.\nBe careful here: It is possible to get stuck in an infinite loop!\n\nx &lt;- 0\nwhile (x &lt; 5) {\n  cat(\"x is currently\", x, \". Let's increase it by 1.\")\n  x &lt;- x + 1\n}\n\nx is currently 0 . Let's increase it by 1.x is currently 1 . Let's increase it by 1.x is currently 2 . Let's increase it by 1.x is currently 3 . Let's increase it by 1.x is currently 4 . Let's increase it by 1."
  },
  {
    "objectID": "slides/13_functions-loops.html#while-loops-1",
    "href": "slides/13_functions-loops.html#while-loops-1",
    "title": "MATH167R: Functions and Loops",
    "section": "while loops",
    "text": "while loops\n\nLet’s see if we can clean up that output. Add \"\\n\" to a string to force a line break.\n\nx &lt;- 0\nwhile (x &lt; 5) {\n  cat(\"x is currently \", x, \". Let's increase it by 1! \\n\", sep = \"\")\n  x &lt;- x + 1\n}\n\nx is currently 0. Let's increase it by 1! \nx is currently 1. Let's increase it by 1! \nx is currently 2. Let's increase it by 1! \nx is currently 3. Let's increase it by 1! \nx is currently 4. Let's increase it by 1!"
  },
  {
    "objectID": "slides/13_functions-loops.html#example-string-input",
    "href": "slides/13_functions-loops.html#example-string-input",
    "title": "MATH167R: Functions and Loops",
    "section": "Example: String input",
    "text": "Example: String input\n\nstring_vector &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\")\nfor (mystring in string_vector) {\n  print(mystring)\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n[1] \"e\""
  },
  {
    "objectID": "slides/13_functions-loops.html#nested-loops",
    "href": "slides/13_functions-loops.html#nested-loops",
    "title": "MATH167R: Functions and Loops",
    "section": "Nested Loops",
    "text": "Nested Loops\nIn nested loops, the innermost loop iterates most quickly.\n\ncounter &lt;- 0\nfor (i in 1:3) {\n  for (j in 1:2) {\n    counter &lt;- counter + 1\n    cat(\"i = \", i, \", j = \", j, \", counter = \", counter, \"\\n\", sep = \"\")\n  }\n}\n\ni = 1, j = 1, counter = 1\ni = 1, j = 2, counter = 2\ni = 2, j = 1, counter = 3\ni = 2, j = 2, counter = 4\ni = 3, j = 1, counter = 5\ni = 3, j = 2, counter = 6"
  },
  {
    "objectID": "slides/13_functions-loops.html#nested-loops-1",
    "href": "slides/13_functions-loops.html#nested-loops-1",
    "title": "MATH167R: Functions and Loops",
    "section": "Nested Loops",
    "text": "Nested Loops\n\nfor (i in 1:3) {\n  for (j in 1:2) {\n    print(i * j)\n  }\n}\n\n[1] 1\n[1] 2\n[1] 2\n[1] 4\n[1] 3\n[1] 6"
  },
  {
    "objectID": "slides/13_functions-loops.html#filling-in-a-vector",
    "href": "slides/13_functions-loops.html#filling-in-a-vector",
    "title": "MATH167R: Functions and Loops",
    "section": "Filling in a vector",
    "text": "Filling in a vector\nNote: Usually, this is an inefficient way to do this. We will see a faster way to work with vectors next class.\n\n# Inefficient\nx &lt;- rep(NA, 5)\nfor (i in 1:5) {\n  x[i] &lt;- i * 2\n}\nx\n\n[1]  2  4  6  8 10\n\n# Much better\nx &lt;- seq(2, 10, by = 2)\nx\n\n[1]  2  4  6  8 10"
  },
  {
    "objectID": "slides/13_functions-loops.html#filling-in-a-vector-1",
    "href": "slides/13_functions-loops.html#filling-in-a-vector-1",
    "title": "MATH167R: Functions and Loops",
    "section": "Filling in a vector",
    "text": "Filling in a vector\n\nlibrary(stringr)\nx &lt;- rep(NA, 5)\nmy_strings &lt;- c(\"a\", \"a \", \"a c\", \"a ca\", \"a cat\")\nfor (i in 1:5) {\n  x[i] &lt;- str_length(my_strings[i])\n  print(x)\n}\n\n[1]  1 NA NA NA NA\n[1]  1  2 NA NA NA\n[1]  1  2  3 NA NA\n[1]  1  2  3  4 NA\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "slides/13_functions-loops.html#filling-in-a-matrix",
    "href": "slides/13_functions-loops.html#filling-in-a-matrix",
    "title": "MATH167R: Functions and Loops",
    "section": "Filling in a matrix",
    "text": "Filling in a matrix\nNote: Usually, this is an inefficient way to do this. We will see a faster way to work with vectors next class.\n\nx &lt;- matrix(NA, nrow = 4, ncol = 3)\nfor (i in 1:4) {\n  for (j in 1:3) {\n    x[i, j] &lt;- i * j\n  }\n}\nx\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    2    4    6\n[3,]    3    6    9\n[4,]    4    8   12"
  },
  {
    "objectID": "slides/13_functions-loops.html#continue-until-positive-sample",
    "href": "slides/13_functions-loops.html#continue-until-positive-sample",
    "title": "MATH167R: Functions and Loops",
    "section": "Continue until positive sample",
    "text": "Continue until positive sample\n\nset.seed(3)\nx &lt;- -1\nwhile (x &lt; 0) {\n  x &lt;- rnorm(1)\n  print(x)\n}\n\n[1] -0.9619334\n[1] -0.2925257\n[1] 0.2587882\n\nx\n\n[1] 0.2587882"
  },
  {
    "objectID": "slides/13_functions-loops.html#combining-loops-and-conditional-evaluation",
    "href": "slides/13_functions-loops.html#combining-loops-and-conditional-evaluation",
    "title": "MATH167R: Functions and Loops",
    "section": "Combining Loops and Conditional Evaluation",
    "text": "Combining Loops and Conditional Evaluation\nConsider the following code. What do you think it does?\n\nfor (i in 1:10) {\n  if (i %% 2 == 1) {\n    print(\"odd\")\n  } else {\n    print(\"even\")\n  }\n}\n\n\n\n\n[1] \"odd\"\n[1] \"even\"\n[1] \"odd\"\n[1] \"even\"\n[1] \"odd\"\n[1] \"even\"\n[1] \"odd\"\n[1] \"even\"\n[1] \"odd\"\n[1] \"even\""
  },
  {
    "objectID": "slides/13_functions-loops.html#fizz-buzz",
    "href": "slides/13_functions-loops.html#fizz-buzz",
    "title": "MATH167R: Functions and Loops",
    "section": "Fizz Buzz",
    "text": "Fizz Buzz\nLet’s play Fizz Buzz.\n\nEveryone takes turns to count incrementally.\nAny number divisible by three is replaced with the word “fizz.”\nAny number divisible by five is replaced with the word “buzz.”\nAny number divisible by both three and five is replaced with the word “fizzbuzz.”"
  },
  {
    "objectID": "slides/13_functions-loops.html#fizz-buzz-1",
    "href": "slides/13_functions-loops.html#fizz-buzz-1",
    "title": "MATH167R: Functions and Loops",
    "section": "Fizz Buzz",
    "text": "Fizz Buzz\nCan we write code for a computer to play fizz buzz with itself? Suppose we want the computer to play Fizz Buzz up to 100.\n\n\nfor (i in 1:100) {\n  if (i %% 3 == 0 & i %% 5 == 0) {\n    print(\"fizzbuzz\")\n  } else if (i %% 3 == 0) {\n    print(\"fizz\")\n  } else if (i %% 5 == 0) {\n    print(\"buzz\")\n  } else {\n    print(i)\n  }\n}\n\n\n\n\n\n[1] 1\n[1] 2\n[1] \"fizz\"\n[1] 4\n[1] \"buzz\"\n[1] \"fizz\"\n[1] 7\n[1] 8\n[1] \"fizz\"\n[1] \"buzz\"\n[1] 11\n[1] \"fizz\"\n[1] 13\n[1] 14\n[1] \"fizzbuzz\"\n[1] 16\n[1] 17\n[1] \"fizz\"\n[1] 19\n[1] \"buzz\"\n[1] \"fizz\"\n[1] 22\n[1] 23\n[1] \"fizz\"\n[1] \"buzz\"\n[1] 26\n[1] \"fizz\"\n[1] 28\n[1] 29\n[1] \"fizzbuzz\"\n[1] 31\n[1] 32\n[1] \"fizz\"\n[1] 34\n[1] \"buzz\"\n[1] \"fizz\"\n[1] 37\n[1] 38\n[1] \"fizz\"\n[1] \"buzz\"\n[1] 41\n[1] \"fizz\"\n[1] 43\n[1] 44\n[1] \"fizzbuzz\"\n[1] 46\n[1] 47\n[1] \"fizz\"\n[1] 49\n[1] \"buzz\"\n[1] \"fizz\"\n[1] 52\n[1] 53\n[1] \"fizz\"\n[1] \"buzz\"\n[1] 56\n[1] \"fizz\"\n[1] 58\n[1] 59\n[1] \"fizzbuzz\"\n[1] 61\n[1] 62\n[1] \"fizz\"\n[1] 64\n[1] \"buzz\"\n[1] \"fizz\"\n[1] 67\n[1] 68\n[1] \"fizz\"\n[1] \"buzz\"\n[1] 71\n[1] \"fizz\"\n[1] 73\n[1] 74\n[1] \"fizzbuzz\"\n[1] 76\n[1] 77\n[1] \"fizz\"\n[1] 79\n[1] \"buzz\"\n[1] \"fizz\"\n[1] 82\n[1] 83\n[1] \"fizz\"\n[1] \"buzz\"\n[1] 86\n[1] \"fizz\"\n[1] 88\n[1] 89\n[1] \"fizzbuzz\"\n[1] 91\n[1] 92\n[1] \"fizz\"\n[1] 94\n[1] \"buzz\"\n[1] \"fizz\"\n[1] 97\n[1] 98\n[1] \"fizz\"\n[1] \"buzz\""
  },
  {
    "objectID": "slides/13_functions-loops.html#coding-challenges",
    "href": "slides/13_functions-loops.html#coding-challenges",
    "title": "MATH167R: Functions and Loops",
    "section": "Coding challenges",
    "text": "Coding challenges\n\nProject Euler\nHackerRank\nLeetCode (doesn’t support R)"
  },
  {
    "objectID": "slides/10_data-management.html#overview-of-today",
    "href": "slides/10_data-management.html#overview-of-today",
    "title": "MATH167R: Data Management",
    "section": "Overview of today",
    "text": "Overview of today\n\nWorkflow for downloading and saving data\nOrganizing output and saving images\nExploratory data analysis\nGroup lab time"
  },
  {
    "objectID": "slides/10_data-management.html#downloading-data",
    "href": "slides/10_data-management.html#downloading-data",
    "title": "MATH167R: Data Management",
    "section": "Downloading data",
    "text": "Downloading data\nUp until now, we’ve mostly been working with small datasets and I have given you code to download this data from the internet:\n\neggproduction  &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-04-11/egg-production.csv')\n\nIf you put this line of code in a chunk in your .Rmd file, each time you knit/render, you will have to download this data.\nSo, if you do not have access to the internet, you will be unable to knit to html."
  },
  {
    "objectID": "slides/10_data-management.html#saving-data-locally",
    "href": "slides/10_data-management.html#saving-data-locally",
    "title": "MATH167R: Data Management",
    "section": "Saving data locally",
    "text": "Saving data locally\nYou can instead download the data to a local folder or use the following code to save it locally:\n\nreadr::write_csv(eggproduction, \"~/Documents/MATH167R/data/egg-production.csv\")\n\nYou can subsequently load it locally (no internet needed):\n\neggproduction &lt;- readr::read_csv(\"~/Documents/MATH167R/data/egg-production.csv\")"
  },
  {
    "objectID": "slides/10_data-management.html#saving-data-locally-1",
    "href": "slides/10_data-management.html#saving-data-locally-1",
    "title": "MATH167R: Data Management",
    "section": "Saving data locally",
    "text": "Saving data locally\nAny R object can be saved as a .rds file (including plots or output).\n\nlibrary(tidyverse)\nstate_population &lt;- readr::read_csv(\"https://www2.census.gov/programs-surveys/popest/datasets/2010-2020/national/totals/nst-est2020.csv\")\nUS_pop_tidy &lt;- state_population |&gt;\n  filter(SUMLEV == \"010\") |&gt; \n  select(-POPESTIMATE042020) |&gt;\n  pivot_longer(contains(\"POPESTIMATE\"), \n               names_to = \"Year\",\n               values_to = \"Population\") |&gt;\n  mutate(Year = as.numeric(stringr::str_sub(Year, start = 12)))\nsaveRDS(US_pop_tidy, \"~/Documents/MATH167R/data/US_pop_tidy.rds\")\n\nYou can subsequently load it locally using readRDS() (no internet needed):\n\nUS_pop_tidy &lt;- readRDS(\"~/Documents/MATH167R/data/US_pop_tidy.rds\")"
  },
  {
    "objectID": "slides/10_data-management.html#saving-plots-locally",
    "href": "slides/10_data-management.html#saving-plots-locally",
    "title": "MATH167R: Data Management",
    "section": "Saving plots locally",
    "text": "Saving plots locally\n\nUS_pop_plot &lt;- US_pop_tidy |&gt;\n  ggplot(aes(x = Year, y = Population)) + \n  geom_line()\nsaveRDS(US_pop_plot, \"~/Documents/MATH167R/data/US_pop_plot.rds\")\n\n\nUS_pop_plot &lt;- readRDS(\"~/Documents/MATH167R/data/US_pop_tidy.rds\")\nprint(US_pop_plot)\n\n# A tibble: 11 × 9\n   SUMLEV REGION DIVISION STATE NAME       CENSUS2010POP ESTIMATESBASE2010  Year\n   &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;              &lt;dbl&gt;             &lt;dbl&gt; &lt;dbl&gt;\n 1 010    0      0        00    United St…     308745538         308758105  2010\n 2 010    0      0        00    United St…     308745538         308758105  2011\n 3 010    0      0        00    United St…     308745538         308758105  2012\n 4 010    0      0        00    United St…     308745538         308758105  2013\n 5 010    0      0        00    United St…     308745538         308758105  2014\n 6 010    0      0        00    United St…     308745538         308758105  2015\n 7 010    0      0        00    United St…     308745538         308758105  2016\n 8 010    0      0        00    United St…     308745538         308758105  2017\n 9 010    0      0        00    United St…     308745538         308758105  2018\n10 010    0      0        00    United St…     308745538         308758105  2019\n11 010    0      0        00    United St…     308745538         308758105  2020\n# ℹ 1 more variable: Population &lt;dbl&gt;"
  },
  {
    "objectID": "slides/10_data-management.html#saving-multiple-objects",
    "href": "slides/10_data-management.html#saving-multiple-objects",
    "title": "MATH167R: Data Management",
    "section": "Saving multiple objects",
    "text": "Saving multiple objects\nUsing the save() function, you can save multiple objects as a .RData file:\n\nsave(US_pop_plot, US_pop_tidy, file = \"~/Documents/MATH167R/data/US_pop_combined.RData\")\n\nLoad these objects using a load() call:\n\nload(\"~/Documents/MATH167R/data/US_pop_combined.RData\")\nprint(US_pop_plot)\n\n# A tibble: 11 × 9\n   SUMLEV REGION DIVISION STATE NAME       CENSUS2010POP ESTIMATESBASE2010  Year\n   &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;              &lt;dbl&gt;             &lt;dbl&gt; &lt;dbl&gt;\n 1 010    0      0        00    United St…     308745538         308758105  2010\n 2 010    0      0        00    United St…     308745538         308758105  2011\n 3 010    0      0        00    United St…     308745538         308758105  2012\n 4 010    0      0        00    United St…     308745538         308758105  2013\n 5 010    0      0        00    United St…     308745538         308758105  2014\n 6 010    0      0        00    United St…     308745538         308758105  2015\n 7 010    0      0        00    United St…     308745538         308758105  2016\n 8 010    0      0        00    United St…     308745538         308758105  2017\n 9 010    0      0        00    United St…     308745538         308758105  2018\n10 010    0      0        00    United St…     308745538         308758105  2019\n11 010    0      0        00    United St…     308745538         308758105  2020\n# ℹ 1 more variable: Population &lt;dbl&gt;"
  },
  {
    "objectID": "slides/10_data-management.html#saving-plots-locally-1",
    "href": "slides/10_data-management.html#saving-plots-locally-1",
    "title": "MATH167R: Data Management",
    "section": "Saving plots locally",
    "text": "Saving plots locally\nWe can save plots to .pdf files using a call to pdf() before the plot code and then dev.off() afterwards.\n\npdf(file = \"~/Documents/MATH167R/results/US_pop_plot.pdf\",\n    width = 8, height = 6) # dimensions in inches\nUS_pop_plot &lt;- US_pop_tidy |&gt;\n  ggplot(aes(x = Year, y = Population)) + \n  geom_line() + \n  ggtitle(\"US Population, 2010-2020\")\nprint(US_pop_plot)\ndev.off()\n\nquartz_off_screen \n                2"
  },
  {
    "objectID": "slides/10_data-management.html#generating-clean-tables-using-kable",
    "href": "slides/10_data-management.html#generating-clean-tables-using-kable",
    "title": "MATH167R: Data Management",
    "section": "Generating clean tables using kable()",
    "text": "Generating clean tables using kable()\nThe kable() function from the knitr package can be sued to generate clean tables for publication. The kableExtra package contains many extra functions for formatting tables.\n\nstate_population &lt;- readr::read_csv(\"https://www2.census.gov/programs-surveys/popest/datasets/2010-2020/national/totals/nst-est2020.csv\")\n\n# code to print the data\nlibrary(knitr)\nkable(state_population, digits = 3, row.names = F) |&gt;\n  kableExtra::kable_styling(\"striped\", full_width = T) |&gt; \n  kableExtra::scroll_box(height = \"560px\")"
  },
  {
    "objectID": "slides/10_data-management.html#caching-code-chunks",
    "href": "slides/10_data-management.html#caching-code-chunks",
    "title": "MATH167R: Data Management",
    "section": "Caching code chunks",
    "text": "Caching code chunks\nYou can name your chunks and use the code chunk cache = T to save the output of a code chunk so you don’t have to wait for the code to run every time you knit.\n\n```{r pop_plot}\n#| eval: TRUE\n#| cache: TRUE\nUS_pop_plot &lt;- US_pop_tidy |&gt;\n  ggplot(aes(x = Year, y = Population)) + \n  geom_line() + \n  ggtitle(\"US Population, 2010-2020\")\nprint(US_pop_plot)\n```"
  },
  {
    "objectID": "slides/10_data-management.html#caching-code-chunks-1",
    "href": "slides/10_data-management.html#caching-code-chunks-1",
    "title": "MATH167R: Data Management",
    "section": "Caching code chunks",
    "text": "Caching code chunks\nHowever, that means plots/output will not automatically update if you change the “upstream” data processing pipeline. You must change the cached chunk or delete the cache to rerun the code.\nBefore you turn in your assignments, you should clear all the cached files and knit from scratch to make sure no errors have been introduced."
  },
  {
    "objectID": "slides/10_data-management.html#group-lab-time",
    "href": "slides/10_data-management.html#group-lab-time",
    "title": "MATH167R: Data Management",
    "section": "Group Lab Time",
    "text": "Group Lab Time\nThe rest of class is devoted to working in groups on your lab assignment."
  },
  {
    "objectID": "slides/08_advanced-visualization.html#warm-up",
    "href": "slides/08_advanced-visualization.html#warm-up",
    "title": "MATH167R: Data visualization",
    "section": "Warm-up",
    "text": "Warm-up\n\nWhat does the following code do?\n\nlibrary(palmerpenguins)\nlibrary(ggplot2)\ndata(penguins)\nggplot(penguins, \n       aes(x = flipper_length_mm, \n           y = body_mass_g, \n           color = species)) + \n  geom_point()"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#warm-up-1",
    "href": "slides/08_advanced-visualization.html#warm-up-1",
    "title": "MATH167R: Data visualization",
    "section": "Warm-up",
    "text": "Warm-up\n\nlibrary(palmerpenguins)\nlibrary(ggplot2)\ndata(penguins)\nggplot(penguins, \n       aes(x = flipper_length_mm, \n           y = body_mass_g, \n           color = species)) + \n  geom_point()"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#overview-of-today",
    "href": "slides/08_advanced-visualization.html#overview-of-today",
    "title": "MATH167R: Data visualization",
    "section": "Overview of today",
    "text": "Overview of today\n\nAdvanced data visualization\nData transformation for visualization"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#example-egg-production-in-the-united-states",
    "href": "slides/08_advanced-visualization.html#example-egg-production-in-the-united-states",
    "title": "MATH167R: Data visualization",
    "section": "Example: Egg production in the United States",
    "text": "Example: Egg production in the United States\nToday we’ll start using the The Humane League’s US Egg Production dataset, which we can load using the following code:\n\nlibrary(tidyverse)\neggproduction  &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-04-11/egg-production.csv')\nhead(eggproduction)\n\n# A tibble: 6 × 6\n  observed_month prod_type     prod_process   n_hens     n_eggs source          \n  &lt;date&gt;         &lt;chr&gt;         &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;           \n1 2016-07-31     hatching eggs all          57975000 1147000000 ChicEggs-09-23-…\n2 2016-08-31     hatching eggs all          57595000 1142700000 ChicEggs-10-21-…\n3 2016-09-30     hatching eggs all          57161000 1093300000 ChicEggs-11-22-…\n4 2016-10-31     hatching eggs all          56857000 1126700000 ChicEggs-12-23-…\n5 2016-11-30     hatching eggs all          57116000 1096600000 ChicEggs-01-24-…\n6 2016-12-31     hatching eggs all          57750000 1132900000 ChicEggs-02-28-…"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#data-dictionary",
    "href": "slides/08_advanced-visualization.html#data-dictionary",
    "title": "MATH167R: Data visualization",
    "section": "Data Dictionary",
    "text": "Data Dictionary\n\n\n\n\n\n\n\n\n\nvariable\nclass\ndescription\n\n\n\n\nobserved_month\ndouble\nMonth in which report observations are collected,Dates are recorded in ISO 8601 format YYYY-MM-DD\n\n\nprod_type\ncharacter\ntype of egg product: hatching, table eggs\n\n\nprod_process\ncharacter\ntype of production process and housing: cage-free (organic), cage-free (non-organic), all. The value ‘all’ includes cage-free and conventional housing.\n\n\nn_hens\ndouble\nnumber of hens produced by hens for a given month-type-process combo\n\n\nn_eggs\ndouble\nnumber of eggs producing eggs for a given month-type-process combo\n\n\nsource\ncharacter\nOriginal USDA report from which data are sourced. Values correspond to titles of PDF reports. Date of report is included in title."
  },
  {
    "objectID": "slides/08_advanced-visualization.html#building-up-a-visualization",
    "href": "slides/08_advanced-visualization.html#building-up-a-visualization",
    "title": "MATH167R: Data visualization",
    "section": "Building up a visualization",
    "text": "Building up a visualization\n\neggproduction |&gt; \n  filter(prod_type == \"table eggs\") \n\n\n\n# A tibble: 165 × 6\n   observed_month prod_type  prod_process    n_hens     n_eggs source           \n   &lt;date&gt;         &lt;chr&gt;      &lt;chr&gt;            &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;            \n 1 2016-07-31     table eggs all          299669000 7350500000 ChicEggs-09-23-2…\n 2 2016-08-31     table eggs all          300917000 7409000000 ChicEggs-10-21-2…\n 3 2016-09-30     table eggs all          303270000 7204200000 ChicEggs-11-22-2…\n 4 2016-10-31     table eggs all          305852000 7534700000 ChicEggs-12-23-2…\n 5 2016-11-30     table eggs all          310728000 7468500000 ChicEggs-01-24-2…\n 6 2016-12-31     table eggs all          318820000 7950400000 ChicEggs-02-28-2…\n 7 2017-01-31     table eggs all          318109000 7903500000 ChicEggs-03-21-2…\n 8 2017-02-28     table eggs all          316807000 7079800000 ChicEggs-04-21-2…\n 9 2017-03-31     table eggs all          316147000 7842000000 ChicEggs-05-22-2…\n10 2017-04-30     table eggs all          314918000 7545900000 ChicEggs-06-23-2…\n# ℹ 155 more rows"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#building-up-a-visualization-1",
    "href": "slides/08_advanced-visualization.html#building-up-a-visualization-1",
    "title": "MATH167R: Data visualization",
    "section": "Building up a visualization",
    "text": "Building up a visualization\n\neggproduction |&gt; \n  filter(prod_type == \"table eggs\") |&gt;\n  ggplot(aes(x = observed_month, y = n_eggs))"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#building-up-a-visualization-2",
    "href": "slides/08_advanced-visualization.html#building-up-a-visualization-2",
    "title": "MATH167R: Data visualization",
    "section": "Building up a visualization",
    "text": "Building up a visualization\n\neggproduction |&gt; \n  filter(prod_type == \"table eggs\") |&gt;\n  ggplot(aes(x = observed_month, y = n_eggs)) +\n  geom_point()"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#building-up-a-visualization-3",
    "href": "slides/08_advanced-visualization.html#building-up-a-visualization-3",
    "title": "MATH167R: Data visualization",
    "section": "Building up a visualization",
    "text": "Building up a visualization\n\neggproduction |&gt; \n  filter(prod_type == \"table eggs\") |&gt;\n  ggplot(aes(x = observed_month, y = n_eggs, color = prod_process)) +\n  geom_point()"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#building-up-a-visualization-4",
    "href": "slides/08_advanced-visualization.html#building-up-a-visualization-4",
    "title": "MATH167R: Data visualization",
    "section": "Building up a visualization",
    "text": "Building up a visualization\n\neggproduction |&gt; \n  filter(prod_type == \"table eggs\") |&gt;\n  ggplot(aes(x = observed_month, y = n_eggs, color = prod_process)) +\n  geom_line()"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#labels-and-legends",
    "href": "slides/08_advanced-visualization.html#labels-and-legends",
    "title": "MATH167R: Data visualization",
    "section": "Labels and legends",
    "text": "Labels and legends\ntheme can be added to change options including axis labels and legend position\n\neggproduction |&gt; \n  filter(prod_type == \"table eggs\") |&gt;\n  ggplot(aes(x = observed_month, y = n_eggs, color = prod_process)) +\n  geom_line() +\n  xlab(\"Date\") + ylab(\"# eggs\") +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#colors",
    "href": "slides/08_advanced-visualization.html#colors",
    "title": "MATH167R: Data visualization",
    "section": "Colors",
    "text": "Colors\nscale_color_viridis_d swaps colors to the viridis discrete color palette, which is optimized for accessibility.\n\neggproduction |&gt; \n  filter(prod_type == \"table eggs\") |&gt;\n  ggplot(aes(x = observed_month, y = n_eggs, color = prod_process)) +\n  geom_line() +\n  xlab(\"Date\") + ylab(\"# eggs\") +\n  scale_color_viridis_d() +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#remember",
    "href": "slides/08_advanced-visualization.html#remember",
    "title": "MATH167R: Data visualization",
    "section": "Remember!",
    "text": "Remember!\nLearning ggplot takes a lot of time–use your peers, me, and the internet as a resource!\nGeneral strategy\n\nClean and tidy data into the appropriate format.\nMap variables to aesthetics.\nUse geom_ functions to draw markings with the appropriate aesthetics.\nAdd labels and titles with xlab, ylab, and ggtitle.\nAdjust text size, legend position with theme."
  },
  {
    "objectID": "slides/08_advanced-visualization.html#adding-even-more-dimensions",
    "href": "slides/08_advanced-visualization.html#adding-even-more-dimensions",
    "title": "MATH167R: Data visualization",
    "section": "Adding even more dimensions",
    "text": "Adding even more dimensions\n\neggproduction |&gt; \n  ggplot(aes(x = observed_month, y = n_eggs, color = prod_process)) +\n  geom_line() +\n  facet_wrap(~prod_type) +\n  xlab(\"Date\") + ylab(\"# eggs\") +\n  scale_color_viridis_d() +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#us-population-data-2010-2020",
    "href": "slides/08_advanced-visualization.html#us-population-data-2010-2020",
    "title": "MATH167R: Data visualization",
    "section": "US population data, 2010-2020",
    "text": "US population data, 2010-2020\n\nstate_population &lt;- readr::read_csv(\"https://www2.census.gov/programs-surveys/popest/datasets/2010-2020/national/totals/nst-est2020.csv\")\n\n# code to print the data\nlibrary(knitr)\nkable(state_population, digits = 3, row.names = F) |&gt;\n  kableExtra::kable_styling(\"striped\", full_width = T) |&gt; \n  kableExtra::scroll_box(height = \"560px\")"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#us-population-data-2010-2020-1",
    "href": "slides/08_advanced-visualization.html#us-population-data-2010-2020-1",
    "title": "MATH167R: Data visualization",
    "section": "US population data, 2010-2020",
    "text": "US population data, 2010-2020\n\n\n\n\n\n\nSUMLEV\nREGION\nDIVISION\nSTATE\nNAME\nCENSUS2010POP\nESTIMATESBASE2010\nPOPESTIMATE2010\nPOPESTIMATE2011\nPOPESTIMATE2012\nPOPESTIMATE2013\nPOPESTIMATE2014\nPOPESTIMATE2015\nPOPESTIMATE2016\nPOPESTIMATE2017\nPOPESTIMATE2018\nPOPESTIMATE2019\nPOPESTIMATE042020\nPOPESTIMATE2020\n\n\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\n309327143\n311583481\n313877662\n316059947\n318386329\n320738994\n323071755\n325122128\n326838199\n328329953\n329398742\n329484123\n\n\n020\n1\n0\n00\nNortheast Region\n55317240\n55318414\n55380764\n55608318\n55782661\n55912775\n56021339\n56052790\n56063777\n56083383\n56084543\n56002934\n55924275\n55849869\n\n\n020\n2\n0\n00\nMidwest Region\n66927001\n66929737\n66975328\n67164092\n67348275\n67576524\n67765576\n67885682\n68018175\n68160342\n68263019\n68340091\n68357895\n68316744\n\n\n020\n3\n0\n00\nSouth Region\n114555744\n114563042\n114869421\n116019483\n117264196\n118397213\n119666248\n121049223\n122419547\n123611036\n124649156\n125686544\n126494232\n126662754\n\n\n020\n4\n0\n00\nWest Region\n71945553\n71946912\n72101630\n72791588\n73482530\n74173435\n74933166\n75751299\n76570256\n77267367\n77841481\n78300384\n78622340\n78654756\n\n\n040\n3\n6\n01\nAlabama\n4779736\n4780118\n4785514\n4799642\n4816632\n4831586\n4843737\n4854803\n4866824\n4877989\n4891628\n4907965\n4920706\n4921532\n\n\n040\n4\n9\n02\nAlaska\n710231\n710246\n713982\n722349\n730810\n737626\n737075\n738430\n742575\n740983\n736624\n733603\n732074\n731158\n\n\n040\n4\n8\n04\nArizona\n6392017\n6392292\n6407342\n6473416\n6556344\n6634690\n6732873\n6832810\n6944767\n7048088\n7164228\n7291843\n7393900\n7421401\n\n\n040\n3\n7\n05\nArkansas\n2915918\n2916029\n2921998\n2941038\n2952876\n2960459\n2968759\n2979732\n2991815\n3003855\n3012161\n3020985\n3029672\n3030522\n\n\n040\n4\n9\n06\nCalifornia\n37253956\n37254522\n37319550\n37636311\n37944551\n38253768\n38586706\n38904296\n39149186\n39337785\n39437463\n39437610\n39418894\n39368078\n\n\n040\n4\n8\n08\nColorado\n5029196\n5029319\n5047539\n5121900\n5193660\n5270774\n5352637\n5454328\n5543844\n5617421\n5697155\n5758486\n5798266\n5807719\n\n\n040\n1\n1\n09\nConnecticut\n3574097\n3574151\n3579173\n3588632\n3595211\n3595792\n3595697\n3588561\n3579830\n3575324\n3574561\n3566022\n3561494\n3557006\n\n\n040\n3\n5\n10\nDelaware\n897934\n897947\n899647\n907590\n915518\n924062\n933131\n942065\n949989\n957942\n966985\n976668\n984899\n986809\n\n\n040\n3\n5\n11\nDistrict of Columbia\n601723\n601767\n605282\n620290\n635737\n651559\n663603\n677014\n687576\n697079\n704147\n708253\n712185\n712816\n\n\n040\n3\n5\n12\nFlorida\n18801310\n18804589\n18846143\n19055607\n19302016\n19551678\n19853880\n20219111\n20627237\n20977089\n21254926\n21492056\n21688239\n21733312\n\n\n040\n3\n5\n13\nGeorgia\n9687653\n9688737\n9712209\n9803630\n9903580\n9975592\n10071204\n10183353\n10308442\n10417031\n10519389\n10628020\n10695662\n10710017\n\n\n040\n4\n9\n15\nHawaii\n1360301\n1360304\n1364004\n1379562\n1395199\n1408822\n1415335\n1422999\n1428885\n1425763\n1423102\n1415615\n1410587\n1407006\n\n\n040\n4\n8\n16\nIdaho\n1567582\n1567658\n1570819\n1584272\n1595910\n1612053\n1632248\n1652495\n1684036\n1719745\n1752074\n1789060\n1818238\n1826913\n\n\n040\n2\n3\n17\nIllinois\n12830632\n12831572\n12840545\n12867783\n12883029\n12895778\n12885092\n12859585\n12821709\n12779893\n12724685\n12667017\n12615162\n12587530\n\n\n040\n2\n3\n18\nIndiana\n6483802\n6484050\n6490555\n6517250\n6538989\n6570575\n6596019\n6611442\n6637898\n6662068\n6698481\n6731010\n6752183\n6754953\n\n\n040\n2\n4\n19\nIowa\n3046355\n3046877\n3050819\n3066772\n3076844\n3093935\n3110643\n3122541\n3133210\n3143734\n3149900\n3159596\n3164115\n3163561\n\n\n040\n2\n4\n20\nKansas\n2853118\n2853120\n2858266\n2869677\n2886024\n2894306\n2901861\n2910717\n2912977\n2910892\n2912748\n2912635\n2915024\n2913805\n\n\n040\n3\n6\n21\nKentucky\n4339367\n4339330\n4348464\n4370817\n4387865\n4406906\n4416992\n4429126\n4440306\n4455590\n4464273\n4472345\n4477899\n4477251\n\n\n040\n3\n7\n22\nLouisiana\n4533372\n4533500\n4544635\n4576244\n4602067\n4626040\n4645938\n4666998\n4681346\n4673673\n4664450\n4658285\n4650984\n4645318\n\n\n040\n1\n1\n23\nMaine\n1328361\n1328354\n1327651\n1328473\n1328094\n1328543\n1331217\n1329098\n1332348\n1335743\n1340123\n1345770\n1349647\n1350141\n\n\n040\n3\n5\n24\nMaryland\n5773552\n5773787\n5788784\n5840241\n5888375\n5925197\n5960064\n5988528\n6007014\n6028186\n6042153\n6054954\n6059529\n6055802\n\n\n040\n1\n1\n25\nMassachusetts\n6547629\n6547788\n6566440\n6614218\n6664269\n6715158\n6764864\n6797484\n6827280\n6863560\n6885720\n6894883\n6898116\n6893574\n\n\n040\n2\n3\n26\nMichigan\n9883640\n9884112\n9877597\n9883053\n9898289\n9914802\n9932033\n9934483\n9954117\n9976752\n9987286\n9984795\n9976330\n9966555\n\n\n040\n2\n4\n27\nMinnesota\n5303925\n5303933\n5310934\n5346620\n5377500\n5414722\n5452665\n5484002\n5525360\n5569283\n5608762\n5640053\n5655855\n5657342\n\n\n040\n3\n6\n28\nMississippi\n2967297\n2968129\n2970615\n2979147\n2984599\n2989839\n2991892\n2990231\n2990595\n2990674\n2982879\n2978227\n2971253\n2966786\n\n\n040\n2\n4\n29\nMissouri\n5988927\n5988941\n5996089\n6011182\n6026027\n6042989\n6059130\n6075411\n6091384\n6111382\n6125986\n6140475\n6151737\n6151548\n\n\n040\n4\n8\n30\nMontana\n989415\n989400\n990730\n997518\n1004168\n1014158\n1022657\n1031495\n1042137\n1053862\n1061818\n1070123\n1078405\n1080577\n\n\n040\n2\n4\n31\nNebraska\n1826341\n1826311\n1829591\n1840914\n1853691\n1865813\n1879955\n1892059\n1906483\n1916998\n1925512\n1932571\n1937258\n1937552\n\n\n040\n4\n8\n32\nNevada\n2700551\n2700683\n2702483\n2713114\n2744670\n2776956\n2818935\n2868531\n2919555\n2972097\n3030725\n3090771\n3128500\n3138259\n\n\n040\n1\n1\n33\nNew Hampshire\n1316470\n1316457\n1316807\n1320444\n1324677\n1327272\n1334257\n1337480\n1343694\n1350395\n1355064\n1360783\n1365533\n1366275\n\n\n040\n1\n2\n34\nNew Jersey\n8791894\n8791959\n8799451\n8828552\n8845671\n8857821\n8867277\n8870312\n8873584\n8888147\n8891730\n8891258\n8890883\n8882371\n\n\n040\n4\n8\n35\nNew Mexico\n2059179\n2059199\n2064614\n2080707\n2087715\n2092833\n2090236\n2090071\n2092555\n2092844\n2093754\n2099634\n2106117\n2106319\n\n\n040\n1\n2\n36\nNew York\n19378102\n19378117\n19399956\n19499921\n19574362\n19626488\n19653431\n19657321\n19636391\n19593849\n19544098\n19463131\n19382373\n19336776\n\n\n040\n3\n5\n37\nNorth Carolina\n9535483\n9535762\n9574586\n9658913\n9751810\n9846717\n9937295\n10037218\n10161802\n10275758\n10391358\n10501384\n10581885\n10600823\n\n\n040\n2\n4\n38\nNorth Dakota\n672591\n672575\n674752\n685526\n702227\n723149\n738736\n755537\n756114\n756755\n760062\n763724\n765224\n765309\n\n\n040\n2\n3\n39\nOhio\n11536504\n11536763\n11539449\n11545735\n11550971\n11579692\n11606573\n11622315\n11640060\n11665706\n11680892\n11696507\n11699855\n11693217\n\n\n040\n3\n7\n40\nOklahoma\n3751351\n3751582\n3760014\n3788824\n3819320\n3853891\n3879187\n3910518\n3928143\n3933602\n3943488\n3960676\n3977682\n3980783\n\n\n040\n4\n9\n41\nOregon\n3831074\n3831083\n3837614\n3872672\n3900102\n3924110\n3965447\n4018542\n4093271\n4147294\n4183538\n4216116\n4237408\n4241507\n\n\n040\n1\n2\n42\nPennsylvania\n12702379\n12702891\n12711406\n12747052\n12769123\n12779538\n12792392\n12789838\n12788468\n12794679\n12809107\n12798883\n12794404\n12783254\n\n\n040\n1\n1\n44\nRhode Island\n1052567\n1052970\n1053994\n1053829\n1054893\n1055560\n1056511\n1056886\n1057816\n1056554\n1059338\n1058158\n1058004\n1057125\n\n\n040\n3\n5\n45\nSouth Carolina\n4625364\n4625358\n4635846\n4672655\n4719027\n4766469\n4826858\n4896006\n4963031\n5027102\n5091702\n5157702\n5205864\n5218040\n\n\n040\n2\n4\n46\nSouth Dakota\n814180\n814198\n816193\n823740\n833859\n842751\n849670\n854663\n863693\n873732\n879386\n887127\n891688\n892717\n\n\n040\n3\n6\n47\nTennessee\n6346105\n6346281\n6355518\n6400298\n6455752\n6496943\n6544617\n6595354\n6651277\n6714748\n6778180\n6830325\n6875939\n6886834\n\n\n040\n3\n7\n48\nTexas\n25145561\n25146072\n25241897\n25645504\n26084120\n26479646\n26963092\n27468531\n27914064\n28291024\n28624564\n28986794\n29286467\n29360759\n\n\n040\n4\n8\n49\nUtah\n2763885\n2763891\n2775413\n2814797\n2854146\n2898773\n2938327\n2983626\n3044241\n3103540\n3155153\n3203383\n3239542\n3249879\n\n\n040\n1\n1\n50\nVermont\n625741\n625727\n625886\n627197\n626361\n626603\n625693\n625810\n624366\n625132\n624802\n624046\n623821\n623347\n\n\n040\n3\n5\n51\nVirginia\n8001024\n8001046\n8024004\n8102437\n8187456\n8255861\n8315430\n8367303\n8417651\n8471011\n8510920\n8556642\n8587217\n8590563\n\n\n040\n4\n9\n53\nWashington\n6724540\n6724540\n6743009\n6827479\n6898599\n6966252\n7057531\n7167287\n7299961\n7427951\n7526793\n7614024\n7678379\n7693612\n\n\n040\n3\n5\n54\nWest Virginia\n1852994\n1853008\n1854265\n1856606\n1857446\n1854768\n1850569\n1843332\n1832435\n1818683\n1805953\n1795263\n1788150\n1784787\n\n\n040\n2\n3\n55\nWisconsin\n5686986\n5687285\n5690538\n5705840\n5720825\n5738012\n5753199\n5762927\n5775170\n5793147\n5809319\n5824581\n5833464\n5832655\n\n\n040\n4\n8\n56\nWyoming\n563626\n563775\n564531\n567491\n576656\n582620\n583159\n586389\n585243\n579994\n579054\n580116\n582030\n582328\n\n\n040\nX\nX\n72\nPuerto Rico\n3725789\n3726157\n3721525\n3678732\n3634488\n3593077\n3534874\n3473232\n3406672\n3325284\n3193344\n3193553\n3167851\n3159343"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#national-population-data",
    "href": "slides/08_advanced-visualization.html#national-population-data",
    "title": "MATH167R: Data visualization",
    "section": "National population data",
    "text": "National population data\nWe can use the SUMLEV variable to obtain only national data:\n\nUS_pop &lt;- state_population |&gt;\n  filter(SUMLEV == \"010\")\n\n# code to print the data\nkable(US_pop, digits = 3, row.names = F) |&gt;\n  kableExtra::kable_styling(\"striped\", full_width = T)\n\n\n\n\nSUMLEV\nREGION\nDIVISION\nSTATE\nNAME\nCENSUS2010POP\nESTIMATESBASE2010\nPOPESTIMATE2010\nPOPESTIMATE2011\nPOPESTIMATE2012\nPOPESTIMATE2013\nPOPESTIMATE2014\nPOPESTIMATE2015\nPOPESTIMATE2016\nPOPESTIMATE2017\nPOPESTIMATE2018\nPOPESTIMATE2019\nPOPESTIMATE042020\nPOPESTIMATE2020\n\n\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\n309327143\n311583481\n313877662\n316059947\n318386329\n320738994\n323071755\n325122128\n326838199\n328329953\n329398742\n329484123"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#national-population-data-1",
    "href": "slides/08_advanced-visualization.html#national-population-data-1",
    "title": "MATH167R: Data visualization",
    "section": "National population data",
    "text": "National population data\nHow can we generate the following plot?"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#national-population-data-2",
    "href": "slides/08_advanced-visualization.html#national-population-data-2",
    "title": "MATH167R: Data visualization",
    "section": "National population data",
    "text": "National population data\nNote that our data cannot be readily used with ggplot to generate the previous plot. Ideally, we would like two vectors of the same length: one representing Year and one representing Population. Today, we’ll discuss how to do this in both base R and the tidyverse.\n\n# base R\nplot_dat &lt;- data.frame(\n  Year = 2010:2020,\n  Population = US_pop[1, 8:19]\n)\nhead(plot_dat)\n\n\n\n  Year Population.POPESTIMATE2010 Population.POPESTIMATE2011\n1 2010                  309327143                  311583481\n2 2011                  309327143                  311583481\n3 2012                  309327143                  311583481\n4 2013                  309327143                  311583481\n5 2014                  309327143                  311583481\n6 2015                  309327143                  311583481\n  Population.POPESTIMATE2012 Population.POPESTIMATE2013\n1                  313877662                  316059947\n2                  313877662                  316059947\n3                  313877662                  316059947\n4                  313877662                  316059947\n5                  313877662                  316059947\n6                  313877662                  316059947\n  Population.POPESTIMATE2014 Population.POPESTIMATE2015\n1                  318386329                  320738994\n2                  318386329                  320738994\n3                  318386329                  320738994\n4                  318386329                  320738994\n5                  318386329                  320738994\n6                  318386329                  320738994\n  Population.POPESTIMATE2016 Population.POPESTIMATE2017\n1                  323071755                  325122128\n2                  323071755                  325122128\n3                  323071755                  325122128\n4                  323071755                  325122128\n5                  323071755                  325122128\n6                  323071755                  325122128\n  Population.POPESTIMATE2018 Population.POPESTIMATE2019\n1                  326838199                  328329953\n2                  326838199                  328329953\n3                  326838199                  328329953\n4                  326838199                  328329953\n5                  326838199                  328329953\n6                  326838199                  328329953\n  Population.POPESTIMATE042020 Population.POPESTIMATE2020\n1                    329398742                  329484123\n2                    329398742                  329484123\n3                    329398742                  329484123\n4                    329398742                  329484123\n5                    329398742                  329484123\n6                    329398742                  329484123"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#national-population-data-3",
    "href": "slides/08_advanced-visualization.html#national-population-data-3",
    "title": "MATH167R: Data visualization",
    "section": "National population data",
    "text": "National population data\nWhat went wrong? US_pop[1, 8:19] is a tibble, and we need a numeric.\n\nplot_dat &lt;- data.frame(\n  Year = 2010:2020,\n  Population = as.numeric(US_pop[1, 8:19])\n)\n\n\n\nError in data.frame(Year = 2010:2020, Population = as.numeric(US_pop[1, : arguments imply differing number of rows: 11, 12"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#national-population-data-4",
    "href": "slides/08_advanced-visualization.html#national-population-data-4",
    "title": "MATH167R: Data visualization",
    "section": "National population data",
    "text": "National population data\nNow what? US_pop has an extra column POPESTIMATE042020 which we need to remove.\n\n# base R\nplot_dat &lt;- data.frame(\n  Year = 2010:2020,\n  Population = as.numeric(US_pop[, c(8:17, 19)])\n)\nhead(plot_dat)\n\n  Year Population\n1 2010  309327143\n2 2011  311583481\n3 2012  313877662\n4 2013  316059947\n5 2014  318386329\n6 2015  320738994"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#national-population-data-5",
    "href": "slides/08_advanced-visualization.html#national-population-data-5",
    "title": "MATH167R: Data visualization",
    "section": "National population data",
    "text": "National population data\nFinally, we can use the plot function to get our desired visualization:\n\nplot(plot_dat$Year, plot_dat$Population)"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#tidyverse-strategy",
    "href": "slides/08_advanced-visualization.html#tidyverse-strategy",
    "title": "MATH167R: Data visualization",
    "section": "Tidyverse strategy",
    "text": "Tidyverse strategy\nNow let’s see how we might approach the same task in the tidyverse. Our strategy will be to “tidy” the data so we have one row for each observation and one column for each observation.\nFirst, let’s remove the unnecessary column using the select() function. Here the kable function is used to print out our table.\n\n\nUS_pop |&gt; \n  select(-POPESTIMATE042020)  |&gt;\n  kable()\n\n\n\n\nSUMLEV\nREGION\nDIVISION\nSTATE\nNAME\nCENSUS2010POP\nESTIMATESBASE2010\nPOPESTIMATE2010\nPOPESTIMATE2011\nPOPESTIMATE2012\nPOPESTIMATE2013\nPOPESTIMATE2014\nPOPESTIMATE2015\nPOPESTIMATE2016\nPOPESTIMATE2017\nPOPESTIMATE2018\nPOPESTIMATE2019\nPOPESTIMATE2020\n\n\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\n309327143\n311583481\n313877662\n316059947\n318386329\n320738994\n323071755\n325122128\n326838199\n328329953\n329484123"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#tidyverse-strategy-1",
    "href": "slides/08_advanced-visualization.html#tidyverse-strategy-1",
    "title": "MATH167R: Data visualization",
    "section": "Tidyverse strategy",
    "text": "Tidyverse strategy\nNow let’s use the pivot_longer function to combine the POPESTIMATE columns into two variables: Year and Population:\n\n\nUS_pop |&gt; \n  select(-POPESTIMATE042020) |&gt;\n  pivot_longer(contains(\"POPESTIMATE\"), \n               names_to = \"Year\",\n               values_to = \"Population\") |&gt;\n  kable()\n\n\n\n\nSUMLEV\nREGION\nDIVISION\nSTATE\nNAME\nCENSUS2010POP\nESTIMATESBASE2010\nYear\nPopulation\n\n\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\nPOPESTIMATE2010\n309327143\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\nPOPESTIMATE2011\n311583481\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\nPOPESTIMATE2012\n313877662\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\nPOPESTIMATE2013\n316059947\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\nPOPESTIMATE2014\n318386329\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\nPOPESTIMATE2015\n320738994\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\nPOPESTIMATE2016\n323071755\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\nPOPESTIMATE2017\n325122128\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\nPOPESTIMATE2018\n326838199\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\nPOPESTIMATE2019\n328329953\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\nPOPESTIMATE2020\n329484123\n\n\n\n\n\n\n\n\nWhat do we need to do next?"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#tidyverse-strategy-2",
    "href": "slides/08_advanced-visualization.html#tidyverse-strategy-2",
    "title": "MATH167R: Data visualization",
    "section": "Tidyverse strategy",
    "text": "Tidyverse strategy\nFinally, we need to use the str_sub() function to shorten our Year variable before turning it into a numeric.\n\nUS_pop |&gt; \n  select(-POPESTIMATE042020) |&gt;\n  pivot_longer(contains(\"POPESTIMATE\"), \n               names_to = \"Year\",\n               values_to = \"Population\") |&gt;\n  mutate(Year = as.numeric(stringr::str_sub(Year, start = 12))) |&gt;\n  kable()\n\n\n\n\n\n\n\nSUMLEV\nREGION\nDIVISION\nSTATE\nNAME\nCENSUS2010POP\nESTIMATESBASE2010\nYear\nPopulation\n\n\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\n2010\n309327143\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\n2011\n311583481\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\n2012\n313877662\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\n2013\n316059947\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\n2014\n318386329\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\n2015\n320738994\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\n2016\n323071755\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\n2017\n325122128\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\n2018\n326838199\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\n2019\n328329953\n\n\n010\n0\n0\n00\nUnited States\n308745538\n308758105\n2020\n329484123"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#tidyverse-strategy-3",
    "href": "slides/08_advanced-visualization.html#tidyverse-strategy-3",
    "title": "MATH167R: Data visualization",
    "section": "Tidyverse strategy",
    "text": "Tidyverse strategy\nNow we can |&gt; it to ggplot:\n\nUS_pop |&gt; \n  select(-POPESTIMATE042020) |&gt;\n  pivot_longer(contains(\"POPESTIMATE\"), \n               names_to = \"Year\",\n               values_to = \"Population\") |&gt;\n  mutate(Year = as.numeric(stringr::str_sub(Year, start = 12))) |&gt;\n  ggplot(aes(x = Year, y = Population)) + \n  geom_line()"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#tidyverse-strategy-more-complicated-plots",
    "href": "slides/08_advanced-visualization.html#tidyverse-strategy-more-complicated-plots",
    "title": "MATH167R: Data visualization",
    "section": "Tidyverse strategy: More complicated plots",
    "text": "Tidyverse strategy: More complicated plots\nWe can map the color aesthetic to the region:\n\nstate_population |&gt; \n  filter(SUMLEV == \"020\") |&gt;\n  select(-POPESTIMATE042020) |&gt;\n  pivot_longer(contains(\"POPESTIMATE\"), \n               names_to = \"Year\",\n               values_to = \"Population\") |&gt;\n  mutate(Year = as.numeric(stringr::str_sub(Year, start = 12))) |&gt;\n  ggplot(aes(x = Year, y = Population, color = NAME)) + \n  geom_line()"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#pivot_longer-and-pivot_wider",
    "href": "slides/08_advanced-visualization.html#pivot_longer-and-pivot_wider",
    "title": "MATH167R: Data visualization",
    "section": "pivot_longer() and pivot_wider()",
    "text": "pivot_longer() and pivot_wider()\nThe pivot_longer() and pivot_wider() functions are useful for reshaping data: pivot_longer() “lengthens” datasets and pivot_wider() does the opposite.\nThey are challenging to use because you need to have a clear vision of the data frame you want, not because they are complicated in R."
  },
  {
    "objectID": "slides/08_advanced-visualization.html#example-pivot_longer",
    "href": "slides/08_advanced-visualization.html#example-pivot_longer",
    "title": "MATH167R: Data visualization",
    "section": "Example: pivot_longer()",
    "text": "Example: pivot_longer()\n\nrelig_income\n\n# A tibble: 18 × 11\n   religion `&lt;$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`\n   &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n 1 Agnostic      27        34        60        81        76       137        122\n 2 Atheist       12        27        37        52        35        70         73\n 3 Buddhist      27        21        30        34        33        58         62\n 4 Catholic     418       617       732       670       638      1116        949\n 5 Don’t k…      15        14        15        11        10        35         21\n 6 Evangel…     575       869      1064       982       881      1486        949\n 7 Hindu          1         9         7         9        11        34         47\n 8 Histori…     228       244       236       238       197       223        131\n 9 Jehovah…      20        27        24        24        21        30         15\n10 Jewish        19        19        25        25        30        95         69\n11 Mainlin…     289       495       619       655       651      1107        939\n12 Mormon        29        40        48        51        56       112         85\n13 Muslim         6         7         9        10         9        23         16\n14 Orthodox      13        17        23        32        32        47         38\n15 Other C…       9         7        11        13        13        14         18\n16 Other F…      20        33        40        46        49        63         46\n17 Other W…       5         2         3         4         2         7          3\n18 Unaffil…     217       299       374       365       341       528        407\n# ℹ 3 more variables: `$100-150k` &lt;dbl&gt;, `&gt;150k` &lt;dbl&gt;,\n#   `Don't know/refused` &lt;dbl&gt;"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#example-pivot_longer-1",
    "href": "slides/08_advanced-visualization.html#example-pivot_longer-1",
    "title": "MATH167R: Data visualization",
    "section": "Example: pivot_longer()",
    "text": "Example: pivot_longer()\n\nrelig_income |&gt;\n  pivot_longer(!religion, names_to = \"income\", values_to = \"count\")\n\n# A tibble: 180 × 3\n   religion income             count\n   &lt;chr&gt;    &lt;chr&gt;              &lt;dbl&gt;\n 1 Agnostic &lt;$10k                 27\n 2 Agnostic $10-20k               34\n 3 Agnostic $20-30k               60\n 4 Agnostic $30-40k               81\n 5 Agnostic $40-50k               76\n 6 Agnostic $50-75k              137\n 7 Agnostic $75-100k             122\n 8 Agnostic $100-150k            109\n 9 Agnostic &gt;150k                 84\n10 Agnostic Don't know/refused    96\n# ℹ 170 more rows"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#example-pivot_longer-2",
    "href": "slides/08_advanced-visualization.html#example-pivot_longer-2",
    "title": "MATH167R: Data visualization",
    "section": "Example: pivot_longer()",
    "text": "Example: pivot_longer()\n\nbillboard\n\n# A tibble: 317 × 79\n   artist     track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n   &lt;chr&gt;      &lt;chr&gt; &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 2 Pac      Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n 2 2Ge+her    The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n 3 3 Doors D… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n 4 3 Doors D… Loser 2000-10-21      76    76    72    69    67    65    55    59\n 5 504 Boyz   Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n 6 98^0       Give… 2000-08-19      51    39    34    26    26    19     2     2\n 7 A*Teens    Danc… 2000-07-08      97    97    96    95   100    NA    NA    NA\n 8 Aaliyah    I Do… 2000-01-29      84    62    51    41    38    35    35    38\n 9 Aaliyah    Try … 2000-03-18      59    53    38    28    21    18    16    14\n10 Adams, Yo… Open… 2000-08-26      76    76    74    69    68    67    61    58\n# ℹ 307 more rows\n# ℹ 68 more variables: wk9 &lt;dbl&gt;, wk10 &lt;dbl&gt;, wk11 &lt;dbl&gt;, wk12 &lt;dbl&gt;,\n#   wk13 &lt;dbl&gt;, wk14 &lt;dbl&gt;, wk15 &lt;dbl&gt;, wk16 &lt;dbl&gt;, wk17 &lt;dbl&gt;, wk18 &lt;dbl&gt;,\n#   wk19 &lt;dbl&gt;, wk20 &lt;dbl&gt;, wk21 &lt;dbl&gt;, wk22 &lt;dbl&gt;, wk23 &lt;dbl&gt;, wk24 &lt;dbl&gt;,\n#   wk25 &lt;dbl&gt;, wk26 &lt;dbl&gt;, wk27 &lt;dbl&gt;, wk28 &lt;dbl&gt;, wk29 &lt;dbl&gt;, wk30 &lt;dbl&gt;,\n#   wk31 &lt;dbl&gt;, wk32 &lt;dbl&gt;, wk33 &lt;dbl&gt;, wk34 &lt;dbl&gt;, wk35 &lt;dbl&gt;, wk36 &lt;dbl&gt;,\n#   wk37 &lt;dbl&gt;, wk38 &lt;dbl&gt;, wk39 &lt;dbl&gt;, wk40 &lt;dbl&gt;, wk41 &lt;dbl&gt;, wk42 &lt;dbl&gt;, …"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#example-pivot_longer-3",
    "href": "slides/08_advanced-visualization.html#example-pivot_longer-3",
    "title": "MATH167R: Data visualization",
    "section": "Example: pivot_longer()",
    "text": "Example: pivot_longer()\n\nbillboard |&gt;\n  pivot_longer(\n    cols = starts_with(\"wk\"),\n    names_to = \"week\",\n    names_prefix = \"wk\",\n    values_to = \"rank\",\n    values_drop_na = TRUE\n  )\n\n# A tibble: 5,307 × 5\n   artist  track                   date.entered week   rank\n   &lt;chr&gt;   &lt;chr&gt;                   &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26   1        87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26   2        82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26   3        72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26   4        77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26   5        87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26   6        94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26   7        99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02   1        91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02   2        87\n10 2Ge+her The Hardest Part Of ... 2000-09-02   3        92\n# ℹ 5,297 more rows"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#example-pivot_wider",
    "href": "slides/08_advanced-visualization.html#example-pivot_wider",
    "title": "MATH167R: Data visualization",
    "section": "Example: pivot_wider()",
    "text": "Example: pivot_wider()\n\nfish_encounters\n\n# A tibble: 114 × 3\n   fish  station  seen\n   &lt;fct&gt; &lt;fct&gt;   &lt;int&gt;\n 1 4842  Release     1\n 2 4842  I80_1       1\n 3 4842  Lisbon      1\n 4 4842  Rstr        1\n 5 4842  Base_TD     1\n 6 4842  BCE         1\n 7 4842  BCW         1\n 8 4842  BCE2        1\n 9 4842  BCW2        1\n10 4842  MAE         1\n# ℹ 104 more rows"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#example-pivot_wider-1",
    "href": "slides/08_advanced-visualization.html#example-pivot_wider-1",
    "title": "MATH167R: Data visualization",
    "section": "Example: pivot_wider()",
    "text": "Example: pivot_wider()\n\nfish_encounters |&gt;\n  pivot_wider(names_from = station, values_from = seen)\n\n# A tibble: 19 × 12\n   fish  Release I80_1 Lisbon  Rstr Base_TD   BCE   BCW  BCE2  BCW2   MAE   MAW\n   &lt;fct&gt;   &lt;int&gt; &lt;int&gt;  &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1 4842        1     1      1     1       1     1     1     1     1     1     1\n 2 4843        1     1      1     1       1     1     1     1     1     1     1\n 3 4844        1     1      1     1       1     1     1     1     1     1     1\n 4 4845        1     1      1     1       1    NA    NA    NA    NA    NA    NA\n 5 4847        1     1      1    NA      NA    NA    NA    NA    NA    NA    NA\n 6 4848        1     1      1     1      NA    NA    NA    NA    NA    NA    NA\n 7 4849        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n 8 4850        1     1     NA     1       1     1     1    NA    NA    NA    NA\n 9 4851        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n10 4854        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n11 4855        1     1      1     1       1    NA    NA    NA    NA    NA    NA\n12 4857        1     1      1     1       1     1     1     1     1    NA    NA\n13 4858        1     1      1     1       1     1     1     1     1     1     1\n14 4859        1     1      1     1       1    NA    NA    NA    NA    NA    NA\n15 4861        1     1      1     1       1     1     1     1     1     1     1\n16 4862        1     1      1     1       1     1     1     1     1    NA    NA\n17 4863        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n18 4864        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n19 4865        1     1      1    NA      NA    NA    NA    NA    NA    NA    NA"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#example-pivot_wider-2",
    "href": "slides/08_advanced-visualization.html#example-pivot_wider-2",
    "title": "MATH167R: Data visualization",
    "section": "Example: pivot_wider()",
    "text": "Example: pivot_wider()\n\nus_rent_income\n\n# A tibble: 104 × 5\n   GEOID NAME       variable estimate   moe\n   &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt;\n 1 01    Alabama    income      24476   136\n 2 01    Alabama    rent          747     3\n 3 02    Alaska     income      32940   508\n 4 02    Alaska     rent         1200    13\n 5 04    Arizona    income      27517   148\n 6 04    Arizona    rent          972     4\n 7 05    Arkansas   income      23789   165\n 8 05    Arkansas   rent          709     5\n 9 06    California income      29454   109\n10 06    California rent         1358     3\n# ℹ 94 more rows"
  },
  {
    "objectID": "slides/08_advanced-visualization.html#example-pivot_wider-3",
    "href": "slides/08_advanced-visualization.html#example-pivot_wider-3",
    "title": "MATH167R: Data visualization",
    "section": "Example: pivot_wider()",
    "text": "Example: pivot_wider()\n\nus_rent_income |&gt;\n  pivot_wider(\n    names_from = variable,\n    values_from = c(estimate, moe)\n  )\n\n# A tibble: 52 × 6\n   GEOID NAME                 estimate_income estimate_rent moe_income moe_rent\n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;         &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1 01    Alabama                        24476           747        136        3\n 2 02    Alaska                         32940          1200        508       13\n 3 04    Arizona                        27517           972        148        4\n 4 05    Arkansas                       23789           709        165        5\n 5 06    California                     29454          1358        109        3\n 6 08    Colorado                       32401          1125        109        5\n 7 09    Connecticut                    35326          1123        195        5\n 8 10    Delaware                       31560          1076        247       10\n 9 11    District of Columbia           43198          1424        681       17\n10 12    Florida                        25952          1077         70        3\n# ℹ 42 more rows"
  },
  {
    "objectID": "slides/01_overview.html#course-information",
    "href": "slides/01_overview.html#course-information",
    "title": "MATH167R: Overview",
    "section": "Course information",
    "text": "Course information\n\n\n\n\n\n\n\nInstructor\nPeter Gao\n\n\n\n\nLectures\nMW 10:30-11:45am in MH234\n\n\nOffice Hours\nMW 1:30-2:30pm in MH311 or email for an appointment\n\n\nEmail\npeter.gao [at sjsu]\nFeel free to send me a reminder after 48 hours have passed. Please include [MATH 167R] in your subject line."
  },
  {
    "objectID": "slides/01_overview.html#learning-objectives",
    "href": "slides/01_overview.html#learning-objectives",
    "title": "MATH167R: Overview",
    "section": "Learning objectives",
    "text": "Learning objectives\nUpon successful completion of this course, students will be able to:\n\nUnderstand the structures of R objects\nImport data from a variety of sources.\nSave data in formats that can be used by other programs.\nCreate publication quality graphs.\nDownload and install packages.\nCreate reusable functions.\nPerform statistical analysis on R."
  },
  {
    "objectID": "slides/01_overview.html#learning-objectives-1",
    "href": "slides/01_overview.html#learning-objectives-1",
    "title": "MATH167R: Overview",
    "section": "Learning objectives",
    "text": "Learning objectives\nIn this class we will discuss some basic computer science concepts, but we will emphasize tools for data analysis.\nAdvances in computation have enabled advances at every step of the data analysis pipeline:\n\nData collection, storage, and sharing\nExploratory data analysis and visualization\nStatistical inference and prediction\nSimulation \nCommunication and distribution of results"
  },
  {
    "objectID": "slides/01_overview.html#where-to-look",
    "href": "slides/01_overview.html#where-to-look",
    "title": "MATH167R: Overview",
    "section": "Where to look",
    "text": "Where to look\nCourse website: Course slides, assignment instructions.\nCanvas: Official syllabus, submitting assignments, receiving grades, data\nPiazza: Discussion board\nIf you ever have questions about accessing materials, please contact me. If you need any kind of accommodations, please let me know as soon as possible."
  },
  {
    "objectID": "slides/01_overview.html#what-you-need",
    "href": "slides/01_overview.html#what-you-need",
    "title": "MATH167R: Overview",
    "section": "What you need",
    "text": "What you need\nAccess to a computer with R and RStudio: the computer lab in MacQuarrie Hall 221 contains computers with all of the software that will be used during the semester.\nAll of the coursework may be completed on a personal computer and the software is freely available to students."
  },
  {
    "objectID": "slides/01_overview.html#course-structure",
    "href": "slides/01_overview.html#course-structure",
    "title": "MATH167R: Overview",
    "section": "Course structure",
    "text": "Course structure\nYour final grade will be calculated as follows:\n\n15%: Check-ins\n30%: Labs\n15%: Midterm exam\n20%: Final exam\n20%: Class project"
  },
  {
    "objectID": "slides/01_overview.html#assignments",
    "href": "slides/01_overview.html#assignments",
    "title": "MATH167R: Overview",
    "section": "Assignments",
    "text": "Assignments\n\nCheck-ins: On most Mondays, you will be assigned short check-in assignments. These are designed to be completed during lab or shortly after and will be due at the start of the next class. At the end of the quarter, your lowest check-in grade will be dropped. They will be graded on the following two point scale:\n\n0: indicates incomplete or unacceptable work\n1: effort towards completing at least 75% of the assignment\n2: effort towards completing the entire assignment."
  },
  {
    "objectID": "slides/01_overview.html#assignments-1",
    "href": "slides/01_overview.html#assignments-1",
    "title": "MATH167R: Overview",
    "section": "Assignments",
    "text": "Assignments\n\nLabs: On most Wednesdays, you will be assigned Labs. These are extended, more complicated assignments that you will likely not be able to complete during class. They will typically be due the next Wednesday."
  },
  {
    "objectID": "slides/01_overview.html#assignments-2",
    "href": "slides/01_overview.html#assignments-2",
    "title": "MATH167R: Overview",
    "section": "Assignments",
    "text": "Assignments\n\nMidterm and Final Exams: There will be one in-person midterm during the semester and one final exam during finals week. Practice questions will be provided in advance of the exams.\nClass Project: During the semester, you will complete a class project that requires you to apply the data manipulation, visualization, and analysis skills covered in this course to a real-world dataset of your choice."
  },
  {
    "objectID": "slides/01_overview.html#late-policy",
    "href": "slides/01_overview.html#late-policy",
    "title": "MATH167R: Overview",
    "section": "Late policy",
    "text": "Late policy\nIn general, the late policy is as follows:\n\nAny assignment that is received late but less than 24 hours late will receive a grade penalty of 25%.\nAny assignment that is received 24–48 hours late will receive a grade penalty of 50%.\nAssignments will not be accepted more than 48 hours late."
  },
  {
    "objectID": "slides/01_overview.html#collaboration",
    "href": "slides/01_overview.html#collaboration",
    "title": "MATH167R: Overview",
    "section": "Collaboration",
    "text": "Collaboration\n\nYou may discuss problems, approaches, and solutions with your classmates.\nYou must credit anyone with whom you worked on each assignment.\nAll submitted work must be your own; you should not submit code or answers copied from any resource including your classmates.\nIf you have any questions, ask!"
  },
  {
    "objectID": "slides/01_overview.html#chatgpt-and-other-tools",
    "href": "slides/01_overview.html#chatgpt-and-other-tools",
    "title": "MATH167R: Overview",
    "section": "ChatGPT (and other tools)…",
    "text": "ChatGPT (and other tools)…\nStudents are encouraged to use online resources including large language model-based chatbots (ex. ChatGPT) as aids for learning and understanding course material.\nHowever, the use of external resources like ChatGPT to generate code or answers for course assignments, exams, and projects is not permitted."
  },
  {
    "objectID": "slides/01_overview.html#discussion",
    "href": "slides/01_overview.html#discussion",
    "title": "MATH167R: Overview",
    "section": "Discussion",
    "text": "Discussion\nPiazza discussion forum: post questions about assignments and answer questions from other students.\nPosts may not include substantial amounts of code that can be used for a solution to any problem, but may include code snippets.\n\nWorth up to 2% extra credit on your final grade!"
  },
  {
    "objectID": "slides/01_overview.html#discussion-1",
    "href": "slides/01_overview.html#discussion-1",
    "title": "MATH167R: Overview",
    "section": "Discussion",
    "text": "Discussion\n\n\nBad questions:\n\nHow do you do problem 2?\nHere’s my code and it’s broken. How do I fix it?\n\n\nGood questions:\n\nHere’s a snippet of code I used for problem 2: \ncode snippet \nIt returned the following error: \nerror message \nDoes anyone know why? I already tried...\nI don’t understand the concept from Slide 18 today. Could anyone elaborate on why..."
  },
  {
    "objectID": "slides/01_overview.html#office-hours-aka-drop-in-hours",
    "href": "slides/01_overview.html#office-hours-aka-drop-in-hours",
    "title": "MATH167R: Overview",
    "section": "Office Hours (aka drop-in hours)",
    "text": "Office Hours (aka drop-in hours)\n\n\n\n\n\n\n\nIn-person\nMH 311 Monday and Wednesday 12:30 to 1:30pm or by appointment (email)\n\n\nZoom\nBy appointment\n\n\n\nCome by:\n\nfor a snack\nto ask questions or work with other students\njust to chat!\n\nMy advice: make it a habit to drop by office hours, starting early in the semester when schedules are less busy."
  },
  {
    "objectID": "slides/01_overview.html#lecture-slides",
    "href": "slides/01_overview.html#lecture-slides",
    "title": "MATH167R: Overview",
    "section": "Lecture slides",
    "text": "Lecture slides\nSlides will usually be posted on the course website before class. I encourage you to return to the slides after class and make sure you understand the code used and the concepts covered.\nGenerally speaking, code will be contained in blocks that look like this:\n\n# example comment\nexample line of code"
  },
  {
    "objectID": "slides/01_overview.html#getting-to-know-each-other",
    "href": "slides/01_overview.html#getting-to-know-each-other",
    "title": "MATH167R: Overview",
    "section": "Getting to know each other",
    "text": "Getting to know each other\nForm groups of 2-3 and discuss the following:\n\nIntroduce yourself (names, major/program)\nWhat are you excited/nervous/confused about with regards to this course? What questions do you have?\nHave you ever used R? Programmed?\nWhat is one area of interest you would like to use statistics/data science to study?"
  },
  {
    "objectID": "slides/01_overview.html#what-is-r",
    "href": "slides/01_overview.html#what-is-r",
    "title": "MATH167R: Overview",
    "section": "What is R?",
    "text": "What is R?\n\nR is a programming language designed for statistical analysis.\n\nopen-source\nfree\nlarge and active community of developers and users\ngreat analysis tools\ngreat visualization tools"
  },
  {
    "objectID": "slides/01_overview.html#why-r",
    "href": "slides/01_overview.html#why-r",
    "title": "MATH167R: Overview",
    "section": "Why R?",
    "text": "Why R?\nIn this class we will cover programming through the use of the R language, emphasizing statistical computing skills.\nAdvances in computation have enabled advances at every step of the data analysis pipeline:\n\nData collection, storage, and sharing\nExploratory data analysis and visualization\nStatistical inference and prediction\nCommunication and distribution of results\n\nR is a programming language tailored to these tasks."
  },
  {
    "objectID": "slides/01_overview.html#what-is-rstudio",
    "href": "slides/01_overview.html#what-is-rstudio",
    "title": "MATH167R: Overview",
    "section": "What is RStudio?",
    "text": "What is RStudio?\nRStudio is an integrated development environment (IDE) designed to make your life easier.\n\nOrganizes scripts, files, plots, code console, ...\nHighlights syntax\nHelpful interactive graphical interface\nWill make an efficient, reproducible workflow much easier"
  },
  {
    "objectID": "slides/01_overview.html#a-tour-through-r-and-rstudio",
    "href": "slides/01_overview.html#a-tour-through-r-and-rstudio",
    "title": "MATH167R: Overview",
    "section": "A tour through R and RStudio",
    "text": "A tour through R and RStudio\nBy default…\n\nTop left: Editor pane. Browse and edit scripts and data with tabs\nTop right: List of objects in your Environment (recall ls()), code History\nBottom left: Console for running R code line-by-line (&gt; prompt)\nBottom right: Files, plots, packages, help files"
  },
  {
    "objectID": "slides/01_overview.html#rstudio-r-a-fancy-calculator",
    "href": "slides/01_overview.html#rstudio-r-a-fancy-calculator",
    "title": "MATH167R: Overview",
    "section": "RStudio + R: A fancy calculator",
    "text": "RStudio + R: A fancy calculator\n\n# Addition\n6 + 3\n\n[1] 9\n\n\n\n\n# Subtraction\n6 - 3\n\n[1] 3\n\n\n\n\n\n# Multiplication\n6 * 3\n\n[1] 18\n\n\n\n\n\n# Division\n6 / 3\n\n[1] 2\n\n\nHere, the [1] indicates the first output value. We only have one output value here, but in the future we will have more."
  },
  {
    "objectID": "slides/01_overview.html#rstudio-r-a-fancy-calculator-1",
    "href": "slides/01_overview.html#rstudio-r-a-fancy-calculator-1",
    "title": "MATH167R: Overview",
    "section": "RStudio + R: A fancy calculator",
    "text": "RStudio + R: A fancy calculator\n\n# Exponentiation\n3 ^ 20\n\n[1] 3486784401\n\n\nR can usually handle bigger numbers than your handheld calculator, but even R has limits:\n\n\n# Bigger exponentiation\n3 ^ 1000\n\n[1] Inf"
  },
  {
    "objectID": "slides/01_overview.html#assignment",
    "href": "slides/01_overview.html#assignment",
    "title": "MATH167R: Overview",
    "section": "Assignment",
    "text": "Assignment\nR can also store values (like numbers) as objects, which can be referenced later:\n\nx &lt;- 7\nprint(x)\n\n[1] 7\n\ny &lt;- 3\nprint(x + y)\n\n[1] 10"
  },
  {
    "objectID": "slides/01_overview.html#a-tricky-calculator",
    "href": "slides/01_overview.html#a-tricky-calculator",
    "title": "MATH167R: Overview",
    "section": "A tricky calculator",
    "text": "A tricky calculator\nWhat do you expect the output to be?\n\nx &lt;- 7\ny &lt;- x + 1\nprint(y)\n\n\n\n\n[1] 8\n\n\n\n\nWhat about this code?\n\nx &lt;- 7\ny &lt;- x + 1\nx &lt;- 0\nprint(y)\n\n\n\n\n\n[1] 8"
  },
  {
    "objectID": "slides/01_overview.html#a-tricky-calculator-1",
    "href": "slides/01_overview.html#a-tricky-calculator-1",
    "title": "MATH167R: Overview",
    "section": "A tricky calculator",
    "text": "A tricky calculator\nWhen we assign y &lt;- x + 1, we essentially create a copy of x. As a result, when we reassign x &lt;- 0, y is not affected.\nThis isn’t necessarily “right” or “wrong”– this is just how R works! R is full of these little subtleties that you need to be able to grasp in order to write functional code."
  },
  {
    "objectID": "slides/01_overview.html#more-than-a-fancy-calculator",
    "href": "slides/01_overview.html#more-than-a-fancy-calculator",
    "title": "MATH167R: Overview",
    "section": "More than a fancy calculator",
    "text": "More than a fancy calculator\nOf course, we wouldn’t have a whole course on R if this was all it could do."
  },
  {
    "objectID": "slides/01_overview.html#data-analysis",
    "href": "slides/01_overview.html#data-analysis",
    "title": "MATH167R: Overview",
    "section": "Data analysis",
    "text": "Data analysis\n\nlibrary(palmerpenguins)\ndata(penguins)\nlm(body_mass_g ~ flipper_length_mm, data = penguins)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm, data = penguins)\n\nCoefficients:\n      (Intercept)  flipper_length_mm  \n         -5780.83              49.69"
  },
  {
    "objectID": "slides/01_overview.html#visualization",
    "href": "slides/01_overview.html#visualization",
    "title": "MATH167R: Overview",
    "section": "Visualization",
    "text": "Visualization\n\nlibrary(ggplot2)\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) + \n  geom_point() + geom_smooth(method = \"lm\")"
  },
  {
    "objectID": "slides/01_overview.html#communication",
    "href": "slides/01_overview.html#communication",
    "title": "MATH167R: Overview",
    "section": "Communication",
    "text": "Communication\nR Markdown files (see examples here)\n\nCombine code, output, and writing\nSelf-contained analyses\nCreates HTML, PDF, slides (like these!), webpages, …"
  },
  {
    "objectID": "slides/01_overview.html#installing-r-and-rstudio",
    "href": "slides/01_overview.html#installing-r-and-rstudio",
    "title": "MATH167R: Overview",
    "section": "Installing R and RStudio",
    "text": "Installing R and RStudio\n\nDownload and install R from this link\nDownload and install RStudio Desktop from this link."
  },
  {
    "objectID": "slides/01_overview.html#your-first-check-in",
    "href": "slides/01_overview.html#your-first-check-in",
    "title": "MATH167R: Overview",
    "section": "Your first check-in",
    "text": "Your first check-in\n\nOn the computer you are using, create a new folder titled “MATH167R” or something similar.\nWithin this folder, create a sub-folder named “checkins” or something similar.\nDownload “01_first-R-code.R” and save it in your checkins folder.\nOpen “01_first-R-code.R” in RStudio. It should look something like the code below."
  },
  {
    "objectID": "slides/01_overview.html#your-first-check-in-1",
    "href": "slides/01_overview.html#your-first-check-in-1",
    "title": "MATH167R: Overview",
    "section": "Your first check-in",
    "text": "Your first check-in\n\nRun the code line by line and answer the two questions on the Check-in 1 assignment on Canvas.\nFor complete credit for Check-in 1, please also complete the pre-course survey and NameCoach recording.\nIf you would like to find others to work with, please also reply to the Piazza post."
  },
  {
    "objectID": "slides/04_vectorization-lists.html#warm-up",
    "href": "slides/04_vectorization-lists.html#warm-up",
    "title": "MATH167R: Overview",
    "section": "Warm-up",
    "text": "Warm-up\nWhaa"
  },
  {
    "objectID": "slides/04_vectorization-lists.html#introductions",
    "href": "slides/04_vectorization-lists.html#introductions",
    "title": "MATH167R: Overview",
    "section": "Introductions",
    "text": "Introductions"
  },
  {
    "objectID": "slides/04_vectorization-lists.html#overview-of-today",
    "href": "slides/04_vectorization-lists.html#overview-of-today",
    "title": "MATH167R: Overview",
    "section": "Overview of today",
    "text": "Overview of today\n\nTypes of data\nBasic definitions: objects, expressions, values, functions\nR Markdown and file management"
  },
  {
    "objectID": "slides/04_vectorization-lists.html#types-of-data-1",
    "href": "slides/04_vectorization-lists.html#types-of-data-1",
    "title": "MATH167R: Overview",
    "section": "Types of data",
    "text": "Types of data\nWe saw last class that we can use R to perform basic mathematical operations:\n\n3 + 5\n\n[1] 8\n\n\n\nWe can also save these values as objects/variables and perform math on the objects:\n\nx &lt;- 3\ny &lt;- 5\nx + y\n\n[1] 8"
  },
  {
    "objectID": "slides/04_vectorization-lists.html#non-numerical-data",
    "href": "slides/04_vectorization-lists.html#non-numerical-data",
    "title": "MATH167R: Overview",
    "section": "Non-numerical data",
    "text": "Non-numerical data\nToday we’ll see that R can handle objects that are not numbers:\n\nz &lt;- \"Hello\"\n\n\nHowever, we need to be careful because not all operations work with all types of data:\n\nx + z\n\nError in x + z: non-numeric argument to binary operator"
  },
  {
    "objectID": "slides/04_vectorization-lists.html#atomic-vectors",
    "href": "slides/04_vectorization-lists.html#atomic-vectors",
    "title": "MATH167R: Overview",
    "section": "Atomic vectors",
    "text": "Atomic vectors\n\nlogical\ninteger\ndouble\ncharacter"
  },
  {
    "objectID": "slides/04_vectorization-lists.html#atomic-vectors-1",
    "href": "slides/04_vectorization-lists.html#atomic-vectors-1",
    "title": "MATH167R: Overview",
    "section": "Atomic vectors",
    "text": "Atomic vectors\n\nfrom Advanced R, Hadley Wickham."
  },
  {
    "objectID": "slides/04_vectorization-lists.html#atomic-vectors-2",
    "href": "slides/04_vectorization-lists.html#atomic-vectors-2",
    "title": "MATH167R: Overview",
    "section": "Atomic vectors",
    "text": "Atomic vectors\n\nexample_logical &lt;- T\nexample_integer &lt;- 1L\nexample_double &lt;- 1.0\nexample_character &lt;- \"Hello\"\n\n\n\nclass(example_logical)\n\n[1] \"logical\"\n\nclass(example_integer)\n\n[1] \"integer\"\n\nclass(example_double)\n\n[1] \"numeric\"\n\nclass(example_character)\n\n[1] \"character\""
  },
  {
    "objectID": "slides/04_vectorization-lists.html#coercion",
    "href": "slides/04_vectorization-lists.html#coercion",
    "title": "MATH167R: Overview",
    "section": "Coercion",
    "text": "Coercion\n\nas.numeric(example_logical)\n\n[1] 1\n\nas.numeric(example_character)\n\n[1] NA"
  },
  {
    "objectID": "slides/04_vectorization-lists.html#vectors",
    "href": "slides/04_vectorization-lists.html#vectors",
    "title": "MATH167R: Overview",
    "section": "Vectors",
    "text": "Vectors\n\nA vector is a set of atomic vectors of the same type\nWe create vectors using the function c()\n\n\n\n[1] 16  3  0  7 -2\n\n\n\nWe can shorthand vectors counting up (or down) using :\n\n\n\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "slides/04_vectorization-lists.html#vectors-1",
    "href": "slides/04_vectorization-lists.html#vectors-1",
    "title": "MATH167R: Overview",
    "section": "Vectors",
    "text": "Vectors\n\nWe index vectors using [index] after the vector name\n\n\n\n[1] 3\n\n\n\nIf we use a negative index, we return the vector with that element removed\n\n\n\n[1] 1 2 3 5"
  },
  {
    "objectID": "slides/04_vectorization-lists.html#vector-data-types",
    "href": "slides/04_vectorization-lists.html#vector-data-types",
    "title": "MATH167R: Overview",
    "section": "Vector Data Types",
    "text": "Vector Data Types\nNote that vectors can only have one type of data. So we can do\n\n\n[1] 1 2 3\n\n\n[1] \"a\" \"b\" \"c\"\n\n\nbut when we try\n\n\n[1] \"1\" \"b\" \"3\"\n\n\nR will force the entries in our vector to be of the same type! This is a common source of bugs."
  },
  {
    "objectID": "slides/04_vectorization-lists.html#useful-functions-for-vectors",
    "href": "slides/04_vectorization-lists.html#useful-functions-for-vectors",
    "title": "MATH167R: Overview",
    "section": "Useful functions for vectors",
    "text": "Useful functions for vectors\n\nmax(), min(), mean(), median(), sum(), sd(), var()\nlength() returns the number of elements in the vector\nhead() and tail() return the beginning and end vectors\nsort() will sort\nsummary() returns a 5-number summary\nany() and all() to check conditions on Boolean vectors\nhist() will return a crude histogram (we’ll learn how to make this nicer later)\n\nYou will need some of these for Lab 1!\nIf you are unclear about what any of them do, use ? before the function name to read the documentation. You should get in the habit of checking function documentation a lot!"
  },
  {
    "objectID": "slides/04_vectorization-lists.html#what-is-a-comment",
    "href": "slides/04_vectorization-lists.html#what-is-a-comment",
    "title": "MATH167R: Overview",
    "section": "What is a comment?",
    "text": "What is a comment?\n\nComputers completely ignore comments (in R, any line preceded by #)\nComments do not impact the functionality of your code at all."
  },
  {
    "objectID": "slides/04_vectorization-lists.html#so-why-do-them",
    "href": "slides/04_vectorization-lists.html#so-why-do-them",
    "title": "MATH167R: Overview",
    "section": "So why do them…",
    "text": "So why do them…\n\nCommenting a code allows you to write notes for readers of your code only\nUsually, that reader is you!\nCoding without comments is ill-advised, bordering on impossible\nSneak peak at functions…"
  },
  {
    "objectID": "slides/04_vectorization-lists.html#example",
    "href": "slides/04_vectorization-lists.html#example",
    "title": "MATH167R: Overview",
    "section": "Example",
    "text": "Example"
  },
  {
    "objectID": "slides/04_vectorization-lists.html#comment-style-guide",
    "href": "slides/04_vectorization-lists.html#comment-style-guide",
    "title": "MATH167R: Overview",
    "section": "Comment Style Guide",
    "text": "Comment Style Guide\n\nWhen starting out, you should comment most lines\nFrequent use of comments should allow most comments to be restricted to one line for readability\nA comment should go above its corresponding line, be indented equally with the next line, and use a single # to mark a comment\nUse a string of - or = to break your code into easily noticeable chunks\n\nExample: # Data Manipulation -----------\nRStudio allows you to collapse chunks marked like this to help with clutter\n\n\n\n\n\n* There are exceptions to every rule! Usually, comments are to help you!\n\n\n\n\n* Clear commenting is required for this course\n\n\n## Who are you to tell me how to type?\n\n\nWe will be using a mix of the Tidyverse Style Guide by Hadley Wickham and the Google Style Guide. Please see the links for details, but I will summarize some main points here and throughout the class as we learn more functionality, such as functions and packages.\n\n\nYou will be graded on following good code style!\n\n\n## Object Names\n\n\nUse either underscores (_) or big camel case (BigCamelCase) to separate words within an object name. Do not use dots . to separate words in R functions!\n\n\n::: {.cell}\n\n\n:::\n\n\n## Object Names\n\n\nNames should be concise, meaningful, and (generally) nouns.\n\n\n::: {.cell}\n\n\n:::\n\n\n## Object Names\n\n\nIt is very important that object names do not write over common functions!\n\n\n::: {.cell}\n\n\n:::\n\n\nNote: T and F are R shorthand for TRUE and FALSE, respectively. In general, spell them out to be as clear as possible.\n\n\n## Spacing\n\n\nPut a space after every comma, just like in English writing.\n\n\n::: {.cell}\n\n\n:::\n\n\nDo not put spaces inside or outside parentheses for regular function calls.\n\n\n::: {.cell}\n\n\n:::"
  },
  {
    "objectID": "slides/04_vectorization-lists.html#spacing-with-operators",
    "href": "slides/04_vectorization-lists.html#spacing-with-operators",
    "title": "MATH167R: Overview",
    "section": "Spacing with Operators",
    "text": "Spacing with Operators\nMost of the time when you are doing math, conditionals, logicals, or assignment, your operators should be surrounded by spaces. (e.g. for ==, +, -, &lt;-, etc.)\nThere are some exceptions we will learn more about later, such as the power symbol ^. See the Tidyverse Style Guide for more details!"
  },
  {
    "objectID": "slides/04_vectorization-lists.html#extra-spacing",
    "href": "slides/04_vectorization-lists.html#extra-spacing",
    "title": "MATH167R: Overview",
    "section": "Extra Spacing",
    "text": "Extra Spacing\nAdding extra spaces ok if it improves alignment of = or &lt;-."
  },
  {
    "objectID": "slides/04_vectorization-lists.html#long-lines-of-code",
    "href": "slides/04_vectorization-lists.html#long-lines-of-code",
    "title": "MATH167R: Overview",
    "section": "Long Lines of Code",
    "text": "Long Lines of Code\nStrive to limit your code to 80 characters per line. This fits comfortably on a printed page with a reasonably sized font.\nIf a function call is too long to fit on a single line, use one line each for the function name, each argument, and the closing ). This makes the code easier to read and to change later.\nTip! Try RStudio &gt; Preferences &gt; Code &gt; Display &gt; Show Margin with Margin column 80 to give yourself a visual cue!"
  },
  {
    "objectID": "slides/04_vectorization-lists.html#assignment",
    "href": "slides/04_vectorization-lists.html#assignment",
    "title": "MATH167R: Overview",
    "section": "Assignment",
    "text": "Assignment\nWe use &lt;- instead of = for assignment. This is moderately controversial if you find yourself in the right (wrong?) communities."
  },
  {
    "objectID": "slides/04_vectorization-lists.html#semicolons",
    "href": "slides/04_vectorization-lists.html#semicolons",
    "title": "MATH167R: Overview",
    "section": "Semicolons",
    "text": "Semicolons\nIn R, semi-colons (;) are used to execute pieces of R code on a single line. In general, this is bad practice and should be avoided. Also, you never need to end lines of code with semi-colons!"
  },
  {
    "objectID": "slides/04_vectorization-lists.html#quotes-and-strings",
    "href": "slides/04_vectorization-lists.html#quotes-and-strings",
    "title": "MATH167R: Overview",
    "section": "Quotes and Strings",
    "text": "Quotes and Strings\nUse \", not ', for quoting text. The only exception is when the text already contains double quotes and no single quotes."
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Instructor\nPeter Gao\n\n\nLectures\nWeekly on Monday and Wednesday, 10:30-11:45am in MH234\n\n\nOffice Hours\nMonday and Wednesday, 1:30-2:30pm in MH311 or email for an appointment\n\n\nEmail\npeter.gao [at sjsu]\nI will make every effort to respond to emails within a day, but please feel free to send me a reminder after 48 hours have passed. Please include [MATH 167R] in your subject line."
  },
  {
    "objectID": "syllabus.html#course-information",
    "href": "syllabus.html#course-information",
    "title": "Syllabus",
    "section": "",
    "text": "Instructor\nPeter Gao\n\n\nLectures\nWeekly on Monday and Wednesday, 10:30-11:45am in MH234\n\n\nOffice Hours\nMonday and Wednesday, 1:30-2:30pm in MH311 or email for an appointment\n\n\nEmail\npeter.gao [at sjsu]\nI will make every effort to respond to emails within a day, but please feel free to send me a reminder after 48 hours have passed. Please include [MATH 167R] in your subject line."
  },
  {
    "objectID": "syllabus.html#learning-objectives",
    "href": "syllabus.html#learning-objectives",
    "title": "Syllabus",
    "section": "Learning objectives",
    "text": "Learning objectives\nIntroduction to the R programming language. Topics include data structures, reading and writing data, databases, data visualization, accessing packages, programming structures and functions.\nUpon successful completion of this course, students will be able to:\n\nUnderstand the structures of R objects\nImport data from a variety of sources.\nSave data in formats that can be used by other programs.\nCreate publication quality graphs.\nDownload and install packages.\nCreate reusable functions.\nPerform statistical analysis on R.\n\nThis course aims to help you build a foundation of computational skills for data analysis. Data encountered in real world applications are usually messy, breaking many of the assumptions we make in typical statistics courses. Throughout this course, we will practice using computers to help us understand, summarize, visualize, and model complex data in a reproducible way."
  },
  {
    "objectID": "syllabus.html#materials",
    "href": "syllabus.html#materials",
    "title": "Syllabus",
    "section": "Materials",
    "text": "Materials\nThe primary text for the course will be the lecture slides, which will be posted to the course website. The following textbooks may be useful resources.\n\nGrolemund, G. (2014). Hands-On Programming with R. Available here for free.\nWickham, H. and Grolemund, G. (2023). R for Data Science. Available here for free.\nLee, B.L. (2016). An Introduction to Computational Probability and Statistics with R (Draft).\nÇetinkaya-Rundel, M. and Hardin, J. (2021) Introduction to Modern Statistics. Available here for free.\n\nThe main way we will interact with R is through the software RStudio, both of which can be downloaded and installed for free. The students will be required to have access to a computer with R and RStudio. The computer lab in MacQuarrie Hall 221 contains computers with all of the software that will be used during the semester. All of the coursework may be completed on a personal computer and the software is freely available to students."
  },
  {
    "objectID": "syllabus.html#course-requirements-and-grading",
    "href": "syllabus.html#course-requirements-and-grading",
    "title": "Syllabus",
    "section": "Course requirements and grading",
    "text": "Course requirements and grading\nTypically, each 75 minute class session will be broken up into a 50 minute lecture and a 25 minute lab. Lab time will be an opportunity for you to practice coding, work collaboratively on assignments, and ask for help.\n\nCheck-ins: On most Mondays, you will be assigned short check-in assignments. These are designed to be completed during lab or shortly after and will usually be due at the start of the next class. At the end of the quarter, your lowest check-in grade will be dropped. They will be graded on the following two point scale:\n\n0: indicates incomplete or unacceptable work\n1: represents demonstrated effort towards completing at least 75% of the assignment\n2: represents demonstrated effort towards completing the entire assignment.\n\nLabs: On most Wednesdays, you will be assigned Labs. These are extended, more complicated assignments that you will likely not be able to complete during class. They will typically be due the next Wednesday. At the end of the quarter, your lowest lab grade will be dropped.\nMidterm and Final Exams: There will be one in-person midterm during the semester and one final exam during finals week. Practice questions will be provided in advance of the exams. There will be no make-up midterm or final exams.\nClass Project: During the semester, you will complete a class project that requires you to apply the data manipulation, visualization, and analysis skills covered in this course to a real-world dataset of your choice.\nLate Work: In general, the late policy is as follows: Any assignment that is received late but less than 24 hours late will receive a grade penalty of 25%. Any assignment that is received 24 to 48 hours late will receive a grade penalty of 50%. Assignments will not be accepted more than 48 hours late.\n\n\nGrading scale\nYour final grade will be calculated as follows:\n\n15%: Check-ins\n30%: Labs\n15%: Midterm exam\n20%: Final exam\n20%: Class project\n\n\n\n\nLetter Grade\nRaw Percentage\n\n\n\n\nA plus\n96 to 100%\n\n\nA\n93 to 95%\n\n\nA minus\n90 to 92%\n\n\nB plus\n86 to 89%\n\n\nB\n83 to 85%\n\n\nB minus\n80 to 82%\n\n\nC plus\n76 to 79%\n\n\nC\n73 to 75%\n\n\nC minus\n70 to 72%\n\n\nD plus\n66 to 69%\n\n\nD\n63 to 65%\n\n\nD minus\n60 to 62%\n\n\nF\n0 to 60%"
  },
  {
    "objectID": "syllabus.html#course-schedule",
    "href": "syllabus.html#course-schedule",
    "title": "Syllabus",
    "section": "Course Schedule",
    "text": "Course Schedule\nThe updated course schedule is available on the course homepage here."
  },
  {
    "objectID": "syllabus.html#policies",
    "href": "syllabus.html#policies",
    "title": "Syllabus",
    "section": "Policies",
    "text": "Policies\n\nFeedback\nI encourage and appreciate your feedback throughout the quarter. You are welcome to provide feedback on any aspect of the course at any time via email or in person. If you would prefer to do so confidentially, you can do so through the form on the course Canvas page.\n\n\nCollaboration\nOn most assignments, collaboration is allowed and encouraged. You may discuss problems, approaches, and solutions with your classmates. Acceptable collaboration is limited to your classmates in this course and you must clearly include on any collaborative work the name(s) of anyone with whom you worked. Additionally, all submitted work must be your own; you should not submit code or answers copied from any resource including your classmates. Plagiarism and cheating is easy to detect and can lead to serious negative consequences for you. If you have any questions regarding this policy, please ask for clarification.\n\n\nOnline resources\nStudents are encouraged to use online resources including large language model-based chatbots (ex. ChatGPT) as aids for learning and understanding course material. However, the use of external resources like ChatGPT to generate code or answers for course labs, assignments, exams, and projects is not permitted.\n\n\nDiscussion\nYou are encouraged to participate on the discussion forum by posting questions about assignments and answering questions from other students. Posts may not include substantial amounts of code that can be used for a solution to any problem, but may include code snippets within reason. Participation, in the form of both questions and answers, can earn you up to 2% extra credit for your final grade. Posts will be evaluated based on how substantive and helpful they are to the class.\n\n\nUniversity policies\nPer University Policy S16-9, relevant university policy concerning all courses, such as student responsibilities, academic integrity, accommodations, dropping and adding, consent for recording of class, etc. and available student services (e.g. learning assistance, counseling, and other resources) are listed on Syllabus Information web page (link). Make sure to visit this page to review and be aware of these university policies and resources."
  },
  {
    "objectID": "syllabus.html#frequently-asked-questions",
    "href": "syllabus.html#frequently-asked-questions",
    "title": "Syllabus",
    "section": "Frequently Asked Questions",
    "text": "Frequently Asked Questions\nQ1. Why doesn’t my code work? Why don’t I “get” programming?\nA1. This is a natural part of learning to program. In fact, I believe that the ability to work through “bugs” and broken code is the single most important skill you can develop in this course. If you can learn how to be resourceful and solve your own coding problems, you will be able to learn any programming language on your own.\nQ2. OK, but my homework is due in a week and I need actual advice on how to fix this bug.\nA2. It sounds like you’re getting started early! Good. If you’re running into trouble, here are a few places you can ask for help:\n\nGoogle\nStackOverflow\nThe course discussion board\nYour classmates\n\nQ3. OK, but my homework is due tomorrow and I still can’t fix this bug.\nA3. Above all, try not to put yourself in this position. Start early and ask questions early. Give yourself time to solve your own problems. Of course, sometime you will get busy or life will get in the way and you won’t have as much time as you would like to work on an assignment. My second piece of advice is don’t go it alone. There have been numerous times where I have spent hours looking for a bug only to have a friend identify it in minutes. This does not just mean asking your friends who have already completed MATH 167 for help—some times all you need is a different perspective. Ask your classmates for help—in person or on the discussion board."
  },
  {
    "objectID": "checkins/03_checkin.html",
    "href": "checkins/03_checkin.html",
    "title": "Check-in 3",
    "section": "",
    "text": "Remember, you must submit both your .Rmd and the compiled .html in order to receive full credit! In addition, to receive full credit, your code output and plots must be correctly formatted."
  },
  {
    "objectID": "checkins/03_checkin.html#a.-flights-data",
    "href": "checkins/03_checkin.html#a.-flights-data",
    "title": "Check-in 3",
    "section": "A. Flights Data",
    "text": "A. Flights Data\n1. For this lab, we’ll be using the flights data. You can load this data using the following code:\n\nlibrary(nycflights13)\ndata(flights)\n\n2. Use the mutate() function to turn origin into a factor.\n\n# YOUR CODE HERE\n\n3. Compute the mean arr_delay for each origin airport. Which airport has the longest delays on average? You can drop missing rows.\n\n# YOUR CODE HERE\n\n\n4. Use the mutate() function to turn month into a factor.\n\n# YOUR CODE HERE\n\n\n5. Compute the mean arr_delay by month. What do you notice?\n\n# YOUR CODE HERE\n\n\n6. Compute the mean arr_delay by month AND airport. What do you notice?\n\n# YOUR CODE HERE"
  },
  {
    "objectID": "checkins/06_checkin.html",
    "href": "checkins/06_checkin.html",
    "title": "Check-in 6",
    "section": "",
    "text": "Remember, you must submit both your .Rmd and the compiled .html in order to receive full credit! In addition, to receive full credit, your code output and plots must be correctly formatted.\n\nCollaborators\nINSERT NAMES OF ANY COLLABORATORS\nGiven a vector \\(\\mathbf{x}=(x_1,\\ldots, x_n)\\) and a number \\(p\\geq 1\\), the vector p-norm is defined as\n\\[||\\mathbf{x}||_p=(|x_1|^p+\\cdots+|x_n|^p)^{1/p}\\]\nFor example, the vector 2-norm is given by\n\\[||\\mathbf{x}||_2=(|x_1|^2+\\cdots+|x_n|^2)^{1/2}\\]\nConsider the following code.\n\ncreate_p_norm &lt;- function(p = 2) {\n  return(\n    function(x) return(sum(abs(x) ^ p) ^ (1 / p))\n  )\n}\n\n\nExplain in your own words what the following code does:\n\n\nnorm_1 &lt;- create_p_norm(1)\nx &lt;- c(-1, 1, 2)\nnorm_1(x)\n\n[1] 4\n\n\n\nExplain in your own words what the following code does:\n\n\np &lt;- 3\nnorm_mystery &lt;- create_p_norm()\nx &lt;- c(-1, 1, 2)\nnorm_mystery(x)\n\n[1] 2.44949"
  },
  {
    "objectID": "checkins/01_first-checkin.html",
    "href": "checkins/01_first-checkin.html",
    "title": "Check-in 1: Instructions",
    "section": "",
    "text": "On the computer you are using, create a new folder titled “MATH167R” or something similar.\nWithin this folder, create a sub-folder named “checkins” or something similar.\nDownload “01_first-R-code.R” and save it in your checkins folder.\nOpen “01_first-R-code.R” in RStudio. It should look something like the code below.\n\n\nsides &lt;- c(\"H\", \"T\")\n\nflip1 &lt;- sample(sides, 1, replace = T)\nprint(flip1)\n\nflip10 &lt;- sample(sides, 10, replace = T)\nprint(flip10)\n\n\nRun the code line by line and answer the two questions on the Check-in 1 assignment on Canvas.\nFor complete credit for Check-in 1, please also complete the pre-course survey and NameCoach recording (links on Canvas).\nIf you would like to find others to work with, please also reply to the Piazza post."
  },
  {
    "objectID": "checkins/01_first-checkin.html#a.-running-your-first-r-code",
    "href": "checkins/01_first-checkin.html#a.-running-your-first-r-code",
    "title": "Check-in 1: Instructions",
    "section": "",
    "text": "On the computer you are using, create a new folder titled “MATH167R” or something similar.\nWithin this folder, create a sub-folder named “checkins” or something similar.\nDownload “01_first-R-code.R” and save it in your checkins folder.\nOpen “01_first-R-code.R” in RStudio. It should look something like the code below.\n\n\nsides &lt;- c(\"H\", \"T\")\n\nflip1 &lt;- sample(sides, 1, replace = T)\nprint(flip1)\n\nflip10 &lt;- sample(sides, 10, replace = T)\nprint(flip10)\n\n\nRun the code line by line and answer the two questions on the Check-in 1 assignment on Canvas.\nFor complete credit for Check-in 1, please also complete the pre-course survey and NameCoach recording (links on Canvas).\nIf you would like to find others to work with, please also reply to the Piazza post."
  },
  {
    "objectID": "checkins/05_checkin.html",
    "href": "checkins/05_checkin.html",
    "title": "Check-in 5",
    "section": "",
    "text": "Remember, you must submit both your .Rmd and the compiled .html in order to receive full credit! In addition, to receive full credit, your code output and plots must be correctly formatted.\n\nCollaborators\nINSERT NAMES OF ANY COLLABORATORS\n\n(Project Euler Problem 1) The natural numbers less than 10 that are divisible by 3 or 5 are 3, 5, 6, and 9. The sum of these numbers is 23. Write R code to compute the sum of all the numbers less than 1000 that are divisible by 3 or 5."
  },
  {
    "objectID": "checkins/07_checkin.html",
    "href": "checkins/07_checkin.html",
    "title": "Check-in 7",
    "section": "",
    "text": "Remember, you must submit both your .Rmd and the compiled .html in order to receive full credit! In addition, to receive full credit, your code output and plots must be correctly formatted.\n\nCollaborators\nINSERT NAMES OF ANY COLLABORATORS\nUse the following code to create a list of four matrices:\n\nset.seed(100)\nmatrix_list &lt;- list(\n  A = diag(5),\n  B = matrix(rnorm(9), nrow = 3, ncol = 3),\n  C = matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2),\n  D = diag(c(1:5))\n)\n\n\nUse the lapply function to create a list of length four containing the inverse of these four matrices.\nUse the sapply function to create a vector of length four containing the determinants of these four matrices."
  },
  {
    "objectID": "checkins/02_checkin.html",
    "href": "checkins/02_checkin.html",
    "title": "Check-in 2",
    "section": "",
    "text": "You should edit this .Rmd using RStudio, then click Render in the menu bar of the Source window (above the text of this .Rmd). Remember, you must submit both your .Rmd and the compiled .html in order to receive full credit!"
  },
  {
    "objectID": "checkins/02_checkin.html#a.-functions",
    "href": "checkins/02_checkin.html#a.-functions",
    "title": "Check-in 2",
    "section": "A. Functions",
    "text": "A. Functions\nWork with one or two other students,\n1. In words, what does the following line of code do?\n\nsample(1:6, 1)\n\n[1] 1\n\n\n\n2. Run the line of code in RStudio. What do you get? What did your groupmates get? What happens to the result each time you knit the document?\n\n3. Below, we introduce the set.seed function. What do the two lines of code below do? What does the 456 mean? What happens to the result each time you knit the document?\n\nset.seed(456)\nsample(1:6, 1)\n\n[1] 5"
  },
  {
    "objectID": "checkins/02_checkin.html#b.-vectors-and-matrices",
    "href": "checkins/02_checkin.html#b.-vectors-and-matrices",
    "title": "Check-in 2",
    "section": "B. Vectors and Matrices",
    "text": "B. Vectors and Matrices\n4. Write a line of code to generate a vector of length 100 whose entries are 1, 2, …, 100.\n\n# REPLACE WITH YOUR CODE\n\n5. Write a line of code to generate the following matrix:\n1 2 3\n4 5 6\n7 8 9\n\n# REPLACE WITH YOUR CODE"
  },
  {
    "objectID": "checkins/04_checkin.html",
    "href": "checkins/04_checkin.html",
    "title": "Check-in 4",
    "section": "",
    "text": "Remember, you must submit both your .Rmd and the compiled .html in order to receive full credit! In addition, to receive full credit, your code output and plots must be correctly formatted."
  },
  {
    "objectID": "checkins/04_checkin.html#a.-housing-units-data",
    "href": "checkins/04_checkin.html#a.-housing-units-data",
    "title": "Check-in 4",
    "section": "A. Housing units data",
    "text": "A. Housing units data\n\nhousing_units &lt;- readr::read_csv(\"https://www2.census.gov/programs-surveys/popest/datasets/2010-2020/housing/HU-EST2020_ALL.csv\")\n\n1. Generate a line plot of the number of housing units in the entire United States from 2010 to 2020.\n2. Generate a line plot of the number of housing units in each of the four regions (Midwest, Northeast, South, and West) from 2010 to 2020, using a different color for each region."
  }
]