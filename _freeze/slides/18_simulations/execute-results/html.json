{
  "hash": "2b93f1b22c332eb88d5efce20d5036d4",
  "result": {
    "markdown": "---\ntitle: \"MATH167R: Simulations\"\nauthor: \"Peter Gao\"\nformat: \n  revealjs:\n    theme: [./slides.scss, ../theme.scss]\neditor: visual\n---\n\n\n## Overview of today\n\n-   Random variables in R\n-   The `r`, `p`, `d`, and `q` functions\n-   Writing simulations\n\n## Random variables in R\n\nWe have already seen\n\n## The `r`, `p`, `d`, and `q` functions\n\n1.  `rnorm()` can be used to generate `n` random observations from a normal distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrnorm(n = 1, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4004343\n```\n:::\n:::\n\n\n2.  `pnorm()` can be used to compute the distribution function at a value `q`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npnorm(q = 1, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8413447\n```\n:::\n:::\n\n\n3.  `qnorm()` can be used to compute the quantile function at a percentile `p`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqnorm(p = .75, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6744898\n```\n:::\n:::\n\n\n4.  `dnorm()` can be used to compute the density function at a value `x`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndnorm(x = .5, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3520653\n```\n:::\n:::\n\n\n## Exercise\n\nSuppose we perform a hypothesis test using a normal distribution and obtain a z-score of -1.24. How would we compute the p-value?\n\n## Random seeds\n\nRemember that `set.seed()` can be used to ensure that you obtain the same results each time you run your code.\n\nFor example, if you include the command `x <- rnorm(1)` in an .Rmd document with running `set.seed()`, each time you knit, you will produce a different value of `x`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1022)\nrnorm(n = 1, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.6303919\n```\n:::\n:::\n\n\n## Writing simulations\n\nSuppose we wish to compute the expected value (or some other summary) of the gambler's winnings. We can either:\n\n-   Analytically compute the quantity of interest\n-   Write code to repeatedly simulate values of the gambler's winnings and then summarize these values\n\n## Monte Carlo methods\n\n## Example: Transformations of random variables\n\nSuppose $X_i\\sim N(0, 1)$ for $1\\leq i\\leq n$, for some $n$. What is $E(\\mathrm{max}(X_1,\\ldots, X_n))?$ How does $E(\\mathrm{max}(X_1,\\ldots, X_n))$ change for different values of $n$?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1022)\nn_sim <- 1000\nn <- 10\nmaxes <- numeric(n_sim)\nfor (i in 1:n_sim) {\n  maxes[i] <- max(rnorm(n))\n}\nmean(maxes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.547503\n```\n:::\n:::\n\n\n. . .\n\nWhat about for $n=100$? Should the expected maximum be larger or smaller?\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_sim <- 1000\nn <- 100\nmaxes <- numeric(n_sim)\nfor (i in 1:n_sim) {\n  maxes[i] <- max(rnorm(n))\n}\nmean(maxes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.51509\n```\n:::\n:::\n\n\n## Example: Transformations of random variables\n\nSuppose $X\\sim N(0, 1)$. What is $E(e^X)$?\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ni <- function(d) {\n  print(d)\n  if (!is.numeric(d)) {\n    stop(\"`d` must be numeric\", call. = FALSE)\n  }\n  d + 10\n}\nf(\"a\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in f(\"a\"): could not find function \"f\"\n```\n:::\n:::\n\n\n## Random walks\n\n## Gambler's ruin\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "18_simulations_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}